// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2018 09:15:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_vlg_sample_tst(
	main_clk,
	sec_clk,
	sampler_tx
);
input  main_clk;
input  sec_clk;
output sampler_tx;

reg sample;
time current_time;
always @(main_clk or sec_clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab2_vlg_check_tst (
	Branch,
	Cause,
	EPC,
	ForwardA,
	ForwardB,
	HI,
	Instruction,
	Jump,
	JumpEX,
	Link,
	LO,
	MemtoReg,
	moveHiLo,
	opALU,
	OrigALU,
	PC,
	PC/EX,
	ReadMem,
	regDestino,
	RegDst,
	RegWriteWB,
	saidaMemDados,
	SaidaWB,
	shamt,
	t0,
	t1,
	t2,
	t3,
	t4,
	t5,
	t6,
	ULA_main,
	ValorA,
	ValorB,
	WriteMem,
	WriteReg,
	sampler_rx
);
input  Branch;
input [31:0] Cause;
input [31:0] EPC;
input [1:0] ForwardA;
input [1:0] ForwardB;
input [31:0] HI;
input [31:0] Instruction;
input  Jump;
input [31:0] JumpEX;
input  Link;
input [31:0] LO;
input  MemtoReg;
input  moveHiLo;
input [3:0] opALU;
input  OrigALU;
input [31:0] PC;
input [31:0] PC/EX;
input  ReadMem;
input [4:0] regDestino;
input  RegDst;
input  RegWriteWB;
input [31:0] saidaMemDados;
input [31:0] SaidaWB;
input [4:0] shamt;
input [31:0] t0;
input [31:0] t1;
input [31:0] t2;
input [31:0] t3;
input [31:0] t4;
input [31:0] t5;
input [31:0] t6;
input [31:0] ULA_main;
input [31:0] ValorA;
input [31:0] ValorB;
input  WriteMem;
input  WriteReg;
input sampler_rx;

reg  Branch_expected;
reg [31:0] Cause_expected;
reg [31:0] EPC_expected;
reg [1:0] ForwardA_expected;
reg [1:0] ForwardB_expected;
reg [31:0] HI_expected;
reg [31:0] Instruction_expected;
reg  Jump_expected;
reg [31:0] JumpEX_expected;
reg  Link_expected;
reg [31:0] LO_expected;
reg  MemtoReg_expected;
reg  moveHiLo_expected;
reg [3:0] opALU_expected;
reg  OrigALU_expected;
reg [31:0] PC_expected;
reg [31:0] PC/EX_expected;
reg  ReadMem_expected;
reg [4:0] regDestino_expected;
reg  RegDst_expected;
reg  RegWriteWB_expected;
reg [31:0] saidaMemDados_expected;
reg [31:0] SaidaWB_expected;
reg [4:0] shamt_expected;
reg [31:0] t0_expected;
reg [31:0] t1_expected;
reg [31:0] t2_expected;
reg [31:0] t3_expected;
reg [31:0] t4_expected;
reg [31:0] t5_expected;
reg [31:0] t6_expected;
reg [31:0] ULA_main_expected;
reg [31:0] ValorA_expected;
reg [31:0] ValorB_expected;
reg  WriteMem_expected;
reg  WriteReg_expected;

reg  Branch_prev;
reg [31:0] Cause_prev;
reg [31:0] EPC_prev;
reg [1:0] ForwardA_prev;
reg [1:0] ForwardB_prev;
reg [31:0] HI_prev;
reg [31:0] Instruction_prev;
reg  Jump_prev;
reg [31:0] JumpEX_prev;
reg  Link_prev;
reg [31:0] LO_prev;
reg  MemtoReg_prev;
reg  moveHiLo_prev;
reg [3:0] opALU_prev;
reg  OrigALU_prev;
reg [31:0] PC_prev;
reg [31:0] PC/EX_prev;
reg  ReadMem_prev;
reg [4:0] regDestino_prev;
reg  RegDst_prev;
reg  RegWriteWB_prev;
reg [31:0] saidaMemDados_prev;
reg [31:0] SaidaWB_prev;
reg [4:0] shamt_prev;
reg [31:0] t0_prev;
reg [31:0] t1_prev;
reg [31:0] t2_prev;
reg [31:0] t3_prev;
reg [31:0] t4_prev;
reg [31:0] t5_prev;
reg [31:0] t6_prev;
reg [31:0] ULA_main_prev;
reg [31:0] ValorA_prev;
reg [31:0] ValorB_prev;
reg  WriteMem_prev;
reg  WriteReg_prev;

reg [31:0] Cause_expected_prev;
reg [31:0] EPC_expected_prev;
reg [1:0] ForwardA_expected_prev;
reg [1:0] ForwardB_expected_prev;
reg [31:0] HI_expected_prev;
reg [31:0] Instruction_expected_prev;
reg [31:0] JumpEX_expected_prev;
reg [31:0] LO_expected_prev;
reg [3:0] opALU_expected_prev;
reg [31:0] PC_expected_prev;
reg [31:0] PC/EX_expected_prev;
reg [4:0] regDestino_expected_prev;
reg  RegWriteWB_expected_prev;
reg [31:0] saidaMemDados_expected_prev;
reg [31:0] SaidaWB_expected_prev;
reg [4:0] shamt_expected_prev;
reg [31:0] t0_expected_prev;
reg [31:0] t1_expected_prev;
reg [31:0] t2_expected_prev;
reg [31:0] t3_expected_prev;
reg [31:0] t4_expected_prev;
reg [31:0] t5_expected_prev;
reg [31:0] t6_expected_prev;
reg [31:0] ULA_main_expected_prev;
reg [31:0] ValorA_expected_prev;
reg [31:0] ValorB_expected_prev;

reg [31:0] last_Cause_exp;
reg [31:0] last_EPC_exp;
reg [1:0] last_ForwardA_exp;
reg [1:0] last_ForwardB_exp;
reg [31:0] last_HI_exp;
reg [31:0] last_Instruction_exp;
reg [31:0] last_JumpEX_exp;
reg [31:0] last_LO_exp;
reg [3:0] last_opALU_exp;
reg [31:0] last_PC_exp;
reg [31:0] last_PC/EX_exp;
reg [4:0] last_regDestino_exp;
reg  last_RegWriteWB_exp;
reg [31:0] last_saidaMemDados_exp;
reg [31:0] last_SaidaWB_exp;
reg [4:0] last_shamt_exp;
reg [31:0] last_t0_exp;
reg [31:0] last_t1_exp;
reg [31:0] last_t2_exp;
reg [31:0] last_t3_exp;
reg [31:0] last_t4_exp;
reg [31:0] last_t5_exp;
reg [31:0] last_t6_exp;
reg [31:0] last_ULA_main_exp;
reg [31:0] last_ValorA_exp;
reg [31:0] last_ValorB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:36] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 36'b1;
end

// update real /o prevs

always @(trigger)
begin
	Branch_prev = Branch;
	Cause_prev = Cause;
	EPC_prev = EPC;
	ForwardA_prev = ForwardA;
	ForwardB_prev = ForwardB;
	HI_prev = HI;
	Instruction_prev = Instruction;
	Jump_prev = Jump;
	JumpEX_prev = JumpEX;
	Link_prev = Link;
	LO_prev = LO;
	MemtoReg_prev = MemtoReg;
	moveHiLo_prev = moveHiLo;
	opALU_prev = opALU;
	OrigALU_prev = OrigALU;
	PC_prev = PC;
	PC/EX_prev = PC/EX;
	ReadMem_prev = ReadMem;
	regDestino_prev = regDestino;
	RegDst_prev = RegDst;
	RegWriteWB_prev = RegWriteWB;
	saidaMemDados_prev = saidaMemDados;
	SaidaWB_prev = SaidaWB;
	shamt_prev = shamt;
	t0_prev = t0;
	t1_prev = t1;
	t2_prev = t2;
	t3_prev = t3;
	t4_prev = t4;
	t5_prev = t5;
	t6_prev = t6;
	ULA_main_prev = ULA_main;
	ValorA_prev = ValorA;
	ValorB_prev = ValorB;
	WriteMem_prev = WriteMem;
	WriteReg_prev = WriteReg;
end

// update expected /o prevs

always @(trigger)
begin
	Cause_expected_prev = Cause_expected;
	EPC_expected_prev = EPC_expected;
	ForwardA_expected_prev = ForwardA_expected;
	ForwardB_expected_prev = ForwardB_expected;
	HI_expected_prev = HI_expected;
	Instruction_expected_prev = Instruction_expected;
	JumpEX_expected_prev = JumpEX_expected;
	LO_expected_prev = LO_expected;
	opALU_expected_prev = opALU_expected;
	PC_expected_prev = PC_expected;
	PC/EX_expected_prev = PC/EX_expected;
	regDestino_expected_prev = regDestino_expected;
	RegWriteWB_expected_prev = RegWriteWB_expected;
	saidaMemDados_expected_prev = saidaMemDados_expected;
	SaidaWB_expected_prev = SaidaWB_expected;
	shamt_expected_prev = shamt_expected;
	t0_expected_prev = t0_expected;
	t1_expected_prev = t1_expected;
	t2_expected_prev = t2_expected;
	t3_expected_prev = t3_expected;
	t4_expected_prev = t4_expected;
	t5_expected_prev = t5_expected;
	t6_expected_prev = t6_expected;
	ULA_main_expected_prev = ULA_main_expected;
	ValorA_expected_prev = ValorA_expected;
	ValorB_expected_prev = ValorB_expected;
end


// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'bX;
	PC_expected[31] = #999000 1'b0;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'bX;
	PC_expected[30] = #999000 1'b0;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'bX;
	PC_expected[29] = #999000 1'b0;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'bX;
	PC_expected[28] = #999000 1'b0;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'bX;
	PC_expected[27] = #999000 1'b0;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'bX;
	PC_expected[26] = #999000 1'b0;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
	PC_expected[25] = #999000 1'b0;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
	PC_expected[24] = #999000 1'b0;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
	PC_expected[23] = #999000 1'b0;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
	PC_expected[22] = #999000 1'b0;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
	PC_expected[21] = #999000 1'b0;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
	PC_expected[20] = #999000 1'b0;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
	PC_expected[19] = #999000 1'b0;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
	PC_expected[18] = #999000 1'b0;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
	PC_expected[17] = #999000 1'b0;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
	PC_expected[16] = #999000 1'b0;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
	PC_expected[15] = #999000 1'b0;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
	PC_expected[14] = #999000 1'b0;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
	PC_expected[13] = #999000 1'b0;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
	PC_expected[12] = #999000 1'b0;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
	PC_expected[11] = #999000 1'b0;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
	PC_expected[10] = #999000 1'b0;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
	PC_expected[9] = #999000 1'b0;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
	PC_expected[8] = #999000 1'b0;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
	PC_expected[7] = #999000 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
	PC_expected[6] = #999000 1'b0;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
	PC_expected[5] = #999000 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
	PC_expected[4] = #999000 1'b0;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
	PC_expected[3] = #999000 1'b0;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
	PC_expected[2] = #999000 1'b0;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
	PC_expected[1] = #999000 1'b0;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
	PC_expected[0] = #999000 1'b0;
end 
// expected Instruction[ 31 ]
initial
begin
	Instruction_expected[31] = 1'bX;
	Instruction_expected[31] = #999000 1'b0;
end 
// expected Instruction[ 30 ]
initial
begin
	Instruction_expected[30] = 1'bX;
	Instruction_expected[30] = #999000 1'b0;
end 
// expected Instruction[ 29 ]
initial
begin
	Instruction_expected[29] = 1'bX;
	Instruction_expected[29] = #999000 1'b0;
end 
// expected Instruction[ 28 ]
initial
begin
	Instruction_expected[28] = 1'bX;
	Instruction_expected[28] = #999000 1'b0;
end 
// expected Instruction[ 27 ]
initial
begin
	Instruction_expected[27] = 1'bX;
	Instruction_expected[27] = #999000 1'b0;
end 
// expected Instruction[ 26 ]
initial
begin
	Instruction_expected[26] = 1'bX;
	Instruction_expected[26] = #999000 1'b0;
end 
// expected Instruction[ 25 ]
initial
begin
	Instruction_expected[25] = 1'bX;
	Instruction_expected[25] = #999000 1'b0;
end 
// expected Instruction[ 24 ]
initial
begin
	Instruction_expected[24] = 1'bX;
	Instruction_expected[24] = #999000 1'b0;
end 
// expected Instruction[ 23 ]
initial
begin
	Instruction_expected[23] = 1'bX;
	Instruction_expected[23] = #999000 1'b0;
end 
// expected Instruction[ 22 ]
initial
begin
	Instruction_expected[22] = 1'bX;
	Instruction_expected[22] = #999000 1'b0;
end 
// expected Instruction[ 21 ]
initial
begin
	Instruction_expected[21] = 1'bX;
	Instruction_expected[21] = #999000 1'b0;
end 
// expected Instruction[ 20 ]
initial
begin
	Instruction_expected[20] = 1'bX;
	Instruction_expected[20] = #999000 1'b0;
end 
// expected Instruction[ 19 ]
initial
begin
	Instruction_expected[19] = 1'bX;
	Instruction_expected[19] = #999000 1'b0;
end 
// expected Instruction[ 18 ]
initial
begin
	Instruction_expected[18] = 1'bX;
	Instruction_expected[18] = #999000 1'b0;
end 
// expected Instruction[ 17 ]
initial
begin
	Instruction_expected[17] = 1'bX;
	Instruction_expected[17] = #999000 1'b0;
end 
// expected Instruction[ 16 ]
initial
begin
	Instruction_expected[16] = 1'bX;
	Instruction_expected[16] = #999000 1'b0;
end 
// expected Instruction[ 15 ]
initial
begin
	Instruction_expected[15] = 1'bX;
	Instruction_expected[15] = #999000 1'b0;
end 
// expected Instruction[ 14 ]
initial
begin
	Instruction_expected[14] = 1'bX;
	Instruction_expected[14] = #999000 1'b0;
end 
// expected Instruction[ 13 ]
initial
begin
	Instruction_expected[13] = 1'bX;
	Instruction_expected[13] = #999000 1'b0;
end 
// expected Instruction[ 12 ]
initial
begin
	Instruction_expected[12] = 1'bX;
	Instruction_expected[12] = #999000 1'b0;
end 
// expected Instruction[ 11 ]
initial
begin
	Instruction_expected[11] = 1'bX;
	Instruction_expected[11] = #999000 1'b0;
end 
// expected Instruction[ 10 ]
initial
begin
	Instruction_expected[10] = 1'bX;
	Instruction_expected[10] = #999000 1'b0;
end 
// expected Instruction[ 9 ]
initial
begin
	Instruction_expected[9] = 1'bX;
	Instruction_expected[9] = #999000 1'b0;
end 
// expected Instruction[ 8 ]
initial
begin
	Instruction_expected[8] = 1'bX;
	Instruction_expected[8] = #999000 1'b0;
end 
// expected Instruction[ 7 ]
initial
begin
	Instruction_expected[7] = 1'bX;
	Instruction_expected[7] = #999000 1'b0;
end 
// expected Instruction[ 6 ]
initial
begin
	Instruction_expected[6] = 1'bX;
	Instruction_expected[6] = #999000 1'b0;
end 
// expected Instruction[ 5 ]
initial
begin
	Instruction_expected[5] = 1'bX;
	Instruction_expected[5] = #999000 1'b0;
end 
// expected Instruction[ 4 ]
initial
begin
	Instruction_expected[4] = 1'bX;
	Instruction_expected[4] = #999000 1'b0;
end 
// expected Instruction[ 3 ]
initial
begin
	Instruction_expected[3] = 1'bX;
	Instruction_expected[3] = #999000 1'b0;
end 
// expected Instruction[ 2 ]
initial
begin
	Instruction_expected[2] = 1'bX;
	Instruction_expected[2] = #999000 1'b0;
end 
// expected Instruction[ 1 ]
initial
begin
	Instruction_expected[1] = 1'bX;
	Instruction_expected[1] = #999000 1'b0;
end 
// expected Instruction[ 0 ]
initial
begin
	Instruction_expected[0] = 1'bX;
	Instruction_expected[0] = #999000 1'b0;
end 
// expected JumpEX[ 31 ]
initial
begin
	JumpEX_expected[31] = 1'bX;
end 
// expected JumpEX[ 30 ]
initial
begin
	JumpEX_expected[30] = 1'bX;
end 
// expected JumpEX[ 29 ]
initial
begin
	JumpEX_expected[29] = 1'bX;
end 
// expected JumpEX[ 28 ]
initial
begin
	JumpEX_expected[28] = 1'bX;
end 
// expected JumpEX[ 27 ]
initial
begin
	JumpEX_expected[27] = 1'bX;
end 
// expected JumpEX[ 26 ]
initial
begin
	JumpEX_expected[26] = 1'bX;
end 
// expected JumpEX[ 25 ]
initial
begin
	JumpEX_expected[25] = 1'bX;
end 
// expected JumpEX[ 24 ]
initial
begin
	JumpEX_expected[24] = 1'bX;
end 
// expected JumpEX[ 23 ]
initial
begin
	JumpEX_expected[23] = 1'bX;
end 
// expected JumpEX[ 22 ]
initial
begin
	JumpEX_expected[22] = 1'bX;
end 
// expected JumpEX[ 21 ]
initial
begin
	JumpEX_expected[21] = 1'bX;
end 
// expected JumpEX[ 20 ]
initial
begin
	JumpEX_expected[20] = 1'bX;
end 
// expected JumpEX[ 19 ]
initial
begin
	JumpEX_expected[19] = 1'bX;
end 
// expected JumpEX[ 18 ]
initial
begin
	JumpEX_expected[18] = 1'bX;
end 
// expected JumpEX[ 17 ]
initial
begin
	JumpEX_expected[17] = 1'bX;
end 
// expected JumpEX[ 16 ]
initial
begin
	JumpEX_expected[16] = 1'bX;
end 
// expected JumpEX[ 15 ]
initial
begin
	JumpEX_expected[15] = 1'bX;
end 
// expected JumpEX[ 14 ]
initial
begin
	JumpEX_expected[14] = 1'bX;
end 
// expected JumpEX[ 13 ]
initial
begin
	JumpEX_expected[13] = 1'bX;
end 
// expected JumpEX[ 12 ]
initial
begin
	JumpEX_expected[12] = 1'bX;
end 
// expected JumpEX[ 11 ]
initial
begin
	JumpEX_expected[11] = 1'bX;
end 
// expected JumpEX[ 10 ]
initial
begin
	JumpEX_expected[10] = 1'bX;
end 
// expected JumpEX[ 9 ]
initial
begin
	JumpEX_expected[9] = 1'bX;
end 
// expected JumpEX[ 8 ]
initial
begin
	JumpEX_expected[8] = 1'bX;
end 
// expected JumpEX[ 7 ]
initial
begin
	JumpEX_expected[7] = 1'bX;
end 
// expected JumpEX[ 6 ]
initial
begin
	JumpEX_expected[6] = 1'bX;
end 
// expected JumpEX[ 5 ]
initial
begin
	JumpEX_expected[5] = 1'bX;
end 
// expected JumpEX[ 4 ]
initial
begin
	JumpEX_expected[4] = 1'bX;
end 
// expected JumpEX[ 3 ]
initial
begin
	JumpEX_expected[3] = 1'bX;
end 
// expected JumpEX[ 2 ]
initial
begin
	JumpEX_expected[2] = 1'bX;
end 
// expected JumpEX[ 1 ]
initial
begin
	JumpEX_expected[1] = 1'bX;
end 
// expected JumpEX[ 0 ]
initial
begin
	JumpEX_expected[0] = 1'bX;
end 
// expected \PC/EX [ 31 ]
initial
begin
	PC/EX_expected[31] = 1'bX;
end 
// expected \PC/EX [ 30 ]
initial
begin
	PC/EX_expected[30] = 1'bX;
end 
// expected \PC/EX [ 29 ]
initial
begin
	PC/EX_expected[29] = 1'bX;
end 
// expected \PC/EX [ 28 ]
initial
begin
	PC/EX_expected[28] = 1'bX;
end 
// expected \PC/EX [ 27 ]
initial
begin
	PC/EX_expected[27] = 1'bX;
end 
// expected \PC/EX [ 26 ]
initial
begin
	PC/EX_expected[26] = 1'bX;
end 
// expected \PC/EX [ 25 ]
initial
begin
	PC/EX_expected[25] = 1'bX;
end 
// expected \PC/EX [ 24 ]
initial
begin
	PC/EX_expected[24] = 1'bX;
end 
// expected \PC/EX [ 23 ]
initial
begin
	PC/EX_expected[23] = 1'bX;
end 
// expected \PC/EX [ 22 ]
initial
begin
	PC/EX_expected[22] = 1'bX;
end 
// expected \PC/EX [ 21 ]
initial
begin
	PC/EX_expected[21] = 1'bX;
end 
// expected \PC/EX [ 20 ]
initial
begin
	PC/EX_expected[20] = 1'bX;
end 
// expected \PC/EX [ 19 ]
initial
begin
	PC/EX_expected[19] = 1'bX;
end 
// expected \PC/EX [ 18 ]
initial
begin
	PC/EX_expected[18] = 1'bX;
end 
// expected \PC/EX [ 17 ]
initial
begin
	PC/EX_expected[17] = 1'bX;
end 
// expected \PC/EX [ 16 ]
initial
begin
	PC/EX_expected[16] = 1'bX;
end 
// expected \PC/EX [ 15 ]
initial
begin
	PC/EX_expected[15] = 1'bX;
end 
// expected \PC/EX [ 14 ]
initial
begin
	PC/EX_expected[14] = 1'bX;
end 
// expected \PC/EX [ 13 ]
initial
begin
	PC/EX_expected[13] = 1'bX;
end 
// expected \PC/EX [ 12 ]
initial
begin
	PC/EX_expected[12] = 1'bX;
end 
// expected \PC/EX [ 11 ]
initial
begin
	PC/EX_expected[11] = 1'bX;
end 
// expected \PC/EX [ 10 ]
initial
begin
	PC/EX_expected[10] = 1'bX;
end 
// expected \PC/EX [ 9 ]
initial
begin
	PC/EX_expected[9] = 1'bX;
end 
// expected \PC/EX [ 8 ]
initial
begin
	PC/EX_expected[8] = 1'bX;
end 
// expected \PC/EX [ 7 ]
initial
begin
	PC/EX_expected[7] = 1'bX;
end 
// expected \PC/EX [ 6 ]
initial
begin
	PC/EX_expected[6] = 1'bX;
end 
// expected \PC/EX [ 5 ]
initial
begin
	PC/EX_expected[5] = 1'bX;
end 
// expected \PC/EX [ 4 ]
initial
begin
	PC/EX_expected[4] = 1'bX;
end 
// expected \PC/EX [ 3 ]
initial
begin
	PC/EX_expected[3] = 1'bX;
end 
// expected \PC/EX [ 2 ]
initial
begin
	PC/EX_expected[2] = 1'bX;
end 
// expected \PC/EX [ 1 ]
initial
begin
	PC/EX_expected[1] = 1'bX;
end 
// expected \PC/EX [ 0 ]
initial
begin
	PC/EX_expected[0] = 1'bX;
end 
// expected opALU[ 3 ]
initial
begin
	opALU_expected[3] = 1'bX;
	opALU_expected[3] = #999000 1'b0;
end 
// expected opALU[ 2 ]
initial
begin
	opALU_expected[2] = 1'bX;
	opALU_expected[2] = #999000 1'b0;
end 
// expected opALU[ 1 ]
initial
begin
	opALU_expected[1] = 1'bX;
	opALU_expected[1] = #999000 1'b0;
end 
// expected opALU[ 0 ]
initial
begin
	opALU_expected[0] = 1'bX;
	opALU_expected[0] = #999000 1'b0;
end 
// expected ValorA[ 31 ]
initial
begin
	ValorA_expected[31] = 1'bX;
end 
// expected ValorA[ 30 ]
initial
begin
	ValorA_expected[30] = 1'bX;
end 
// expected ValorA[ 29 ]
initial
begin
	ValorA_expected[29] = 1'bX;
end 
// expected ValorA[ 28 ]
initial
begin
	ValorA_expected[28] = 1'bX;
end 
// expected ValorA[ 27 ]
initial
begin
	ValorA_expected[27] = 1'bX;
end 
// expected ValorA[ 26 ]
initial
begin
	ValorA_expected[26] = 1'bX;
end 
// expected ValorA[ 25 ]
initial
begin
	ValorA_expected[25] = 1'bX;
end 
// expected ValorA[ 24 ]
initial
begin
	ValorA_expected[24] = 1'bX;
end 
// expected ValorA[ 23 ]
initial
begin
	ValorA_expected[23] = 1'bX;
end 
// expected ValorA[ 22 ]
initial
begin
	ValorA_expected[22] = 1'bX;
end 
// expected ValorA[ 21 ]
initial
begin
	ValorA_expected[21] = 1'bX;
end 
// expected ValorA[ 20 ]
initial
begin
	ValorA_expected[20] = 1'bX;
end 
// expected ValorA[ 19 ]
initial
begin
	ValorA_expected[19] = 1'bX;
end 
// expected ValorA[ 18 ]
initial
begin
	ValorA_expected[18] = 1'bX;
end 
// expected ValorA[ 17 ]
initial
begin
	ValorA_expected[17] = 1'bX;
end 
// expected ValorA[ 16 ]
initial
begin
	ValorA_expected[16] = 1'bX;
end 
// expected ValorA[ 15 ]
initial
begin
	ValorA_expected[15] = 1'bX;
end 
// expected ValorA[ 14 ]
initial
begin
	ValorA_expected[14] = 1'bX;
end 
// expected ValorA[ 13 ]
initial
begin
	ValorA_expected[13] = 1'bX;
end 
// expected ValorA[ 12 ]
initial
begin
	ValorA_expected[12] = 1'bX;
end 
// expected ValorA[ 11 ]
initial
begin
	ValorA_expected[11] = 1'bX;
end 
// expected ValorA[ 10 ]
initial
begin
	ValorA_expected[10] = 1'bX;
end 
// expected ValorA[ 9 ]
initial
begin
	ValorA_expected[9] = 1'bX;
end 
// expected ValorA[ 8 ]
initial
begin
	ValorA_expected[8] = 1'bX;
end 
// expected ValorA[ 7 ]
initial
begin
	ValorA_expected[7] = 1'bX;
end 
// expected ValorA[ 6 ]
initial
begin
	ValorA_expected[6] = 1'bX;
end 
// expected ValorA[ 5 ]
initial
begin
	ValorA_expected[5] = 1'bX;
end 
// expected ValorA[ 4 ]
initial
begin
	ValorA_expected[4] = 1'bX;
end 
// expected ValorA[ 3 ]
initial
begin
	ValorA_expected[3] = 1'bX;
end 
// expected ValorA[ 2 ]
initial
begin
	ValorA_expected[2] = 1'bX;
end 
// expected ValorA[ 1 ]
initial
begin
	ValorA_expected[1] = 1'bX;
end 
// expected ValorA[ 0 ]
initial
begin
	ValorA_expected[0] = 1'bX;
end 
// expected ValorB[ 31 ]
initial
begin
	ValorB_expected[31] = 1'bX;
end 
// expected ValorB[ 30 ]
initial
begin
	ValorB_expected[30] = 1'bX;
end 
// expected ValorB[ 29 ]
initial
begin
	ValorB_expected[29] = 1'bX;
end 
// expected ValorB[ 28 ]
initial
begin
	ValorB_expected[28] = 1'bX;
end 
// expected ValorB[ 27 ]
initial
begin
	ValorB_expected[27] = 1'bX;
end 
// expected ValorB[ 26 ]
initial
begin
	ValorB_expected[26] = 1'bX;
end 
// expected ValorB[ 25 ]
initial
begin
	ValorB_expected[25] = 1'bX;
end 
// expected ValorB[ 24 ]
initial
begin
	ValorB_expected[24] = 1'bX;
end 
// expected ValorB[ 23 ]
initial
begin
	ValorB_expected[23] = 1'bX;
end 
// expected ValorB[ 22 ]
initial
begin
	ValorB_expected[22] = 1'bX;
end 
// expected ValorB[ 21 ]
initial
begin
	ValorB_expected[21] = 1'bX;
end 
// expected ValorB[ 20 ]
initial
begin
	ValorB_expected[20] = 1'bX;
end 
// expected ValorB[ 19 ]
initial
begin
	ValorB_expected[19] = 1'bX;
end 
// expected ValorB[ 18 ]
initial
begin
	ValorB_expected[18] = 1'bX;
end 
// expected ValorB[ 17 ]
initial
begin
	ValorB_expected[17] = 1'bX;
end 
// expected ValorB[ 16 ]
initial
begin
	ValorB_expected[16] = 1'bX;
end 
// expected ValorB[ 15 ]
initial
begin
	ValorB_expected[15] = 1'bX;
end 
// expected ValorB[ 14 ]
initial
begin
	ValorB_expected[14] = 1'bX;
end 
// expected ValorB[ 13 ]
initial
begin
	ValorB_expected[13] = 1'bX;
end 
// expected ValorB[ 12 ]
initial
begin
	ValorB_expected[12] = 1'bX;
end 
// expected ValorB[ 11 ]
initial
begin
	ValorB_expected[11] = 1'bX;
end 
// expected ValorB[ 10 ]
initial
begin
	ValorB_expected[10] = 1'bX;
end 
// expected ValorB[ 9 ]
initial
begin
	ValorB_expected[9] = 1'bX;
end 
// expected ValorB[ 8 ]
initial
begin
	ValorB_expected[8] = 1'bX;
end 
// expected ValorB[ 7 ]
initial
begin
	ValorB_expected[7] = 1'bX;
end 
// expected ValorB[ 6 ]
initial
begin
	ValorB_expected[6] = 1'bX;
end 
// expected ValorB[ 5 ]
initial
begin
	ValorB_expected[5] = 1'bX;
end 
// expected ValorB[ 4 ]
initial
begin
	ValorB_expected[4] = 1'bX;
end 
// expected ValorB[ 3 ]
initial
begin
	ValorB_expected[3] = 1'bX;
end 
// expected ValorB[ 2 ]
initial
begin
	ValorB_expected[2] = 1'bX;
end 
// expected ValorB[ 1 ]
initial
begin
	ValorB_expected[1] = 1'bX;
end 
// expected ValorB[ 0 ]
initial
begin
	ValorB_expected[0] = 1'bX;
end 
// expected ForwardA[ 1 ]
initial
begin
	ForwardA_expected[1] = 1'bX;
end 
// expected ForwardA[ 0 ]
initial
begin
	ForwardA_expected[0] = 1'bX;
end 
// expected ForwardB[ 1 ]
initial
begin
	ForwardB_expected[1] = 1'bX;
end 
// expected ForwardB[ 0 ]
initial
begin
	ForwardB_expected[0] = 1'bX;
end 
// expected shamt[ 4 ]
initial
begin
	shamt_expected[4] = 1'bX;
end 
// expected shamt[ 3 ]
initial
begin
	shamt_expected[3] = 1'bX;
end 
// expected shamt[ 2 ]
initial
begin
	shamt_expected[2] = 1'bX;
end 
// expected shamt[ 1 ]
initial
begin
	shamt_expected[1] = 1'bX;
end 
// expected shamt[ 0 ]
initial
begin
	shamt_expected[0] = 1'bX;
end 
// expected ULA_main[ 31 ]
initial
begin
	ULA_main_expected[31] = 1'bX;
	ULA_main_expected[31] = #999000 1'b0;
end 
// expected ULA_main[ 30 ]
initial
begin
	ULA_main_expected[30] = 1'bX;
	ULA_main_expected[30] = #999000 1'b0;
end 
// expected ULA_main[ 29 ]
initial
begin
	ULA_main_expected[29] = 1'bX;
	ULA_main_expected[29] = #999000 1'b0;
end 
// expected ULA_main[ 28 ]
initial
begin
	ULA_main_expected[28] = 1'bX;
	ULA_main_expected[28] = #999000 1'b0;
end 
// expected ULA_main[ 27 ]
initial
begin
	ULA_main_expected[27] = 1'bX;
	ULA_main_expected[27] = #999000 1'b0;
end 
// expected ULA_main[ 26 ]
initial
begin
	ULA_main_expected[26] = 1'bX;
	ULA_main_expected[26] = #999000 1'b0;
end 
// expected ULA_main[ 25 ]
initial
begin
	ULA_main_expected[25] = 1'bX;
	ULA_main_expected[25] = #999000 1'b0;
end 
// expected ULA_main[ 24 ]
initial
begin
	ULA_main_expected[24] = 1'bX;
	ULA_main_expected[24] = #999000 1'b0;
end 
// expected ULA_main[ 23 ]
initial
begin
	ULA_main_expected[23] = 1'bX;
	ULA_main_expected[23] = #999000 1'b0;
end 
// expected ULA_main[ 22 ]
initial
begin
	ULA_main_expected[22] = 1'bX;
	ULA_main_expected[22] = #999000 1'b0;
end 
// expected ULA_main[ 21 ]
initial
begin
	ULA_main_expected[21] = 1'bX;
	ULA_main_expected[21] = #999000 1'b0;
end 
// expected ULA_main[ 20 ]
initial
begin
	ULA_main_expected[20] = 1'bX;
	ULA_main_expected[20] = #999000 1'b0;
end 
// expected ULA_main[ 19 ]
initial
begin
	ULA_main_expected[19] = 1'bX;
	ULA_main_expected[19] = #999000 1'b0;
end 
// expected ULA_main[ 18 ]
initial
begin
	ULA_main_expected[18] = 1'bX;
	ULA_main_expected[18] = #999000 1'b0;
end 
// expected ULA_main[ 17 ]
initial
begin
	ULA_main_expected[17] = 1'bX;
	ULA_main_expected[17] = #999000 1'b0;
end 
// expected ULA_main[ 16 ]
initial
begin
	ULA_main_expected[16] = 1'bX;
	ULA_main_expected[16] = #999000 1'b0;
end 
// expected ULA_main[ 15 ]
initial
begin
	ULA_main_expected[15] = 1'bX;
	ULA_main_expected[15] = #999000 1'b0;
end 
// expected ULA_main[ 14 ]
initial
begin
	ULA_main_expected[14] = 1'bX;
	ULA_main_expected[14] = #999000 1'b0;
end 
// expected ULA_main[ 13 ]
initial
begin
	ULA_main_expected[13] = 1'bX;
	ULA_main_expected[13] = #999000 1'b0;
end 
// expected ULA_main[ 12 ]
initial
begin
	ULA_main_expected[12] = 1'bX;
	ULA_main_expected[12] = #999000 1'b0;
end 
// expected ULA_main[ 11 ]
initial
begin
	ULA_main_expected[11] = 1'bX;
	ULA_main_expected[11] = #999000 1'b0;
end 
// expected ULA_main[ 10 ]
initial
begin
	ULA_main_expected[10] = 1'bX;
	ULA_main_expected[10] = #999000 1'b0;
end 
// expected ULA_main[ 9 ]
initial
begin
	ULA_main_expected[9] = 1'bX;
	ULA_main_expected[9] = #999000 1'b0;
end 
// expected ULA_main[ 8 ]
initial
begin
	ULA_main_expected[8] = 1'bX;
	ULA_main_expected[8] = #999000 1'b0;
end 
// expected ULA_main[ 7 ]
initial
begin
	ULA_main_expected[7] = 1'bX;
	ULA_main_expected[7] = #999000 1'b0;
end 
// expected ULA_main[ 6 ]
initial
begin
	ULA_main_expected[6] = 1'bX;
	ULA_main_expected[6] = #999000 1'b0;
end 
// expected ULA_main[ 5 ]
initial
begin
	ULA_main_expected[5] = 1'bX;
	ULA_main_expected[5] = #999000 1'b0;
end 
// expected ULA_main[ 4 ]
initial
begin
	ULA_main_expected[4] = 1'bX;
	ULA_main_expected[4] = #999000 1'b0;
end 
// expected ULA_main[ 3 ]
initial
begin
	ULA_main_expected[3] = 1'bX;
	ULA_main_expected[3] = #999000 1'b0;
end 
// expected ULA_main[ 2 ]
initial
begin
	ULA_main_expected[2] = 1'bX;
	ULA_main_expected[2] = #999000 1'b0;
end 
// expected ULA_main[ 1 ]
initial
begin
	ULA_main_expected[1] = 1'bX;
	ULA_main_expected[1] = #999000 1'b0;
end 
// expected ULA_main[ 0 ]
initial
begin
	ULA_main_expected[0] = 1'bX;
	ULA_main_expected[0] = #999000 1'b0;
end 
// expected HI[ 31 ]
initial
begin
	HI_expected[31] = 1'bX;
end 
// expected HI[ 30 ]
initial
begin
	HI_expected[30] = 1'bX;
end 
// expected HI[ 29 ]
initial
begin
	HI_expected[29] = 1'bX;
end 
// expected HI[ 28 ]
initial
begin
	HI_expected[28] = 1'bX;
end 
// expected HI[ 27 ]
initial
begin
	HI_expected[27] = 1'bX;
end 
// expected HI[ 26 ]
initial
begin
	HI_expected[26] = 1'bX;
end 
// expected HI[ 25 ]
initial
begin
	HI_expected[25] = 1'bX;
end 
// expected HI[ 24 ]
initial
begin
	HI_expected[24] = 1'bX;
end 
// expected HI[ 23 ]
initial
begin
	HI_expected[23] = 1'bX;
end 
// expected HI[ 22 ]
initial
begin
	HI_expected[22] = 1'bX;
end 
// expected HI[ 21 ]
initial
begin
	HI_expected[21] = 1'bX;
end 
// expected HI[ 20 ]
initial
begin
	HI_expected[20] = 1'bX;
end 
// expected HI[ 19 ]
initial
begin
	HI_expected[19] = 1'bX;
end 
// expected HI[ 18 ]
initial
begin
	HI_expected[18] = 1'bX;
end 
// expected HI[ 17 ]
initial
begin
	HI_expected[17] = 1'bX;
end 
// expected HI[ 16 ]
initial
begin
	HI_expected[16] = 1'bX;
end 
// expected HI[ 15 ]
initial
begin
	HI_expected[15] = 1'bX;
end 
// expected HI[ 14 ]
initial
begin
	HI_expected[14] = 1'bX;
end 
// expected HI[ 13 ]
initial
begin
	HI_expected[13] = 1'bX;
end 
// expected HI[ 12 ]
initial
begin
	HI_expected[12] = 1'bX;
end 
// expected HI[ 11 ]
initial
begin
	HI_expected[11] = 1'bX;
end 
// expected HI[ 10 ]
initial
begin
	HI_expected[10] = 1'bX;
end 
// expected HI[ 9 ]
initial
begin
	HI_expected[9] = 1'bX;
end 
// expected HI[ 8 ]
initial
begin
	HI_expected[8] = 1'bX;
end 
// expected HI[ 7 ]
initial
begin
	HI_expected[7] = 1'bX;
end 
// expected HI[ 6 ]
initial
begin
	HI_expected[6] = 1'bX;
end 
// expected HI[ 5 ]
initial
begin
	HI_expected[5] = 1'bX;
end 
// expected HI[ 4 ]
initial
begin
	HI_expected[4] = 1'bX;
end 
// expected HI[ 3 ]
initial
begin
	HI_expected[3] = 1'bX;
end 
// expected HI[ 2 ]
initial
begin
	HI_expected[2] = 1'bX;
end 
// expected HI[ 1 ]
initial
begin
	HI_expected[1] = 1'bX;
end 
// expected HI[ 0 ]
initial
begin
	HI_expected[0] = 1'bX;
end 
// expected LO[ 31 ]
initial
begin
	LO_expected[31] = 1'bX;
end 
// expected LO[ 30 ]
initial
begin
	LO_expected[30] = 1'bX;
end 
// expected LO[ 29 ]
initial
begin
	LO_expected[29] = 1'bX;
end 
// expected LO[ 28 ]
initial
begin
	LO_expected[28] = 1'bX;
end 
// expected LO[ 27 ]
initial
begin
	LO_expected[27] = 1'bX;
end 
// expected LO[ 26 ]
initial
begin
	LO_expected[26] = 1'bX;
end 
// expected LO[ 25 ]
initial
begin
	LO_expected[25] = 1'bX;
end 
// expected LO[ 24 ]
initial
begin
	LO_expected[24] = 1'bX;
end 
// expected LO[ 23 ]
initial
begin
	LO_expected[23] = 1'bX;
end 
// expected LO[ 22 ]
initial
begin
	LO_expected[22] = 1'bX;
end 
// expected LO[ 21 ]
initial
begin
	LO_expected[21] = 1'bX;
end 
// expected LO[ 20 ]
initial
begin
	LO_expected[20] = 1'bX;
end 
// expected LO[ 19 ]
initial
begin
	LO_expected[19] = 1'bX;
end 
// expected LO[ 18 ]
initial
begin
	LO_expected[18] = 1'bX;
end 
// expected LO[ 17 ]
initial
begin
	LO_expected[17] = 1'bX;
end 
// expected LO[ 16 ]
initial
begin
	LO_expected[16] = 1'bX;
end 
// expected LO[ 15 ]
initial
begin
	LO_expected[15] = 1'bX;
end 
// expected LO[ 14 ]
initial
begin
	LO_expected[14] = 1'bX;
end 
// expected LO[ 13 ]
initial
begin
	LO_expected[13] = 1'bX;
end 
// expected LO[ 12 ]
initial
begin
	LO_expected[12] = 1'bX;
end 
// expected LO[ 11 ]
initial
begin
	LO_expected[11] = 1'bX;
end 
// expected LO[ 10 ]
initial
begin
	LO_expected[10] = 1'bX;
end 
// expected LO[ 9 ]
initial
begin
	LO_expected[9] = 1'bX;
end 
// expected LO[ 8 ]
initial
begin
	LO_expected[8] = 1'bX;
end 
// expected LO[ 7 ]
initial
begin
	LO_expected[7] = 1'bX;
end 
// expected LO[ 6 ]
initial
begin
	LO_expected[6] = 1'bX;
end 
// expected LO[ 5 ]
initial
begin
	LO_expected[5] = 1'bX;
end 
// expected LO[ 4 ]
initial
begin
	LO_expected[4] = 1'bX;
end 
// expected LO[ 3 ]
initial
begin
	LO_expected[3] = 1'bX;
end 
// expected LO[ 2 ]
initial
begin
	LO_expected[2] = 1'bX;
end 
// expected LO[ 1 ]
initial
begin
	LO_expected[1] = 1'bX;
end 
// expected LO[ 0 ]
initial
begin
	LO_expected[0] = 1'bX;
end 
// expected saidaMemDados[ 31 ]
initial
begin
	saidaMemDados_expected[31] = 1'bX;
end 
// expected saidaMemDados[ 30 ]
initial
begin
	saidaMemDados_expected[30] = 1'bX;
end 
// expected saidaMemDados[ 29 ]
initial
begin
	saidaMemDados_expected[29] = 1'bX;
end 
// expected saidaMemDados[ 28 ]
initial
begin
	saidaMemDados_expected[28] = 1'bX;
end 
// expected saidaMemDados[ 27 ]
initial
begin
	saidaMemDados_expected[27] = 1'bX;
end 
// expected saidaMemDados[ 26 ]
initial
begin
	saidaMemDados_expected[26] = 1'bX;
end 
// expected saidaMemDados[ 25 ]
initial
begin
	saidaMemDados_expected[25] = 1'bX;
end 
// expected saidaMemDados[ 24 ]
initial
begin
	saidaMemDados_expected[24] = 1'bX;
end 
// expected saidaMemDados[ 23 ]
initial
begin
	saidaMemDados_expected[23] = 1'bX;
end 
// expected saidaMemDados[ 22 ]
initial
begin
	saidaMemDados_expected[22] = 1'bX;
end 
// expected saidaMemDados[ 21 ]
initial
begin
	saidaMemDados_expected[21] = 1'bX;
end 
// expected saidaMemDados[ 20 ]
initial
begin
	saidaMemDados_expected[20] = 1'bX;
end 
// expected saidaMemDados[ 19 ]
initial
begin
	saidaMemDados_expected[19] = 1'bX;
end 
// expected saidaMemDados[ 18 ]
initial
begin
	saidaMemDados_expected[18] = 1'bX;
end 
// expected saidaMemDados[ 17 ]
initial
begin
	saidaMemDados_expected[17] = 1'bX;
end 
// expected saidaMemDados[ 16 ]
initial
begin
	saidaMemDados_expected[16] = 1'bX;
end 
// expected saidaMemDados[ 15 ]
initial
begin
	saidaMemDados_expected[15] = 1'bX;
end 
// expected saidaMemDados[ 14 ]
initial
begin
	saidaMemDados_expected[14] = 1'bX;
end 
// expected saidaMemDados[ 13 ]
initial
begin
	saidaMemDados_expected[13] = 1'bX;
end 
// expected saidaMemDados[ 12 ]
initial
begin
	saidaMemDados_expected[12] = 1'bX;
end 
// expected saidaMemDados[ 11 ]
initial
begin
	saidaMemDados_expected[11] = 1'bX;
end 
// expected saidaMemDados[ 10 ]
initial
begin
	saidaMemDados_expected[10] = 1'bX;
end 
// expected saidaMemDados[ 9 ]
initial
begin
	saidaMemDados_expected[9] = 1'bX;
end 
// expected saidaMemDados[ 8 ]
initial
begin
	saidaMemDados_expected[8] = 1'bX;
end 
// expected saidaMemDados[ 7 ]
initial
begin
	saidaMemDados_expected[7] = 1'bX;
end 
// expected saidaMemDados[ 6 ]
initial
begin
	saidaMemDados_expected[6] = 1'bX;
end 
// expected saidaMemDados[ 5 ]
initial
begin
	saidaMemDados_expected[5] = 1'bX;
end 
// expected saidaMemDados[ 4 ]
initial
begin
	saidaMemDados_expected[4] = 1'bX;
end 
// expected saidaMemDados[ 3 ]
initial
begin
	saidaMemDados_expected[3] = 1'bX;
end 
// expected saidaMemDados[ 2 ]
initial
begin
	saidaMemDados_expected[2] = 1'bX;
end 
// expected saidaMemDados[ 1 ]
initial
begin
	saidaMemDados_expected[1] = 1'bX;
end 
// expected saidaMemDados[ 0 ]
initial
begin
	saidaMemDados_expected[0] = 1'bX;
end 
// expected SaidaWB[ 31 ]
initial
begin
	SaidaWB_expected[31] = 1'bX;
	SaidaWB_expected[31] = #999000 1'b0;
end 
// expected SaidaWB[ 30 ]
initial
begin
	SaidaWB_expected[30] = 1'bX;
	SaidaWB_expected[30] = #999000 1'b0;
end 
// expected SaidaWB[ 29 ]
initial
begin
	SaidaWB_expected[29] = 1'bX;
	SaidaWB_expected[29] = #999000 1'b0;
end 
// expected SaidaWB[ 28 ]
initial
begin
	SaidaWB_expected[28] = 1'bX;
	SaidaWB_expected[28] = #999000 1'b0;
end 
// expected SaidaWB[ 27 ]
initial
begin
	SaidaWB_expected[27] = 1'bX;
	SaidaWB_expected[27] = #999000 1'b0;
end 
// expected SaidaWB[ 26 ]
initial
begin
	SaidaWB_expected[26] = 1'bX;
	SaidaWB_expected[26] = #999000 1'b0;
end 
// expected SaidaWB[ 25 ]
initial
begin
	SaidaWB_expected[25] = 1'bX;
	SaidaWB_expected[25] = #999000 1'b0;
end 
// expected SaidaWB[ 24 ]
initial
begin
	SaidaWB_expected[24] = 1'bX;
	SaidaWB_expected[24] = #999000 1'b0;
end 
// expected SaidaWB[ 23 ]
initial
begin
	SaidaWB_expected[23] = 1'bX;
	SaidaWB_expected[23] = #999000 1'b0;
end 
// expected SaidaWB[ 22 ]
initial
begin
	SaidaWB_expected[22] = 1'bX;
	SaidaWB_expected[22] = #999000 1'b0;
end 
// expected SaidaWB[ 21 ]
initial
begin
	SaidaWB_expected[21] = 1'bX;
	SaidaWB_expected[21] = #999000 1'b0;
end 
// expected SaidaWB[ 20 ]
initial
begin
	SaidaWB_expected[20] = 1'bX;
	SaidaWB_expected[20] = #999000 1'b0;
end 
// expected SaidaWB[ 19 ]
initial
begin
	SaidaWB_expected[19] = 1'bX;
	SaidaWB_expected[19] = #999000 1'b0;
end 
// expected SaidaWB[ 18 ]
initial
begin
	SaidaWB_expected[18] = 1'bX;
	SaidaWB_expected[18] = #999000 1'b0;
end 
// expected SaidaWB[ 17 ]
initial
begin
	SaidaWB_expected[17] = 1'bX;
	SaidaWB_expected[17] = #999000 1'b0;
end 
// expected SaidaWB[ 16 ]
initial
begin
	SaidaWB_expected[16] = 1'bX;
	SaidaWB_expected[16] = #999000 1'b0;
end 
// expected SaidaWB[ 15 ]
initial
begin
	SaidaWB_expected[15] = 1'bX;
	SaidaWB_expected[15] = #999000 1'b0;
end 
// expected SaidaWB[ 14 ]
initial
begin
	SaidaWB_expected[14] = 1'bX;
	SaidaWB_expected[14] = #999000 1'b0;
end 
// expected SaidaWB[ 13 ]
initial
begin
	SaidaWB_expected[13] = 1'bX;
	SaidaWB_expected[13] = #999000 1'b0;
end 
// expected SaidaWB[ 12 ]
initial
begin
	SaidaWB_expected[12] = 1'bX;
	SaidaWB_expected[12] = #999000 1'b0;
end 
// expected SaidaWB[ 11 ]
initial
begin
	SaidaWB_expected[11] = 1'bX;
	SaidaWB_expected[11] = #999000 1'b0;
end 
// expected SaidaWB[ 10 ]
initial
begin
	SaidaWB_expected[10] = 1'bX;
	SaidaWB_expected[10] = #999000 1'b0;
end 
// expected SaidaWB[ 9 ]
initial
begin
	SaidaWB_expected[9] = 1'bX;
	SaidaWB_expected[9] = #999000 1'b0;
end 
// expected SaidaWB[ 8 ]
initial
begin
	SaidaWB_expected[8] = 1'bX;
	SaidaWB_expected[8] = #999000 1'b0;
end 
// expected SaidaWB[ 7 ]
initial
begin
	SaidaWB_expected[7] = 1'bX;
	SaidaWB_expected[7] = #999000 1'b0;
end 
// expected SaidaWB[ 6 ]
initial
begin
	SaidaWB_expected[6] = 1'bX;
	SaidaWB_expected[6] = #999000 1'b0;
end 
// expected SaidaWB[ 5 ]
initial
begin
	SaidaWB_expected[5] = 1'bX;
	SaidaWB_expected[5] = #999000 1'b0;
end 
// expected SaidaWB[ 4 ]
initial
begin
	SaidaWB_expected[4] = 1'bX;
	SaidaWB_expected[4] = #999000 1'b0;
end 
// expected SaidaWB[ 3 ]
initial
begin
	SaidaWB_expected[3] = 1'bX;
	SaidaWB_expected[3] = #999000 1'b0;
end 
// expected SaidaWB[ 2 ]
initial
begin
	SaidaWB_expected[2] = 1'bX;
	SaidaWB_expected[2] = #999000 1'b0;
end 
// expected SaidaWB[ 1 ]
initial
begin
	SaidaWB_expected[1] = 1'bX;
	SaidaWB_expected[1] = #999000 1'b0;
end 
// expected SaidaWB[ 0 ]
initial
begin
	SaidaWB_expected[0] = 1'bX;
	SaidaWB_expected[0] = #999000 1'b0;
end 
// expected regDestino[ 4 ]
initial
begin
	regDestino_expected[4] = 1'bX;
	regDestino_expected[4] = #999000 1'b0;
end 
// expected regDestino[ 3 ]
initial
begin
	regDestino_expected[3] = 1'bX;
	regDestino_expected[3] = #999000 1'b0;
end 
// expected regDestino[ 2 ]
initial
begin
	regDestino_expected[2] = 1'bX;
	regDestino_expected[2] = #999000 1'b0;
end 
// expected regDestino[ 1 ]
initial
begin
	regDestino_expected[1] = 1'bX;
	regDestino_expected[1] = #999000 1'b0;
end 
// expected regDestino[ 0 ]
initial
begin
	regDestino_expected[0] = 1'bX;
	regDestino_expected[0] = #999000 1'b0;
end 

// expected RegWriteWB
initial
begin
	RegWriteWB_expected = 1'bX;
	RegWriteWB_expected = #999000 1'b0;
end 
// expected Cause[ 31 ]
initial
begin
	Cause_expected[31] = 1'bX;
end 
// expected Cause[ 30 ]
initial
begin
	Cause_expected[30] = 1'bX;
end 
// expected Cause[ 29 ]
initial
begin
	Cause_expected[29] = 1'bX;
end 
// expected Cause[ 28 ]
initial
begin
	Cause_expected[28] = 1'bX;
end 
// expected Cause[ 27 ]
initial
begin
	Cause_expected[27] = 1'bX;
end 
// expected Cause[ 26 ]
initial
begin
	Cause_expected[26] = 1'bX;
end 
// expected Cause[ 25 ]
initial
begin
	Cause_expected[25] = 1'bX;
end 
// expected Cause[ 24 ]
initial
begin
	Cause_expected[24] = 1'bX;
end 
// expected Cause[ 23 ]
initial
begin
	Cause_expected[23] = 1'bX;
end 
// expected Cause[ 22 ]
initial
begin
	Cause_expected[22] = 1'bX;
end 
// expected Cause[ 21 ]
initial
begin
	Cause_expected[21] = 1'bX;
end 
// expected Cause[ 20 ]
initial
begin
	Cause_expected[20] = 1'bX;
end 
// expected Cause[ 19 ]
initial
begin
	Cause_expected[19] = 1'bX;
end 
// expected Cause[ 18 ]
initial
begin
	Cause_expected[18] = 1'bX;
end 
// expected Cause[ 17 ]
initial
begin
	Cause_expected[17] = 1'bX;
end 
// expected Cause[ 16 ]
initial
begin
	Cause_expected[16] = 1'bX;
end 
// expected Cause[ 15 ]
initial
begin
	Cause_expected[15] = 1'bX;
end 
// expected Cause[ 14 ]
initial
begin
	Cause_expected[14] = 1'bX;
end 
// expected Cause[ 13 ]
initial
begin
	Cause_expected[13] = 1'bX;
end 
// expected Cause[ 12 ]
initial
begin
	Cause_expected[12] = 1'bX;
end 
// expected Cause[ 11 ]
initial
begin
	Cause_expected[11] = 1'bX;
end 
// expected Cause[ 10 ]
initial
begin
	Cause_expected[10] = 1'bX;
end 
// expected Cause[ 9 ]
initial
begin
	Cause_expected[9] = 1'bX;
end 
// expected Cause[ 8 ]
initial
begin
	Cause_expected[8] = 1'bX;
end 
// expected Cause[ 7 ]
initial
begin
	Cause_expected[7] = 1'bX;
end 
// expected Cause[ 6 ]
initial
begin
	Cause_expected[6] = 1'bX;
end 
// expected Cause[ 5 ]
initial
begin
	Cause_expected[5] = 1'bX;
end 
// expected Cause[ 4 ]
initial
begin
	Cause_expected[4] = 1'bX;
end 
// expected Cause[ 3 ]
initial
begin
	Cause_expected[3] = 1'bX;
end 
// expected Cause[ 2 ]
initial
begin
	Cause_expected[2] = 1'bX;
end 
// expected Cause[ 1 ]
initial
begin
	Cause_expected[1] = 1'bX;
end 
// expected Cause[ 0 ]
initial
begin
	Cause_expected[0] = 1'bX;
end 
// expected EPC[ 31 ]
initial
begin
	EPC_expected[31] = 1'bX;
end 
// expected EPC[ 30 ]
initial
begin
	EPC_expected[30] = 1'bX;
end 
// expected EPC[ 29 ]
initial
begin
	EPC_expected[29] = 1'bX;
end 
// expected EPC[ 28 ]
initial
begin
	EPC_expected[28] = 1'bX;
end 
// expected EPC[ 27 ]
initial
begin
	EPC_expected[27] = 1'bX;
end 
// expected EPC[ 26 ]
initial
begin
	EPC_expected[26] = 1'bX;
end 
// expected EPC[ 25 ]
initial
begin
	EPC_expected[25] = 1'bX;
end 
// expected EPC[ 24 ]
initial
begin
	EPC_expected[24] = 1'bX;
end 
// expected EPC[ 23 ]
initial
begin
	EPC_expected[23] = 1'bX;
end 
// expected EPC[ 22 ]
initial
begin
	EPC_expected[22] = 1'bX;
end 
// expected EPC[ 21 ]
initial
begin
	EPC_expected[21] = 1'bX;
end 
// expected EPC[ 20 ]
initial
begin
	EPC_expected[20] = 1'bX;
end 
// expected EPC[ 19 ]
initial
begin
	EPC_expected[19] = 1'bX;
end 
// expected EPC[ 18 ]
initial
begin
	EPC_expected[18] = 1'bX;
end 
// expected EPC[ 17 ]
initial
begin
	EPC_expected[17] = 1'bX;
end 
// expected EPC[ 16 ]
initial
begin
	EPC_expected[16] = 1'bX;
end 
// expected EPC[ 15 ]
initial
begin
	EPC_expected[15] = 1'bX;
end 
// expected EPC[ 14 ]
initial
begin
	EPC_expected[14] = 1'bX;
end 
// expected EPC[ 13 ]
initial
begin
	EPC_expected[13] = 1'bX;
end 
// expected EPC[ 12 ]
initial
begin
	EPC_expected[12] = 1'bX;
end 
// expected EPC[ 11 ]
initial
begin
	EPC_expected[11] = 1'bX;
end 
// expected EPC[ 10 ]
initial
begin
	EPC_expected[10] = 1'bX;
end 
// expected EPC[ 9 ]
initial
begin
	EPC_expected[9] = 1'bX;
end 
// expected EPC[ 8 ]
initial
begin
	EPC_expected[8] = 1'bX;
end 
// expected EPC[ 7 ]
initial
begin
	EPC_expected[7] = 1'bX;
end 
// expected EPC[ 6 ]
initial
begin
	EPC_expected[6] = 1'bX;
end 
// expected EPC[ 5 ]
initial
begin
	EPC_expected[5] = 1'bX;
end 
// expected EPC[ 4 ]
initial
begin
	EPC_expected[4] = 1'bX;
end 
// expected EPC[ 3 ]
initial
begin
	EPC_expected[3] = 1'bX;
end 
// expected EPC[ 2 ]
initial
begin
	EPC_expected[2] = 1'bX;
end 
// expected EPC[ 1 ]
initial
begin
	EPC_expected[1] = 1'bX;
end 
// expected EPC[ 0 ]
initial
begin
	EPC_expected[0] = 1'bX;
end 
// expected t0[ 31 ]
initial
begin
	t0_expected[31] = 1'bX;
end 
// expected t0[ 30 ]
initial
begin
	t0_expected[30] = 1'bX;
end 
// expected t0[ 29 ]
initial
begin
	t0_expected[29] = 1'bX;
end 
// expected t0[ 28 ]
initial
begin
	t0_expected[28] = 1'bX;
end 
// expected t0[ 27 ]
initial
begin
	t0_expected[27] = 1'bX;
end 
// expected t0[ 26 ]
initial
begin
	t0_expected[26] = 1'bX;
end 
// expected t0[ 25 ]
initial
begin
	t0_expected[25] = 1'bX;
end 
// expected t0[ 24 ]
initial
begin
	t0_expected[24] = 1'bX;
end 
// expected t0[ 23 ]
initial
begin
	t0_expected[23] = 1'bX;
end 
// expected t0[ 22 ]
initial
begin
	t0_expected[22] = 1'bX;
end 
// expected t0[ 21 ]
initial
begin
	t0_expected[21] = 1'bX;
end 
// expected t0[ 20 ]
initial
begin
	t0_expected[20] = 1'bX;
end 
// expected t0[ 19 ]
initial
begin
	t0_expected[19] = 1'bX;
end 
// expected t0[ 18 ]
initial
begin
	t0_expected[18] = 1'bX;
end 
// expected t0[ 17 ]
initial
begin
	t0_expected[17] = 1'bX;
end 
// expected t0[ 16 ]
initial
begin
	t0_expected[16] = 1'bX;
end 
// expected t0[ 15 ]
initial
begin
	t0_expected[15] = 1'bX;
end 
// expected t0[ 14 ]
initial
begin
	t0_expected[14] = 1'bX;
end 
// expected t0[ 13 ]
initial
begin
	t0_expected[13] = 1'bX;
end 
// expected t0[ 12 ]
initial
begin
	t0_expected[12] = 1'bX;
end 
// expected t0[ 11 ]
initial
begin
	t0_expected[11] = 1'bX;
end 
// expected t0[ 10 ]
initial
begin
	t0_expected[10] = 1'bX;
end 
// expected t0[ 9 ]
initial
begin
	t0_expected[9] = 1'bX;
end 
// expected t0[ 8 ]
initial
begin
	t0_expected[8] = 1'bX;
end 
// expected t0[ 7 ]
initial
begin
	t0_expected[7] = 1'bX;
end 
// expected t0[ 6 ]
initial
begin
	t0_expected[6] = 1'bX;
end 
// expected t0[ 5 ]
initial
begin
	t0_expected[5] = 1'bX;
end 
// expected t0[ 4 ]
initial
begin
	t0_expected[4] = 1'bX;
end 
// expected t0[ 3 ]
initial
begin
	t0_expected[3] = 1'bX;
end 
// expected t0[ 2 ]
initial
begin
	t0_expected[2] = 1'bX;
end 
// expected t0[ 1 ]
initial
begin
	t0_expected[1] = 1'bX;
end 
// expected t0[ 0 ]
initial
begin
	t0_expected[0] = 1'bX;
end 
// expected t1[ 31 ]
initial
begin
	t1_expected[31] = 1'bX;
end 
// expected t1[ 30 ]
initial
begin
	t1_expected[30] = 1'bX;
end 
// expected t1[ 29 ]
initial
begin
	t1_expected[29] = 1'bX;
end 
// expected t1[ 28 ]
initial
begin
	t1_expected[28] = 1'bX;
end 
// expected t1[ 27 ]
initial
begin
	t1_expected[27] = 1'bX;
end 
// expected t1[ 26 ]
initial
begin
	t1_expected[26] = 1'bX;
end 
// expected t1[ 25 ]
initial
begin
	t1_expected[25] = 1'bX;
end 
// expected t1[ 24 ]
initial
begin
	t1_expected[24] = 1'bX;
end 
// expected t1[ 23 ]
initial
begin
	t1_expected[23] = 1'bX;
end 
// expected t1[ 22 ]
initial
begin
	t1_expected[22] = 1'bX;
end 
// expected t1[ 21 ]
initial
begin
	t1_expected[21] = 1'bX;
end 
// expected t1[ 20 ]
initial
begin
	t1_expected[20] = 1'bX;
end 
// expected t1[ 19 ]
initial
begin
	t1_expected[19] = 1'bX;
end 
// expected t1[ 18 ]
initial
begin
	t1_expected[18] = 1'bX;
end 
// expected t1[ 17 ]
initial
begin
	t1_expected[17] = 1'bX;
end 
// expected t1[ 16 ]
initial
begin
	t1_expected[16] = 1'bX;
end 
// expected t1[ 15 ]
initial
begin
	t1_expected[15] = 1'bX;
end 
// expected t1[ 14 ]
initial
begin
	t1_expected[14] = 1'bX;
end 
// expected t1[ 13 ]
initial
begin
	t1_expected[13] = 1'bX;
end 
// expected t1[ 12 ]
initial
begin
	t1_expected[12] = 1'bX;
end 
// expected t1[ 11 ]
initial
begin
	t1_expected[11] = 1'bX;
end 
// expected t1[ 10 ]
initial
begin
	t1_expected[10] = 1'bX;
end 
// expected t1[ 9 ]
initial
begin
	t1_expected[9] = 1'bX;
end 
// expected t1[ 8 ]
initial
begin
	t1_expected[8] = 1'bX;
end 
// expected t1[ 7 ]
initial
begin
	t1_expected[7] = 1'bX;
end 
// expected t1[ 6 ]
initial
begin
	t1_expected[6] = 1'bX;
end 
// expected t1[ 5 ]
initial
begin
	t1_expected[5] = 1'bX;
end 
// expected t1[ 4 ]
initial
begin
	t1_expected[4] = 1'bX;
end 
// expected t1[ 3 ]
initial
begin
	t1_expected[3] = 1'bX;
end 
// expected t1[ 2 ]
initial
begin
	t1_expected[2] = 1'bX;
end 
// expected t1[ 1 ]
initial
begin
	t1_expected[1] = 1'bX;
end 
// expected t1[ 0 ]
initial
begin
	t1_expected[0] = 1'bX;
end 
// expected t2[ 31 ]
initial
begin
	t2_expected[31] = 1'bX;
end 
// expected t2[ 30 ]
initial
begin
	t2_expected[30] = 1'bX;
end 
// expected t2[ 29 ]
initial
begin
	t2_expected[29] = 1'bX;
end 
// expected t2[ 28 ]
initial
begin
	t2_expected[28] = 1'bX;
end 
// expected t2[ 27 ]
initial
begin
	t2_expected[27] = 1'bX;
end 
// expected t2[ 26 ]
initial
begin
	t2_expected[26] = 1'bX;
end 
// expected t2[ 25 ]
initial
begin
	t2_expected[25] = 1'bX;
end 
// expected t2[ 24 ]
initial
begin
	t2_expected[24] = 1'bX;
end 
// expected t2[ 23 ]
initial
begin
	t2_expected[23] = 1'bX;
end 
// expected t2[ 22 ]
initial
begin
	t2_expected[22] = 1'bX;
end 
// expected t2[ 21 ]
initial
begin
	t2_expected[21] = 1'bX;
end 
// expected t2[ 20 ]
initial
begin
	t2_expected[20] = 1'bX;
end 
// expected t2[ 19 ]
initial
begin
	t2_expected[19] = 1'bX;
end 
// expected t2[ 18 ]
initial
begin
	t2_expected[18] = 1'bX;
end 
// expected t2[ 17 ]
initial
begin
	t2_expected[17] = 1'bX;
end 
// expected t2[ 16 ]
initial
begin
	t2_expected[16] = 1'bX;
end 
// expected t2[ 15 ]
initial
begin
	t2_expected[15] = 1'bX;
end 
// expected t2[ 14 ]
initial
begin
	t2_expected[14] = 1'bX;
end 
// expected t2[ 13 ]
initial
begin
	t2_expected[13] = 1'bX;
end 
// expected t2[ 12 ]
initial
begin
	t2_expected[12] = 1'bX;
end 
// expected t2[ 11 ]
initial
begin
	t2_expected[11] = 1'bX;
end 
// expected t2[ 10 ]
initial
begin
	t2_expected[10] = 1'bX;
end 
// expected t2[ 9 ]
initial
begin
	t2_expected[9] = 1'bX;
end 
// expected t2[ 8 ]
initial
begin
	t2_expected[8] = 1'bX;
end 
// expected t2[ 7 ]
initial
begin
	t2_expected[7] = 1'bX;
end 
// expected t2[ 6 ]
initial
begin
	t2_expected[6] = 1'bX;
end 
// expected t2[ 5 ]
initial
begin
	t2_expected[5] = 1'bX;
end 
// expected t2[ 4 ]
initial
begin
	t2_expected[4] = 1'bX;
end 
// expected t2[ 3 ]
initial
begin
	t2_expected[3] = 1'bX;
end 
// expected t2[ 2 ]
initial
begin
	t2_expected[2] = 1'bX;
end 
// expected t2[ 1 ]
initial
begin
	t2_expected[1] = 1'bX;
end 
// expected t2[ 0 ]
initial
begin
	t2_expected[0] = 1'bX;
end 
// expected t3[ 31 ]
initial
begin
	t3_expected[31] = 1'bX;
end 
// expected t3[ 30 ]
initial
begin
	t3_expected[30] = 1'bX;
end 
// expected t3[ 29 ]
initial
begin
	t3_expected[29] = 1'bX;
end 
// expected t3[ 28 ]
initial
begin
	t3_expected[28] = 1'bX;
end 
// expected t3[ 27 ]
initial
begin
	t3_expected[27] = 1'bX;
end 
// expected t3[ 26 ]
initial
begin
	t3_expected[26] = 1'bX;
end 
// expected t3[ 25 ]
initial
begin
	t3_expected[25] = 1'bX;
end 
// expected t3[ 24 ]
initial
begin
	t3_expected[24] = 1'bX;
end 
// expected t3[ 23 ]
initial
begin
	t3_expected[23] = 1'bX;
end 
// expected t3[ 22 ]
initial
begin
	t3_expected[22] = 1'bX;
end 
// expected t3[ 21 ]
initial
begin
	t3_expected[21] = 1'bX;
end 
// expected t3[ 20 ]
initial
begin
	t3_expected[20] = 1'bX;
end 
// expected t3[ 19 ]
initial
begin
	t3_expected[19] = 1'bX;
end 
// expected t3[ 18 ]
initial
begin
	t3_expected[18] = 1'bX;
end 
// expected t3[ 17 ]
initial
begin
	t3_expected[17] = 1'bX;
end 
// expected t3[ 16 ]
initial
begin
	t3_expected[16] = 1'bX;
end 
// expected t3[ 15 ]
initial
begin
	t3_expected[15] = 1'bX;
end 
// expected t3[ 14 ]
initial
begin
	t3_expected[14] = 1'bX;
end 
// expected t3[ 13 ]
initial
begin
	t3_expected[13] = 1'bX;
end 
// expected t3[ 12 ]
initial
begin
	t3_expected[12] = 1'bX;
end 
// expected t3[ 11 ]
initial
begin
	t3_expected[11] = 1'bX;
end 
// expected t3[ 10 ]
initial
begin
	t3_expected[10] = 1'bX;
end 
// expected t3[ 9 ]
initial
begin
	t3_expected[9] = 1'bX;
end 
// expected t3[ 8 ]
initial
begin
	t3_expected[8] = 1'bX;
end 
// expected t3[ 7 ]
initial
begin
	t3_expected[7] = 1'bX;
end 
// expected t3[ 6 ]
initial
begin
	t3_expected[6] = 1'bX;
end 
// expected t3[ 5 ]
initial
begin
	t3_expected[5] = 1'bX;
end 
// expected t3[ 4 ]
initial
begin
	t3_expected[4] = 1'bX;
end 
// expected t3[ 3 ]
initial
begin
	t3_expected[3] = 1'bX;
end 
// expected t3[ 2 ]
initial
begin
	t3_expected[2] = 1'bX;
end 
// expected t3[ 1 ]
initial
begin
	t3_expected[1] = 1'bX;
end 
// expected t3[ 0 ]
initial
begin
	t3_expected[0] = 1'bX;
end 
// expected t4[ 31 ]
initial
begin
	t4_expected[31] = 1'bX;
end 
// expected t4[ 30 ]
initial
begin
	t4_expected[30] = 1'bX;
end 
// expected t4[ 29 ]
initial
begin
	t4_expected[29] = 1'bX;
end 
// expected t4[ 28 ]
initial
begin
	t4_expected[28] = 1'bX;
end 
// expected t4[ 27 ]
initial
begin
	t4_expected[27] = 1'bX;
end 
// expected t4[ 26 ]
initial
begin
	t4_expected[26] = 1'bX;
end 
// expected t4[ 25 ]
initial
begin
	t4_expected[25] = 1'bX;
end 
// expected t4[ 24 ]
initial
begin
	t4_expected[24] = 1'bX;
end 
// expected t4[ 23 ]
initial
begin
	t4_expected[23] = 1'bX;
end 
// expected t4[ 22 ]
initial
begin
	t4_expected[22] = 1'bX;
end 
// expected t4[ 21 ]
initial
begin
	t4_expected[21] = 1'bX;
end 
// expected t4[ 20 ]
initial
begin
	t4_expected[20] = 1'bX;
end 
// expected t4[ 19 ]
initial
begin
	t4_expected[19] = 1'bX;
end 
// expected t4[ 18 ]
initial
begin
	t4_expected[18] = 1'bX;
end 
// expected t4[ 17 ]
initial
begin
	t4_expected[17] = 1'bX;
end 
// expected t4[ 16 ]
initial
begin
	t4_expected[16] = 1'bX;
end 
// expected t4[ 15 ]
initial
begin
	t4_expected[15] = 1'bX;
end 
// expected t4[ 14 ]
initial
begin
	t4_expected[14] = 1'bX;
end 
// expected t4[ 13 ]
initial
begin
	t4_expected[13] = 1'bX;
end 
// expected t4[ 12 ]
initial
begin
	t4_expected[12] = 1'bX;
end 
// expected t4[ 11 ]
initial
begin
	t4_expected[11] = 1'bX;
end 
// expected t4[ 10 ]
initial
begin
	t4_expected[10] = 1'bX;
end 
// expected t4[ 9 ]
initial
begin
	t4_expected[9] = 1'bX;
end 
// expected t4[ 8 ]
initial
begin
	t4_expected[8] = 1'bX;
end 
// expected t4[ 7 ]
initial
begin
	t4_expected[7] = 1'bX;
end 
// expected t4[ 6 ]
initial
begin
	t4_expected[6] = 1'bX;
end 
// expected t4[ 5 ]
initial
begin
	t4_expected[5] = 1'bX;
end 
// expected t4[ 4 ]
initial
begin
	t4_expected[4] = 1'bX;
end 
// expected t4[ 3 ]
initial
begin
	t4_expected[3] = 1'bX;
end 
// expected t4[ 2 ]
initial
begin
	t4_expected[2] = 1'bX;
end 
// expected t4[ 1 ]
initial
begin
	t4_expected[1] = 1'bX;
end 
// expected t4[ 0 ]
initial
begin
	t4_expected[0] = 1'bX;
end 
// expected t5[ 31 ]
initial
begin
	t5_expected[31] = 1'bX;
end 
// expected t5[ 30 ]
initial
begin
	t5_expected[30] = 1'bX;
end 
// expected t5[ 29 ]
initial
begin
	t5_expected[29] = 1'bX;
end 
// expected t5[ 28 ]
initial
begin
	t5_expected[28] = 1'bX;
end 
// expected t5[ 27 ]
initial
begin
	t5_expected[27] = 1'bX;
end 
// expected t5[ 26 ]
initial
begin
	t5_expected[26] = 1'bX;
end 
// expected t5[ 25 ]
initial
begin
	t5_expected[25] = 1'bX;
end 
// expected t5[ 24 ]
initial
begin
	t5_expected[24] = 1'bX;
end 
// expected t5[ 23 ]
initial
begin
	t5_expected[23] = 1'bX;
end 
// expected t5[ 22 ]
initial
begin
	t5_expected[22] = 1'bX;
end 
// expected t5[ 21 ]
initial
begin
	t5_expected[21] = 1'bX;
end 
// expected t5[ 20 ]
initial
begin
	t5_expected[20] = 1'bX;
end 
// expected t5[ 19 ]
initial
begin
	t5_expected[19] = 1'bX;
end 
// expected t5[ 18 ]
initial
begin
	t5_expected[18] = 1'bX;
end 
// expected t5[ 17 ]
initial
begin
	t5_expected[17] = 1'bX;
end 
// expected t5[ 16 ]
initial
begin
	t5_expected[16] = 1'bX;
end 
// expected t5[ 15 ]
initial
begin
	t5_expected[15] = 1'bX;
end 
// expected t5[ 14 ]
initial
begin
	t5_expected[14] = 1'bX;
end 
// expected t5[ 13 ]
initial
begin
	t5_expected[13] = 1'bX;
end 
// expected t5[ 12 ]
initial
begin
	t5_expected[12] = 1'bX;
end 
// expected t5[ 11 ]
initial
begin
	t5_expected[11] = 1'bX;
end 
// expected t5[ 10 ]
initial
begin
	t5_expected[10] = 1'bX;
end 
// expected t5[ 9 ]
initial
begin
	t5_expected[9] = 1'bX;
end 
// expected t5[ 8 ]
initial
begin
	t5_expected[8] = 1'bX;
end 
// expected t5[ 7 ]
initial
begin
	t5_expected[7] = 1'bX;
end 
// expected t5[ 6 ]
initial
begin
	t5_expected[6] = 1'bX;
end 
// expected t5[ 5 ]
initial
begin
	t5_expected[5] = 1'bX;
end 
// expected t5[ 4 ]
initial
begin
	t5_expected[4] = 1'bX;
end 
// expected t5[ 3 ]
initial
begin
	t5_expected[3] = 1'bX;
end 
// expected t5[ 2 ]
initial
begin
	t5_expected[2] = 1'bX;
end 
// expected t5[ 1 ]
initial
begin
	t5_expected[1] = 1'bX;
end 
// expected t5[ 0 ]
initial
begin
	t5_expected[0] = 1'bX;
end 
// expected t6[ 31 ]
initial
begin
	t6_expected[31] = 1'bX;
end 
// expected t6[ 30 ]
initial
begin
	t6_expected[30] = 1'bX;
end 
// expected t6[ 29 ]
initial
begin
	t6_expected[29] = 1'bX;
end 
// expected t6[ 28 ]
initial
begin
	t6_expected[28] = 1'bX;
end 
// expected t6[ 27 ]
initial
begin
	t6_expected[27] = 1'bX;
end 
// expected t6[ 26 ]
initial
begin
	t6_expected[26] = 1'bX;
end 
// expected t6[ 25 ]
initial
begin
	t6_expected[25] = 1'bX;
end 
// expected t6[ 24 ]
initial
begin
	t6_expected[24] = 1'bX;
end 
// expected t6[ 23 ]
initial
begin
	t6_expected[23] = 1'bX;
end 
// expected t6[ 22 ]
initial
begin
	t6_expected[22] = 1'bX;
end 
// expected t6[ 21 ]
initial
begin
	t6_expected[21] = 1'bX;
end 
// expected t6[ 20 ]
initial
begin
	t6_expected[20] = 1'bX;
end 
// expected t6[ 19 ]
initial
begin
	t6_expected[19] = 1'bX;
end 
// expected t6[ 18 ]
initial
begin
	t6_expected[18] = 1'bX;
end 
// expected t6[ 17 ]
initial
begin
	t6_expected[17] = 1'bX;
end 
// expected t6[ 16 ]
initial
begin
	t6_expected[16] = 1'bX;
end 
// expected t6[ 15 ]
initial
begin
	t6_expected[15] = 1'bX;
end 
// expected t6[ 14 ]
initial
begin
	t6_expected[14] = 1'bX;
end 
// expected t6[ 13 ]
initial
begin
	t6_expected[13] = 1'bX;
end 
// expected t6[ 12 ]
initial
begin
	t6_expected[12] = 1'bX;
end 
// expected t6[ 11 ]
initial
begin
	t6_expected[11] = 1'bX;
end 
// expected t6[ 10 ]
initial
begin
	t6_expected[10] = 1'bX;
end 
// expected t6[ 9 ]
initial
begin
	t6_expected[9] = 1'bX;
end 
// expected t6[ 8 ]
initial
begin
	t6_expected[8] = 1'bX;
end 
// expected t6[ 7 ]
initial
begin
	t6_expected[7] = 1'bX;
end 
// expected t6[ 6 ]
initial
begin
	t6_expected[6] = 1'bX;
end 
// expected t6[ 5 ]
initial
begin
	t6_expected[5] = 1'bX;
end 
// expected t6[ 4 ]
initial
begin
	t6_expected[4] = 1'bX;
end 
// expected t6[ 3 ]
initial
begin
	t6_expected[3] = 1'bX;
end 
// expected t6[ 2 ]
initial
begin
	t6_expected[2] = 1'bX;
end 
// expected t6[ 1 ]
initial
begin
	t6_expected[1] = 1'bX;
end 
// expected t6[ 0 ]
initial
begin
	t6_expected[0] = 1'bX;
end 
// generate trigger
always @(Branch_expected or Branch or Cause_expected or Cause or EPC_expected or EPC or ForwardA_expected or ForwardA or ForwardB_expected or ForwardB or HI_expected or HI or Instruction_expected or Instruction or Jump_expected or Jump or JumpEX_expected or JumpEX or Link_expected or Link or LO_expected or LO or MemtoReg_expected or MemtoReg or moveHiLo_expected or moveHiLo or opALU_expected or opALU or OrigALU_expected or OrigALU or PC_expected or PC or PC/EX_expected or PC/EX or ReadMem_expected or ReadMem or regDestino_expected or regDestino or RegDst_expected or RegDst or RegWriteWB_expected or RegWriteWB or saidaMemDados_expected or saidaMemDados or SaidaWB_expected or SaidaWB or shamt_expected or shamt or t0_expected or t0 or t1_expected or t1 or t2_expected or t2 or t3_expected or t3 or t4_expected or t4 or t5_expected or t5 or t6_expected or t6 or ULA_main_expected or ULA_main or ValorA_expected or ValorA or ValorB_expected or ValorB or WriteMem_expected or WriteMem or WriteReg_expected or WriteReg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Branch = %b | expected Cause = %b | expected EPC = %b | expected ForwardA = %b | expected ForwardB = %b | expected HI = %b | expected Instruction = %b | expected Jump = %b | expected JumpEX = %b | expected Link = %b | expected LO = %b | expected MemtoReg = %b | expected moveHiLo = %b | expected opALU = %b | expected OrigALU = %b | expected PC = %b | expected PC/EX = %b | expected ReadMem = %b | expected regDestino = %b | expected RegDst = %b | expected RegWriteWB = %b | expected saidaMemDados = %b | expected SaidaWB = %b | expected shamt = %b | expected t0 = %b | expected t1 = %b | expected t2 = %b | expected t3 = %b | expected t4 = %b | expected t5 = %b | expected t6 = %b | expected ULA_main = %b | expected ValorA = %b | expected ValorB = %b | expected WriteMem = %b | expected WriteReg = %b | ",Branch_expected_prev,Cause_expected_prev,EPC_expected_prev,ForwardA_expected_prev,ForwardB_expected_prev,HI_expected_prev,Instruction_expected_prev,Jump_expected_prev,JumpEX_expected_prev,Link_expected_prev,LO_expected_prev,MemtoReg_expected_prev,moveHiLo_expected_prev,opALU_expected_prev,OrigALU_expected_prev,PC_expected_prev,PC/EX_expected_prev,ReadMem_expected_prev,regDestino_expected_prev,RegDst_expected_prev,RegWriteWB_expected_prev,saidaMemDados_expected_prev,SaidaWB_expected_prev,shamt_expected_prev,t0_expected_prev,t1_expected_prev,t2_expected_prev,t3_expected_prev,t4_expected_prev,t5_expected_prev,t6_expected_prev,ULA_main_expected_prev,ValorA_expected_prev,ValorB_expected_prev,WriteMem_expected_prev,WriteReg_expected_prev);
	$display("| real Branch = %b | real Cause = %b | real EPC = %b | real ForwardA = %b | real ForwardB = %b | real HI = %b | real Instruction = %b | real Jump = %b | real JumpEX = %b | real Link = %b | real LO = %b | real MemtoReg = %b | real moveHiLo = %b | real opALU = %b | real OrigALU = %b | real PC = %b | real PC/EX = %b | real ReadMem = %b | real regDestino = %b | real RegDst = %b | real RegWriteWB = %b | real saidaMemDados = %b | real SaidaWB = %b | real shamt = %b | real t0 = %b | real t1 = %b | real t2 = %b | real t3 = %b | real t4 = %b | real t5 = %b | real t6 = %b | real ULA_main = %b | real ValorA = %b | real ValorB = %b | real WriteMem = %b | real WriteReg = %b | ",Branch_prev,Cause_prev,EPC_prev,ForwardA_prev,ForwardB_prev,HI_prev,Instruction_prev,Jump_prev,JumpEX_prev,Link_prev,LO_prev,MemtoReg_prev,moveHiLo_prev,opALU_prev,OrigALU_prev,PC_prev,PC/EX_prev,ReadMem_prev,regDestino_prev,RegDst_prev,RegWriteWB_prev,saidaMemDados_prev,SaidaWB_prev,shamt_prev,t0_prev,t1_prev,t2_prev,t3_prev,t4_prev,t5_prev,t6_prev,ULA_main_prev,ValorA_prev,ValorB_prev,WriteMem_prev,WriteReg_prev);
`endif
	if (
		( Cause_expected_prev[0] !== 1'bx ) && ( Cause_prev[0] !== Cause_expected_prev[0] )
		&& ((Cause_expected_prev[0] !== last_Cause_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[0] = Cause_expected_prev[0];
	end
	if (
		( Cause_expected_prev[1] !== 1'bx ) && ( Cause_prev[1] !== Cause_expected_prev[1] )
		&& ((Cause_expected_prev[1] !== last_Cause_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[1] = Cause_expected_prev[1];
	end
	if (
		( Cause_expected_prev[2] !== 1'bx ) && ( Cause_prev[2] !== Cause_expected_prev[2] )
		&& ((Cause_expected_prev[2] !== last_Cause_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[2] = Cause_expected_prev[2];
	end
	if (
		( Cause_expected_prev[3] !== 1'bx ) && ( Cause_prev[3] !== Cause_expected_prev[3] )
		&& ((Cause_expected_prev[3] !== last_Cause_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[3] = Cause_expected_prev[3];
	end
	if (
		( Cause_expected_prev[4] !== 1'bx ) && ( Cause_prev[4] !== Cause_expected_prev[4] )
		&& ((Cause_expected_prev[4] !== last_Cause_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[4] = Cause_expected_prev[4];
	end
	if (
		( Cause_expected_prev[5] !== 1'bx ) && ( Cause_prev[5] !== Cause_expected_prev[5] )
		&& ((Cause_expected_prev[5] !== last_Cause_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[5] = Cause_expected_prev[5];
	end
	if (
		( Cause_expected_prev[6] !== 1'bx ) && ( Cause_prev[6] !== Cause_expected_prev[6] )
		&& ((Cause_expected_prev[6] !== last_Cause_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[6] = Cause_expected_prev[6];
	end
	if (
		( Cause_expected_prev[7] !== 1'bx ) && ( Cause_prev[7] !== Cause_expected_prev[7] )
		&& ((Cause_expected_prev[7] !== last_Cause_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[7] = Cause_expected_prev[7];
	end
	if (
		( Cause_expected_prev[8] !== 1'bx ) && ( Cause_prev[8] !== Cause_expected_prev[8] )
		&& ((Cause_expected_prev[8] !== last_Cause_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[8] = Cause_expected_prev[8];
	end
	if (
		( Cause_expected_prev[9] !== 1'bx ) && ( Cause_prev[9] !== Cause_expected_prev[9] )
		&& ((Cause_expected_prev[9] !== last_Cause_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[9] = Cause_expected_prev[9];
	end
	if (
		( Cause_expected_prev[10] !== 1'bx ) && ( Cause_prev[10] !== Cause_expected_prev[10] )
		&& ((Cause_expected_prev[10] !== last_Cause_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[10] = Cause_expected_prev[10];
	end
	if (
		( Cause_expected_prev[11] !== 1'bx ) && ( Cause_prev[11] !== Cause_expected_prev[11] )
		&& ((Cause_expected_prev[11] !== last_Cause_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[11] = Cause_expected_prev[11];
	end
	if (
		( Cause_expected_prev[12] !== 1'bx ) && ( Cause_prev[12] !== Cause_expected_prev[12] )
		&& ((Cause_expected_prev[12] !== last_Cause_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[12] = Cause_expected_prev[12];
	end
	if (
		( Cause_expected_prev[13] !== 1'bx ) && ( Cause_prev[13] !== Cause_expected_prev[13] )
		&& ((Cause_expected_prev[13] !== last_Cause_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[13] = Cause_expected_prev[13];
	end
	if (
		( Cause_expected_prev[14] !== 1'bx ) && ( Cause_prev[14] !== Cause_expected_prev[14] )
		&& ((Cause_expected_prev[14] !== last_Cause_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[14] = Cause_expected_prev[14];
	end
	if (
		( Cause_expected_prev[15] !== 1'bx ) && ( Cause_prev[15] !== Cause_expected_prev[15] )
		&& ((Cause_expected_prev[15] !== last_Cause_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[15] = Cause_expected_prev[15];
	end
	if (
		( Cause_expected_prev[16] !== 1'bx ) && ( Cause_prev[16] !== Cause_expected_prev[16] )
		&& ((Cause_expected_prev[16] !== last_Cause_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[16] = Cause_expected_prev[16];
	end
	if (
		( Cause_expected_prev[17] !== 1'bx ) && ( Cause_prev[17] !== Cause_expected_prev[17] )
		&& ((Cause_expected_prev[17] !== last_Cause_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[17] = Cause_expected_prev[17];
	end
	if (
		( Cause_expected_prev[18] !== 1'bx ) && ( Cause_prev[18] !== Cause_expected_prev[18] )
		&& ((Cause_expected_prev[18] !== last_Cause_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[18] = Cause_expected_prev[18];
	end
	if (
		( Cause_expected_prev[19] !== 1'bx ) && ( Cause_prev[19] !== Cause_expected_prev[19] )
		&& ((Cause_expected_prev[19] !== last_Cause_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[19] = Cause_expected_prev[19];
	end
	if (
		( Cause_expected_prev[20] !== 1'bx ) && ( Cause_prev[20] !== Cause_expected_prev[20] )
		&& ((Cause_expected_prev[20] !== last_Cause_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[20] = Cause_expected_prev[20];
	end
	if (
		( Cause_expected_prev[21] !== 1'bx ) && ( Cause_prev[21] !== Cause_expected_prev[21] )
		&& ((Cause_expected_prev[21] !== last_Cause_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[21] = Cause_expected_prev[21];
	end
	if (
		( Cause_expected_prev[22] !== 1'bx ) && ( Cause_prev[22] !== Cause_expected_prev[22] )
		&& ((Cause_expected_prev[22] !== last_Cause_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[22] = Cause_expected_prev[22];
	end
	if (
		( Cause_expected_prev[23] !== 1'bx ) && ( Cause_prev[23] !== Cause_expected_prev[23] )
		&& ((Cause_expected_prev[23] !== last_Cause_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[23] = Cause_expected_prev[23];
	end
	if (
		( Cause_expected_prev[24] !== 1'bx ) && ( Cause_prev[24] !== Cause_expected_prev[24] )
		&& ((Cause_expected_prev[24] !== last_Cause_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[24] = Cause_expected_prev[24];
	end
	if (
		( Cause_expected_prev[25] !== 1'bx ) && ( Cause_prev[25] !== Cause_expected_prev[25] )
		&& ((Cause_expected_prev[25] !== last_Cause_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[25] = Cause_expected_prev[25];
	end
	if (
		( Cause_expected_prev[26] !== 1'bx ) && ( Cause_prev[26] !== Cause_expected_prev[26] )
		&& ((Cause_expected_prev[26] !== last_Cause_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[26] = Cause_expected_prev[26];
	end
	if (
		( Cause_expected_prev[27] !== 1'bx ) && ( Cause_prev[27] !== Cause_expected_prev[27] )
		&& ((Cause_expected_prev[27] !== last_Cause_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[27] = Cause_expected_prev[27];
	end
	if (
		( Cause_expected_prev[28] !== 1'bx ) && ( Cause_prev[28] !== Cause_expected_prev[28] )
		&& ((Cause_expected_prev[28] !== last_Cause_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[28] = Cause_expected_prev[28];
	end
	if (
		( Cause_expected_prev[29] !== 1'bx ) && ( Cause_prev[29] !== Cause_expected_prev[29] )
		&& ((Cause_expected_prev[29] !== last_Cause_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[29] = Cause_expected_prev[29];
	end
	if (
		( Cause_expected_prev[30] !== 1'bx ) && ( Cause_prev[30] !== Cause_expected_prev[30] )
		&& ((Cause_expected_prev[30] !== last_Cause_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[30] = Cause_expected_prev[30];
	end
	if (
		( Cause_expected_prev[31] !== 1'bx ) && ( Cause_prev[31] !== Cause_expected_prev[31] )
		&& ((Cause_expected_prev[31] !== last_Cause_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cause[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cause_expected_prev);
		$display ("     Real value = %b", Cause_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cause_exp[31] = Cause_expected_prev[31];
	end
	if (
		( EPC_expected_prev[0] !== 1'bx ) && ( EPC_prev[0] !== EPC_expected_prev[0] )
		&& ((EPC_expected_prev[0] !== last_EPC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[0] = EPC_expected_prev[0];
	end
	if (
		( EPC_expected_prev[1] !== 1'bx ) && ( EPC_prev[1] !== EPC_expected_prev[1] )
		&& ((EPC_expected_prev[1] !== last_EPC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[1] = EPC_expected_prev[1];
	end
	if (
		( EPC_expected_prev[2] !== 1'bx ) && ( EPC_prev[2] !== EPC_expected_prev[2] )
		&& ((EPC_expected_prev[2] !== last_EPC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[2] = EPC_expected_prev[2];
	end
	if (
		( EPC_expected_prev[3] !== 1'bx ) && ( EPC_prev[3] !== EPC_expected_prev[3] )
		&& ((EPC_expected_prev[3] !== last_EPC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[3] = EPC_expected_prev[3];
	end
	if (
		( EPC_expected_prev[4] !== 1'bx ) && ( EPC_prev[4] !== EPC_expected_prev[4] )
		&& ((EPC_expected_prev[4] !== last_EPC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[4] = EPC_expected_prev[4];
	end
	if (
		( EPC_expected_prev[5] !== 1'bx ) && ( EPC_prev[5] !== EPC_expected_prev[5] )
		&& ((EPC_expected_prev[5] !== last_EPC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[5] = EPC_expected_prev[5];
	end
	if (
		( EPC_expected_prev[6] !== 1'bx ) && ( EPC_prev[6] !== EPC_expected_prev[6] )
		&& ((EPC_expected_prev[6] !== last_EPC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[6] = EPC_expected_prev[6];
	end
	if (
		( EPC_expected_prev[7] !== 1'bx ) && ( EPC_prev[7] !== EPC_expected_prev[7] )
		&& ((EPC_expected_prev[7] !== last_EPC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[7] = EPC_expected_prev[7];
	end
	if (
		( EPC_expected_prev[8] !== 1'bx ) && ( EPC_prev[8] !== EPC_expected_prev[8] )
		&& ((EPC_expected_prev[8] !== last_EPC_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[8] = EPC_expected_prev[8];
	end
	if (
		( EPC_expected_prev[9] !== 1'bx ) && ( EPC_prev[9] !== EPC_expected_prev[9] )
		&& ((EPC_expected_prev[9] !== last_EPC_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[9] = EPC_expected_prev[9];
	end
	if (
		( EPC_expected_prev[10] !== 1'bx ) && ( EPC_prev[10] !== EPC_expected_prev[10] )
		&& ((EPC_expected_prev[10] !== last_EPC_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[10] = EPC_expected_prev[10];
	end
	if (
		( EPC_expected_prev[11] !== 1'bx ) && ( EPC_prev[11] !== EPC_expected_prev[11] )
		&& ((EPC_expected_prev[11] !== last_EPC_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[11] = EPC_expected_prev[11];
	end
	if (
		( EPC_expected_prev[12] !== 1'bx ) && ( EPC_prev[12] !== EPC_expected_prev[12] )
		&& ((EPC_expected_prev[12] !== last_EPC_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[12] = EPC_expected_prev[12];
	end
	if (
		( EPC_expected_prev[13] !== 1'bx ) && ( EPC_prev[13] !== EPC_expected_prev[13] )
		&& ((EPC_expected_prev[13] !== last_EPC_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[13] = EPC_expected_prev[13];
	end
	if (
		( EPC_expected_prev[14] !== 1'bx ) && ( EPC_prev[14] !== EPC_expected_prev[14] )
		&& ((EPC_expected_prev[14] !== last_EPC_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[14] = EPC_expected_prev[14];
	end
	if (
		( EPC_expected_prev[15] !== 1'bx ) && ( EPC_prev[15] !== EPC_expected_prev[15] )
		&& ((EPC_expected_prev[15] !== last_EPC_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[15] = EPC_expected_prev[15];
	end
	if (
		( EPC_expected_prev[16] !== 1'bx ) && ( EPC_prev[16] !== EPC_expected_prev[16] )
		&& ((EPC_expected_prev[16] !== last_EPC_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[16] = EPC_expected_prev[16];
	end
	if (
		( EPC_expected_prev[17] !== 1'bx ) && ( EPC_prev[17] !== EPC_expected_prev[17] )
		&& ((EPC_expected_prev[17] !== last_EPC_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[17] = EPC_expected_prev[17];
	end
	if (
		( EPC_expected_prev[18] !== 1'bx ) && ( EPC_prev[18] !== EPC_expected_prev[18] )
		&& ((EPC_expected_prev[18] !== last_EPC_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[18] = EPC_expected_prev[18];
	end
	if (
		( EPC_expected_prev[19] !== 1'bx ) && ( EPC_prev[19] !== EPC_expected_prev[19] )
		&& ((EPC_expected_prev[19] !== last_EPC_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[19] = EPC_expected_prev[19];
	end
	if (
		( EPC_expected_prev[20] !== 1'bx ) && ( EPC_prev[20] !== EPC_expected_prev[20] )
		&& ((EPC_expected_prev[20] !== last_EPC_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[20] = EPC_expected_prev[20];
	end
	if (
		( EPC_expected_prev[21] !== 1'bx ) && ( EPC_prev[21] !== EPC_expected_prev[21] )
		&& ((EPC_expected_prev[21] !== last_EPC_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[21] = EPC_expected_prev[21];
	end
	if (
		( EPC_expected_prev[22] !== 1'bx ) && ( EPC_prev[22] !== EPC_expected_prev[22] )
		&& ((EPC_expected_prev[22] !== last_EPC_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[22] = EPC_expected_prev[22];
	end
	if (
		( EPC_expected_prev[23] !== 1'bx ) && ( EPC_prev[23] !== EPC_expected_prev[23] )
		&& ((EPC_expected_prev[23] !== last_EPC_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[23] = EPC_expected_prev[23];
	end
	if (
		( EPC_expected_prev[24] !== 1'bx ) && ( EPC_prev[24] !== EPC_expected_prev[24] )
		&& ((EPC_expected_prev[24] !== last_EPC_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[24] = EPC_expected_prev[24];
	end
	if (
		( EPC_expected_prev[25] !== 1'bx ) && ( EPC_prev[25] !== EPC_expected_prev[25] )
		&& ((EPC_expected_prev[25] !== last_EPC_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[25] = EPC_expected_prev[25];
	end
	if (
		( EPC_expected_prev[26] !== 1'bx ) && ( EPC_prev[26] !== EPC_expected_prev[26] )
		&& ((EPC_expected_prev[26] !== last_EPC_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[26] = EPC_expected_prev[26];
	end
	if (
		( EPC_expected_prev[27] !== 1'bx ) && ( EPC_prev[27] !== EPC_expected_prev[27] )
		&& ((EPC_expected_prev[27] !== last_EPC_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[27] = EPC_expected_prev[27];
	end
	if (
		( EPC_expected_prev[28] !== 1'bx ) && ( EPC_prev[28] !== EPC_expected_prev[28] )
		&& ((EPC_expected_prev[28] !== last_EPC_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[28] = EPC_expected_prev[28];
	end
	if (
		( EPC_expected_prev[29] !== 1'bx ) && ( EPC_prev[29] !== EPC_expected_prev[29] )
		&& ((EPC_expected_prev[29] !== last_EPC_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[29] = EPC_expected_prev[29];
	end
	if (
		( EPC_expected_prev[30] !== 1'bx ) && ( EPC_prev[30] !== EPC_expected_prev[30] )
		&& ((EPC_expected_prev[30] !== last_EPC_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[30] = EPC_expected_prev[30];
	end
	if (
		( EPC_expected_prev[31] !== 1'bx ) && ( EPC_prev[31] !== EPC_expected_prev[31] )
		&& ((EPC_expected_prev[31] !== last_EPC_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EPC_expected_prev);
		$display ("     Real value = %b", EPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EPC_exp[31] = EPC_expected_prev[31];
	end
	if (
		( ForwardA_expected_prev[0] !== 1'bx ) && ( ForwardA_prev[0] !== ForwardA_expected_prev[0] )
		&& ((ForwardA_expected_prev[0] !== last_ForwardA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardA_expected_prev);
		$display ("     Real value = %b", ForwardA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ForwardA_exp[0] = ForwardA_expected_prev[0];
	end
	if (
		( ForwardA_expected_prev[1] !== 1'bx ) && ( ForwardA_prev[1] !== ForwardA_expected_prev[1] )
		&& ((ForwardA_expected_prev[1] !== last_ForwardA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardA_expected_prev);
		$display ("     Real value = %b", ForwardA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ForwardA_exp[1] = ForwardA_expected_prev[1];
	end
	if (
		( ForwardB_expected_prev[0] !== 1'bx ) && ( ForwardB_prev[0] !== ForwardB_expected_prev[0] )
		&& ((ForwardB_expected_prev[0] !== last_ForwardB_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardB_expected_prev);
		$display ("     Real value = %b", ForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ForwardB_exp[0] = ForwardB_expected_prev[0];
	end
	if (
		( ForwardB_expected_prev[1] !== 1'bx ) && ( ForwardB_prev[1] !== ForwardB_expected_prev[1] )
		&& ((ForwardB_expected_prev[1] !== last_ForwardB_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardB_expected_prev);
		$display ("     Real value = %b", ForwardB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ForwardB_exp[1] = ForwardB_expected_prev[1];
	end
	if (
		( HI_expected_prev[0] !== 1'bx ) && ( HI_prev[0] !== HI_expected_prev[0] )
		&& ((HI_expected_prev[0] !== last_HI_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[0] = HI_expected_prev[0];
	end
	if (
		( HI_expected_prev[1] !== 1'bx ) && ( HI_prev[1] !== HI_expected_prev[1] )
		&& ((HI_expected_prev[1] !== last_HI_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[1] = HI_expected_prev[1];
	end
	if (
		( HI_expected_prev[2] !== 1'bx ) && ( HI_prev[2] !== HI_expected_prev[2] )
		&& ((HI_expected_prev[2] !== last_HI_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[2] = HI_expected_prev[2];
	end
	if (
		( HI_expected_prev[3] !== 1'bx ) && ( HI_prev[3] !== HI_expected_prev[3] )
		&& ((HI_expected_prev[3] !== last_HI_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[3] = HI_expected_prev[3];
	end
	if (
		( HI_expected_prev[4] !== 1'bx ) && ( HI_prev[4] !== HI_expected_prev[4] )
		&& ((HI_expected_prev[4] !== last_HI_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[4] = HI_expected_prev[4];
	end
	if (
		( HI_expected_prev[5] !== 1'bx ) && ( HI_prev[5] !== HI_expected_prev[5] )
		&& ((HI_expected_prev[5] !== last_HI_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[5] = HI_expected_prev[5];
	end
	if (
		( HI_expected_prev[6] !== 1'bx ) && ( HI_prev[6] !== HI_expected_prev[6] )
		&& ((HI_expected_prev[6] !== last_HI_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[6] = HI_expected_prev[6];
	end
	if (
		( HI_expected_prev[7] !== 1'bx ) && ( HI_prev[7] !== HI_expected_prev[7] )
		&& ((HI_expected_prev[7] !== last_HI_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[7] = HI_expected_prev[7];
	end
	if (
		( HI_expected_prev[8] !== 1'bx ) && ( HI_prev[8] !== HI_expected_prev[8] )
		&& ((HI_expected_prev[8] !== last_HI_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[8] = HI_expected_prev[8];
	end
	if (
		( HI_expected_prev[9] !== 1'bx ) && ( HI_prev[9] !== HI_expected_prev[9] )
		&& ((HI_expected_prev[9] !== last_HI_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[9] = HI_expected_prev[9];
	end
	if (
		( HI_expected_prev[10] !== 1'bx ) && ( HI_prev[10] !== HI_expected_prev[10] )
		&& ((HI_expected_prev[10] !== last_HI_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[10] = HI_expected_prev[10];
	end
	if (
		( HI_expected_prev[11] !== 1'bx ) && ( HI_prev[11] !== HI_expected_prev[11] )
		&& ((HI_expected_prev[11] !== last_HI_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[11] = HI_expected_prev[11];
	end
	if (
		( HI_expected_prev[12] !== 1'bx ) && ( HI_prev[12] !== HI_expected_prev[12] )
		&& ((HI_expected_prev[12] !== last_HI_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[12] = HI_expected_prev[12];
	end
	if (
		( HI_expected_prev[13] !== 1'bx ) && ( HI_prev[13] !== HI_expected_prev[13] )
		&& ((HI_expected_prev[13] !== last_HI_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[13] = HI_expected_prev[13];
	end
	if (
		( HI_expected_prev[14] !== 1'bx ) && ( HI_prev[14] !== HI_expected_prev[14] )
		&& ((HI_expected_prev[14] !== last_HI_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[14] = HI_expected_prev[14];
	end
	if (
		( HI_expected_prev[15] !== 1'bx ) && ( HI_prev[15] !== HI_expected_prev[15] )
		&& ((HI_expected_prev[15] !== last_HI_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[15] = HI_expected_prev[15];
	end
	if (
		( HI_expected_prev[16] !== 1'bx ) && ( HI_prev[16] !== HI_expected_prev[16] )
		&& ((HI_expected_prev[16] !== last_HI_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[16] = HI_expected_prev[16];
	end
	if (
		( HI_expected_prev[17] !== 1'bx ) && ( HI_prev[17] !== HI_expected_prev[17] )
		&& ((HI_expected_prev[17] !== last_HI_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[17] = HI_expected_prev[17];
	end
	if (
		( HI_expected_prev[18] !== 1'bx ) && ( HI_prev[18] !== HI_expected_prev[18] )
		&& ((HI_expected_prev[18] !== last_HI_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[18] = HI_expected_prev[18];
	end
	if (
		( HI_expected_prev[19] !== 1'bx ) && ( HI_prev[19] !== HI_expected_prev[19] )
		&& ((HI_expected_prev[19] !== last_HI_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[19] = HI_expected_prev[19];
	end
	if (
		( HI_expected_prev[20] !== 1'bx ) && ( HI_prev[20] !== HI_expected_prev[20] )
		&& ((HI_expected_prev[20] !== last_HI_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[20] = HI_expected_prev[20];
	end
	if (
		( HI_expected_prev[21] !== 1'bx ) && ( HI_prev[21] !== HI_expected_prev[21] )
		&& ((HI_expected_prev[21] !== last_HI_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[21] = HI_expected_prev[21];
	end
	if (
		( HI_expected_prev[22] !== 1'bx ) && ( HI_prev[22] !== HI_expected_prev[22] )
		&& ((HI_expected_prev[22] !== last_HI_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[22] = HI_expected_prev[22];
	end
	if (
		( HI_expected_prev[23] !== 1'bx ) && ( HI_prev[23] !== HI_expected_prev[23] )
		&& ((HI_expected_prev[23] !== last_HI_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[23] = HI_expected_prev[23];
	end
	if (
		( HI_expected_prev[24] !== 1'bx ) && ( HI_prev[24] !== HI_expected_prev[24] )
		&& ((HI_expected_prev[24] !== last_HI_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[24] = HI_expected_prev[24];
	end
	if (
		( HI_expected_prev[25] !== 1'bx ) && ( HI_prev[25] !== HI_expected_prev[25] )
		&& ((HI_expected_prev[25] !== last_HI_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[25] = HI_expected_prev[25];
	end
	if (
		( HI_expected_prev[26] !== 1'bx ) && ( HI_prev[26] !== HI_expected_prev[26] )
		&& ((HI_expected_prev[26] !== last_HI_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[26] = HI_expected_prev[26];
	end
	if (
		( HI_expected_prev[27] !== 1'bx ) && ( HI_prev[27] !== HI_expected_prev[27] )
		&& ((HI_expected_prev[27] !== last_HI_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[27] = HI_expected_prev[27];
	end
	if (
		( HI_expected_prev[28] !== 1'bx ) && ( HI_prev[28] !== HI_expected_prev[28] )
		&& ((HI_expected_prev[28] !== last_HI_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[28] = HI_expected_prev[28];
	end
	if (
		( HI_expected_prev[29] !== 1'bx ) && ( HI_prev[29] !== HI_expected_prev[29] )
		&& ((HI_expected_prev[29] !== last_HI_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[29] = HI_expected_prev[29];
	end
	if (
		( HI_expected_prev[30] !== 1'bx ) && ( HI_prev[30] !== HI_expected_prev[30] )
		&& ((HI_expected_prev[30] !== last_HI_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[30] = HI_expected_prev[30];
	end
	if (
		( HI_expected_prev[31] !== 1'bx ) && ( HI_prev[31] !== HI_expected_prev[31] )
		&& ((HI_expected_prev[31] !== last_HI_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HI[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HI_expected_prev);
		$display ("     Real value = %b", HI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HI_exp[31] = HI_expected_prev[31];
	end
	if (
		( Instruction_expected_prev[0] !== 1'bx ) && ( Instruction_prev[0] !== Instruction_expected_prev[0] )
		&& ((Instruction_expected_prev[0] !== last_Instruction_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[0] = Instruction_expected_prev[0];
	end
	if (
		( Instruction_expected_prev[1] !== 1'bx ) && ( Instruction_prev[1] !== Instruction_expected_prev[1] )
		&& ((Instruction_expected_prev[1] !== last_Instruction_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[1] = Instruction_expected_prev[1];
	end
	if (
		( Instruction_expected_prev[2] !== 1'bx ) && ( Instruction_prev[2] !== Instruction_expected_prev[2] )
		&& ((Instruction_expected_prev[2] !== last_Instruction_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[2] = Instruction_expected_prev[2];
	end
	if (
		( Instruction_expected_prev[3] !== 1'bx ) && ( Instruction_prev[3] !== Instruction_expected_prev[3] )
		&& ((Instruction_expected_prev[3] !== last_Instruction_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[3] = Instruction_expected_prev[3];
	end
	if (
		( Instruction_expected_prev[4] !== 1'bx ) && ( Instruction_prev[4] !== Instruction_expected_prev[4] )
		&& ((Instruction_expected_prev[4] !== last_Instruction_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[4] = Instruction_expected_prev[4];
	end
	if (
		( Instruction_expected_prev[5] !== 1'bx ) && ( Instruction_prev[5] !== Instruction_expected_prev[5] )
		&& ((Instruction_expected_prev[5] !== last_Instruction_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[5] = Instruction_expected_prev[5];
	end
	if (
		( Instruction_expected_prev[6] !== 1'bx ) && ( Instruction_prev[6] !== Instruction_expected_prev[6] )
		&& ((Instruction_expected_prev[6] !== last_Instruction_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[6] = Instruction_expected_prev[6];
	end
	if (
		( Instruction_expected_prev[7] !== 1'bx ) && ( Instruction_prev[7] !== Instruction_expected_prev[7] )
		&& ((Instruction_expected_prev[7] !== last_Instruction_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[7] = Instruction_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[8] !== 1'bx ) && ( Instruction_prev[8] !== Instruction_expected_prev[8] )
		&& ((Instruction_expected_prev[8] !== last_Instruction_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[8] = Instruction_expected_prev[8];
	end
	if (
		( Instruction_expected_prev[9] !== 1'bx ) && ( Instruction_prev[9] !== Instruction_expected_prev[9] )
		&& ((Instruction_expected_prev[9] !== last_Instruction_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[9] = Instruction_expected_prev[9];
	end
	if (
		( Instruction_expected_prev[10] !== 1'bx ) && ( Instruction_prev[10] !== Instruction_expected_prev[10] )
		&& ((Instruction_expected_prev[10] !== last_Instruction_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[10] = Instruction_expected_prev[10];
	end
	if (
		( Instruction_expected_prev[11] !== 1'bx ) && ( Instruction_prev[11] !== Instruction_expected_prev[11] )
		&& ((Instruction_expected_prev[11] !== last_Instruction_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[11] = Instruction_expected_prev[11];
	end
	if (
		( Instruction_expected_prev[12] !== 1'bx ) && ( Instruction_prev[12] !== Instruction_expected_prev[12] )
		&& ((Instruction_expected_prev[12] !== last_Instruction_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[12] = Instruction_expected_prev[12];
	end
	if (
		( Instruction_expected_prev[13] !== 1'bx ) && ( Instruction_prev[13] !== Instruction_expected_prev[13] )
		&& ((Instruction_expected_prev[13] !== last_Instruction_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[13] = Instruction_expected_prev[13];
	end
	if (
		( Instruction_expected_prev[14] !== 1'bx ) && ( Instruction_prev[14] !== Instruction_expected_prev[14] )
		&& ((Instruction_expected_prev[14] !== last_Instruction_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[14] = Instruction_expected_prev[14];
	end
	if (
		( Instruction_expected_prev[15] !== 1'bx ) && ( Instruction_prev[15] !== Instruction_expected_prev[15] )
		&& ((Instruction_expected_prev[15] !== last_Instruction_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[15] = Instruction_expected_prev[15];
	end
	if (
		( Instruction_expected_prev[16] !== 1'bx ) && ( Instruction_prev[16] !== Instruction_expected_prev[16] )
		&& ((Instruction_expected_prev[16] !== last_Instruction_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[16] = Instruction_expected_prev[16];
	end
	if (
		( Instruction_expected_prev[17] !== 1'bx ) && ( Instruction_prev[17] !== Instruction_expected_prev[17] )
		&& ((Instruction_expected_prev[17] !== last_Instruction_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[17] = Instruction_expected_prev[17];
	end
	if (
		( Instruction_expected_prev[18] !== 1'bx ) && ( Instruction_prev[18] !== Instruction_expected_prev[18] )
		&& ((Instruction_expected_prev[18] !== last_Instruction_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[18] = Instruction_expected_prev[18];
	end
	if (
		( Instruction_expected_prev[19] !== 1'bx ) && ( Instruction_prev[19] !== Instruction_expected_prev[19] )
		&& ((Instruction_expected_prev[19] !== last_Instruction_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[19] = Instruction_expected_prev[19];
	end
	if (
		( Instruction_expected_prev[20] !== 1'bx ) && ( Instruction_prev[20] !== Instruction_expected_prev[20] )
		&& ((Instruction_expected_prev[20] !== last_Instruction_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[20] = Instruction_expected_prev[20];
	end
	if (
		( Instruction_expected_prev[21] !== 1'bx ) && ( Instruction_prev[21] !== Instruction_expected_prev[21] )
		&& ((Instruction_expected_prev[21] !== last_Instruction_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[21] = Instruction_expected_prev[21];
	end
	if (
		( Instruction_expected_prev[22] !== 1'bx ) && ( Instruction_prev[22] !== Instruction_expected_prev[22] )
		&& ((Instruction_expected_prev[22] !== last_Instruction_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[22] = Instruction_expected_prev[22];
	end
	if (
		( Instruction_expected_prev[23] !== 1'bx ) && ( Instruction_prev[23] !== Instruction_expected_prev[23] )
		&& ((Instruction_expected_prev[23] !== last_Instruction_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[23] = Instruction_expected_prev[23];
	end
	if (
		( Instruction_expected_prev[24] !== 1'bx ) && ( Instruction_prev[24] !== Instruction_expected_prev[24] )
		&& ((Instruction_expected_prev[24] !== last_Instruction_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[24] = Instruction_expected_prev[24];
	end
	if (
		( Instruction_expected_prev[25] !== 1'bx ) && ( Instruction_prev[25] !== Instruction_expected_prev[25] )
		&& ((Instruction_expected_prev[25] !== last_Instruction_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[25] = Instruction_expected_prev[25];
	end
	if (
		( Instruction_expected_prev[26] !== 1'bx ) && ( Instruction_prev[26] !== Instruction_expected_prev[26] )
		&& ((Instruction_expected_prev[26] !== last_Instruction_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[26] = Instruction_expected_prev[26];
	end
	if (
		( Instruction_expected_prev[27] !== 1'bx ) && ( Instruction_prev[27] !== Instruction_expected_prev[27] )
		&& ((Instruction_expected_prev[27] !== last_Instruction_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[27] = Instruction_expected_prev[27];
	end
	if (
		( Instruction_expected_prev[28] !== 1'bx ) && ( Instruction_prev[28] !== Instruction_expected_prev[28] )
		&& ((Instruction_expected_prev[28] !== last_Instruction_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[28] = Instruction_expected_prev[28];
	end
	if (
		( Instruction_expected_prev[29] !== 1'bx ) && ( Instruction_prev[29] !== Instruction_expected_prev[29] )
		&& ((Instruction_expected_prev[29] !== last_Instruction_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[29] = Instruction_expected_prev[29];
	end
	if (
		( Instruction_expected_prev[30] !== 1'bx ) && ( Instruction_prev[30] !== Instruction_expected_prev[30] )
		&& ((Instruction_expected_prev[30] !== last_Instruction_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[30] = Instruction_expected_prev[30];
	end
	if (
		( Instruction_expected_prev[31] !== 1'bx ) && ( Instruction_prev[31] !== Instruction_expected_prev[31] )
		&& ((Instruction_expected_prev[31] !== last_Instruction_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Instruction_exp[31] = Instruction_expected_prev[31];
	end
	if (
		( JumpEX_expected_prev[0] !== 1'bx ) && ( JumpEX_prev[0] !== JumpEX_expected_prev[0] )
		&& ((JumpEX_expected_prev[0] !== last_JumpEX_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[0] = JumpEX_expected_prev[0];
	end
	if (
		( JumpEX_expected_prev[1] !== 1'bx ) && ( JumpEX_prev[1] !== JumpEX_expected_prev[1] )
		&& ((JumpEX_expected_prev[1] !== last_JumpEX_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[1] = JumpEX_expected_prev[1];
	end
	if (
		( JumpEX_expected_prev[2] !== 1'bx ) && ( JumpEX_prev[2] !== JumpEX_expected_prev[2] )
		&& ((JumpEX_expected_prev[2] !== last_JumpEX_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[2] = JumpEX_expected_prev[2];
	end
	if (
		( JumpEX_expected_prev[3] !== 1'bx ) && ( JumpEX_prev[3] !== JumpEX_expected_prev[3] )
		&& ((JumpEX_expected_prev[3] !== last_JumpEX_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[3] = JumpEX_expected_prev[3];
	end
	if (
		( JumpEX_expected_prev[4] !== 1'bx ) && ( JumpEX_prev[4] !== JumpEX_expected_prev[4] )
		&& ((JumpEX_expected_prev[4] !== last_JumpEX_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[4] = JumpEX_expected_prev[4];
	end
	if (
		( JumpEX_expected_prev[5] !== 1'bx ) && ( JumpEX_prev[5] !== JumpEX_expected_prev[5] )
		&& ((JumpEX_expected_prev[5] !== last_JumpEX_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[5] = JumpEX_expected_prev[5];
	end
	if (
		( JumpEX_expected_prev[6] !== 1'bx ) && ( JumpEX_prev[6] !== JumpEX_expected_prev[6] )
		&& ((JumpEX_expected_prev[6] !== last_JumpEX_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[6] = JumpEX_expected_prev[6];
	end
	if (
		( JumpEX_expected_prev[7] !== 1'bx ) && ( JumpEX_prev[7] !== JumpEX_expected_prev[7] )
		&& ((JumpEX_expected_prev[7] !== last_JumpEX_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[7] = JumpEX_expected_prev[7];
	end
	if (
		( JumpEX_expected_prev[8] !== 1'bx ) && ( JumpEX_prev[8] !== JumpEX_expected_prev[8] )
		&& ((JumpEX_expected_prev[8] !== last_JumpEX_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[8] = JumpEX_expected_prev[8];
	end
	if (
		( JumpEX_expected_prev[9] !== 1'bx ) && ( JumpEX_prev[9] !== JumpEX_expected_prev[9] )
		&& ((JumpEX_expected_prev[9] !== last_JumpEX_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[9] = JumpEX_expected_prev[9];
	end
	if (
		( JumpEX_expected_prev[10] !== 1'bx ) && ( JumpEX_prev[10] !== JumpEX_expected_prev[10] )
		&& ((JumpEX_expected_prev[10] !== last_JumpEX_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[10] = JumpEX_expected_prev[10];
	end
	if (
		( JumpEX_expected_prev[11] !== 1'bx ) && ( JumpEX_prev[11] !== JumpEX_expected_prev[11] )
		&& ((JumpEX_expected_prev[11] !== last_JumpEX_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[11] = JumpEX_expected_prev[11];
	end
	if (
		( JumpEX_expected_prev[12] !== 1'bx ) && ( JumpEX_prev[12] !== JumpEX_expected_prev[12] )
		&& ((JumpEX_expected_prev[12] !== last_JumpEX_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[12] = JumpEX_expected_prev[12];
	end
	if (
		( JumpEX_expected_prev[13] !== 1'bx ) && ( JumpEX_prev[13] !== JumpEX_expected_prev[13] )
		&& ((JumpEX_expected_prev[13] !== last_JumpEX_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[13] = JumpEX_expected_prev[13];
	end
	if (
		( JumpEX_expected_prev[14] !== 1'bx ) && ( JumpEX_prev[14] !== JumpEX_expected_prev[14] )
		&& ((JumpEX_expected_prev[14] !== last_JumpEX_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[14] = JumpEX_expected_prev[14];
	end
	if (
		( JumpEX_expected_prev[15] !== 1'bx ) && ( JumpEX_prev[15] !== JumpEX_expected_prev[15] )
		&& ((JumpEX_expected_prev[15] !== last_JumpEX_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[15] = JumpEX_expected_prev[15];
	end
	if (
		( JumpEX_expected_prev[16] !== 1'bx ) && ( JumpEX_prev[16] !== JumpEX_expected_prev[16] )
		&& ((JumpEX_expected_prev[16] !== last_JumpEX_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[16] = JumpEX_expected_prev[16];
	end
	if (
		( JumpEX_expected_prev[17] !== 1'bx ) && ( JumpEX_prev[17] !== JumpEX_expected_prev[17] )
		&& ((JumpEX_expected_prev[17] !== last_JumpEX_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[17] = JumpEX_expected_prev[17];
	end
	if (
		( JumpEX_expected_prev[18] !== 1'bx ) && ( JumpEX_prev[18] !== JumpEX_expected_prev[18] )
		&& ((JumpEX_expected_prev[18] !== last_JumpEX_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[18] = JumpEX_expected_prev[18];
	end
	if (
		( JumpEX_expected_prev[19] !== 1'bx ) && ( JumpEX_prev[19] !== JumpEX_expected_prev[19] )
		&& ((JumpEX_expected_prev[19] !== last_JumpEX_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[19] = JumpEX_expected_prev[19];
	end
	if (
		( JumpEX_expected_prev[20] !== 1'bx ) && ( JumpEX_prev[20] !== JumpEX_expected_prev[20] )
		&& ((JumpEX_expected_prev[20] !== last_JumpEX_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[20] = JumpEX_expected_prev[20];
	end
	if (
		( JumpEX_expected_prev[21] !== 1'bx ) && ( JumpEX_prev[21] !== JumpEX_expected_prev[21] )
		&& ((JumpEX_expected_prev[21] !== last_JumpEX_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[21] = JumpEX_expected_prev[21];
	end
	if (
		( JumpEX_expected_prev[22] !== 1'bx ) && ( JumpEX_prev[22] !== JumpEX_expected_prev[22] )
		&& ((JumpEX_expected_prev[22] !== last_JumpEX_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[22] = JumpEX_expected_prev[22];
	end
	if (
		( JumpEX_expected_prev[23] !== 1'bx ) && ( JumpEX_prev[23] !== JumpEX_expected_prev[23] )
		&& ((JumpEX_expected_prev[23] !== last_JumpEX_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[23] = JumpEX_expected_prev[23];
	end
	if (
		( JumpEX_expected_prev[24] !== 1'bx ) && ( JumpEX_prev[24] !== JumpEX_expected_prev[24] )
		&& ((JumpEX_expected_prev[24] !== last_JumpEX_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[24] = JumpEX_expected_prev[24];
	end
	if (
		( JumpEX_expected_prev[25] !== 1'bx ) && ( JumpEX_prev[25] !== JumpEX_expected_prev[25] )
		&& ((JumpEX_expected_prev[25] !== last_JumpEX_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[25] = JumpEX_expected_prev[25];
	end
	if (
		( JumpEX_expected_prev[26] !== 1'bx ) && ( JumpEX_prev[26] !== JumpEX_expected_prev[26] )
		&& ((JumpEX_expected_prev[26] !== last_JumpEX_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[26] = JumpEX_expected_prev[26];
	end
	if (
		( JumpEX_expected_prev[27] !== 1'bx ) && ( JumpEX_prev[27] !== JumpEX_expected_prev[27] )
		&& ((JumpEX_expected_prev[27] !== last_JumpEX_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[27] = JumpEX_expected_prev[27];
	end
	if (
		( JumpEX_expected_prev[28] !== 1'bx ) && ( JumpEX_prev[28] !== JumpEX_expected_prev[28] )
		&& ((JumpEX_expected_prev[28] !== last_JumpEX_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[28] = JumpEX_expected_prev[28];
	end
	if (
		( JumpEX_expected_prev[29] !== 1'bx ) && ( JumpEX_prev[29] !== JumpEX_expected_prev[29] )
		&& ((JumpEX_expected_prev[29] !== last_JumpEX_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[29] = JumpEX_expected_prev[29];
	end
	if (
		( JumpEX_expected_prev[30] !== 1'bx ) && ( JumpEX_prev[30] !== JumpEX_expected_prev[30] )
		&& ((JumpEX_expected_prev[30] !== last_JumpEX_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[30] = JumpEX_expected_prev[30];
	end
	if (
		( JumpEX_expected_prev[31] !== 1'bx ) && ( JumpEX_prev[31] !== JumpEX_expected_prev[31] )
		&& ((JumpEX_expected_prev[31] !== last_JumpEX_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JumpEX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JumpEX_expected_prev);
		$display ("     Real value = %b", JumpEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_JumpEX_exp[31] = JumpEX_expected_prev[31];
	end
	if (
		( LO_expected_prev[0] !== 1'bx ) && ( LO_prev[0] !== LO_expected_prev[0] )
		&& ((LO_expected_prev[0] !== last_LO_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[0] = LO_expected_prev[0];
	end
	if (
		( LO_expected_prev[1] !== 1'bx ) && ( LO_prev[1] !== LO_expected_prev[1] )
		&& ((LO_expected_prev[1] !== last_LO_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[1] = LO_expected_prev[1];
	end
	if (
		( LO_expected_prev[2] !== 1'bx ) && ( LO_prev[2] !== LO_expected_prev[2] )
		&& ((LO_expected_prev[2] !== last_LO_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[2] = LO_expected_prev[2];
	end
	if (
		( LO_expected_prev[3] !== 1'bx ) && ( LO_prev[3] !== LO_expected_prev[3] )
		&& ((LO_expected_prev[3] !== last_LO_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[3] = LO_expected_prev[3];
	end
	if (
		( LO_expected_prev[4] !== 1'bx ) && ( LO_prev[4] !== LO_expected_prev[4] )
		&& ((LO_expected_prev[4] !== last_LO_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[4] = LO_expected_prev[4];
	end
	if (
		( LO_expected_prev[5] !== 1'bx ) && ( LO_prev[5] !== LO_expected_prev[5] )
		&& ((LO_expected_prev[5] !== last_LO_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[5] = LO_expected_prev[5];
	end
	if (
		( LO_expected_prev[6] !== 1'bx ) && ( LO_prev[6] !== LO_expected_prev[6] )
		&& ((LO_expected_prev[6] !== last_LO_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[6] = LO_expected_prev[6];
	end
	if (
		( LO_expected_prev[7] !== 1'bx ) && ( LO_prev[7] !== LO_expected_prev[7] )
		&& ((LO_expected_prev[7] !== last_LO_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[7] = LO_expected_prev[7];
	end
	if (
		( LO_expected_prev[8] !== 1'bx ) && ( LO_prev[8] !== LO_expected_prev[8] )
		&& ((LO_expected_prev[8] !== last_LO_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[8] = LO_expected_prev[8];
	end
	if (
		( LO_expected_prev[9] !== 1'bx ) && ( LO_prev[9] !== LO_expected_prev[9] )
		&& ((LO_expected_prev[9] !== last_LO_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[9] = LO_expected_prev[9];
	end
	if (
		( LO_expected_prev[10] !== 1'bx ) && ( LO_prev[10] !== LO_expected_prev[10] )
		&& ((LO_expected_prev[10] !== last_LO_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[10] = LO_expected_prev[10];
	end
	if (
		( LO_expected_prev[11] !== 1'bx ) && ( LO_prev[11] !== LO_expected_prev[11] )
		&& ((LO_expected_prev[11] !== last_LO_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[11] = LO_expected_prev[11];
	end
	if (
		( LO_expected_prev[12] !== 1'bx ) && ( LO_prev[12] !== LO_expected_prev[12] )
		&& ((LO_expected_prev[12] !== last_LO_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[12] = LO_expected_prev[12];
	end
	if (
		( LO_expected_prev[13] !== 1'bx ) && ( LO_prev[13] !== LO_expected_prev[13] )
		&& ((LO_expected_prev[13] !== last_LO_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[13] = LO_expected_prev[13];
	end
	if (
		( LO_expected_prev[14] !== 1'bx ) && ( LO_prev[14] !== LO_expected_prev[14] )
		&& ((LO_expected_prev[14] !== last_LO_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[14] = LO_expected_prev[14];
	end
	if (
		( LO_expected_prev[15] !== 1'bx ) && ( LO_prev[15] !== LO_expected_prev[15] )
		&& ((LO_expected_prev[15] !== last_LO_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[15] = LO_expected_prev[15];
	end
	if (
		( LO_expected_prev[16] !== 1'bx ) && ( LO_prev[16] !== LO_expected_prev[16] )
		&& ((LO_expected_prev[16] !== last_LO_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[16] = LO_expected_prev[16];
	end
	if (
		( LO_expected_prev[17] !== 1'bx ) && ( LO_prev[17] !== LO_expected_prev[17] )
		&& ((LO_expected_prev[17] !== last_LO_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[17] = LO_expected_prev[17];
	end
	if (
		( LO_expected_prev[18] !== 1'bx ) && ( LO_prev[18] !== LO_expected_prev[18] )
		&& ((LO_expected_prev[18] !== last_LO_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[18] = LO_expected_prev[18];
	end
	if (
		( LO_expected_prev[19] !== 1'bx ) && ( LO_prev[19] !== LO_expected_prev[19] )
		&& ((LO_expected_prev[19] !== last_LO_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[19] = LO_expected_prev[19];
	end
	if (
		( LO_expected_prev[20] !== 1'bx ) && ( LO_prev[20] !== LO_expected_prev[20] )
		&& ((LO_expected_prev[20] !== last_LO_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[20] = LO_expected_prev[20];
	end
	if (
		( LO_expected_prev[21] !== 1'bx ) && ( LO_prev[21] !== LO_expected_prev[21] )
		&& ((LO_expected_prev[21] !== last_LO_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[21] = LO_expected_prev[21];
	end
	if (
		( LO_expected_prev[22] !== 1'bx ) && ( LO_prev[22] !== LO_expected_prev[22] )
		&& ((LO_expected_prev[22] !== last_LO_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[22] = LO_expected_prev[22];
	end
	if (
		( LO_expected_prev[23] !== 1'bx ) && ( LO_prev[23] !== LO_expected_prev[23] )
		&& ((LO_expected_prev[23] !== last_LO_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[23] = LO_expected_prev[23];
	end
	if (
		( LO_expected_prev[24] !== 1'bx ) && ( LO_prev[24] !== LO_expected_prev[24] )
		&& ((LO_expected_prev[24] !== last_LO_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[24] = LO_expected_prev[24];
	end
	if (
		( LO_expected_prev[25] !== 1'bx ) && ( LO_prev[25] !== LO_expected_prev[25] )
		&& ((LO_expected_prev[25] !== last_LO_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[25] = LO_expected_prev[25];
	end
	if (
		( LO_expected_prev[26] !== 1'bx ) && ( LO_prev[26] !== LO_expected_prev[26] )
		&& ((LO_expected_prev[26] !== last_LO_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[26] = LO_expected_prev[26];
	end
	if (
		( LO_expected_prev[27] !== 1'bx ) && ( LO_prev[27] !== LO_expected_prev[27] )
		&& ((LO_expected_prev[27] !== last_LO_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[27] = LO_expected_prev[27];
	end
	if (
		( LO_expected_prev[28] !== 1'bx ) && ( LO_prev[28] !== LO_expected_prev[28] )
		&& ((LO_expected_prev[28] !== last_LO_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[28] = LO_expected_prev[28];
	end
	if (
		( LO_expected_prev[29] !== 1'bx ) && ( LO_prev[29] !== LO_expected_prev[29] )
		&& ((LO_expected_prev[29] !== last_LO_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[29] = LO_expected_prev[29];
	end
	if (
		( LO_expected_prev[30] !== 1'bx ) && ( LO_prev[30] !== LO_expected_prev[30] )
		&& ((LO_expected_prev[30] !== last_LO_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[30] = LO_expected_prev[30];
	end
	if (
		( LO_expected_prev[31] !== 1'bx ) && ( LO_prev[31] !== LO_expected_prev[31] )
		&& ((LO_expected_prev[31] !== last_LO_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LO_expected_prev);
		$display ("     Real value = %b", LO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LO_exp[31] = LO_expected_prev[31];
	end
	if (
		( opALU_expected_prev[0] !== 1'bx ) && ( opALU_prev[0] !== opALU_expected_prev[0] )
		&& ((opALU_expected_prev[0] !== last_opALU_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opALU_expected_prev);
		$display ("     Real value = %b", opALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opALU_exp[0] = opALU_expected_prev[0];
	end
	if (
		( opALU_expected_prev[1] !== 1'bx ) && ( opALU_prev[1] !== opALU_expected_prev[1] )
		&& ((opALU_expected_prev[1] !== last_opALU_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opALU_expected_prev);
		$display ("     Real value = %b", opALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opALU_exp[1] = opALU_expected_prev[1];
	end
	if (
		( opALU_expected_prev[2] !== 1'bx ) && ( opALU_prev[2] !== opALU_expected_prev[2] )
		&& ((opALU_expected_prev[2] !== last_opALU_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opALU_expected_prev);
		$display ("     Real value = %b", opALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opALU_exp[2] = opALU_expected_prev[2];
	end
	if (
		( opALU_expected_prev[3] !== 1'bx ) && ( opALU_prev[3] !== opALU_expected_prev[3] )
		&& ((opALU_expected_prev[3] !== last_opALU_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opALU_expected_prev);
		$display ("     Real value = %b", opALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opALU_exp[3] = opALU_expected_prev[3];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end
	if (
		( PC/EX_expected_prev[0] !== 1'bx ) && ( PC/EX_prev[0] !== PC/EX_expected_prev[0] )
		&& ((PC/EX_expected_prev[0] !== last_PC/EX_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[0] = PC/EX_expected_prev[0];
	end
	if (
		( PC/EX_expected_prev[1] !== 1'bx ) && ( PC/EX_prev[1] !== PC/EX_expected_prev[1] )
		&& ((PC/EX_expected_prev[1] !== last_PC/EX_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[1] = PC/EX_expected_prev[1];
	end
	if (
		( PC/EX_expected_prev[2] !== 1'bx ) && ( PC/EX_prev[2] !== PC/EX_expected_prev[2] )
		&& ((PC/EX_expected_prev[2] !== last_PC/EX_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[2] = PC/EX_expected_prev[2];
	end
	if (
		( PC/EX_expected_prev[3] !== 1'bx ) && ( PC/EX_prev[3] !== PC/EX_expected_prev[3] )
		&& ((PC/EX_expected_prev[3] !== last_PC/EX_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[3] = PC/EX_expected_prev[3];
	end
	if (
		( PC/EX_expected_prev[4] !== 1'bx ) && ( PC/EX_prev[4] !== PC/EX_expected_prev[4] )
		&& ((PC/EX_expected_prev[4] !== last_PC/EX_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[4] = PC/EX_expected_prev[4];
	end
	if (
		( PC/EX_expected_prev[5] !== 1'bx ) && ( PC/EX_prev[5] !== PC/EX_expected_prev[5] )
		&& ((PC/EX_expected_prev[5] !== last_PC/EX_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[5] = PC/EX_expected_prev[5];
	end
	if (
		( PC/EX_expected_prev[6] !== 1'bx ) && ( PC/EX_prev[6] !== PC/EX_expected_prev[6] )
		&& ((PC/EX_expected_prev[6] !== last_PC/EX_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[6] = PC/EX_expected_prev[6];
	end
	if (
		( PC/EX_expected_prev[7] !== 1'bx ) && ( PC/EX_prev[7] !== PC/EX_expected_prev[7] )
		&& ((PC/EX_expected_prev[7] !== last_PC/EX_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[7] = PC/EX_expected_prev[7];
	end
	if (
		( PC/EX_expected_prev[8] !== 1'bx ) && ( PC/EX_prev[8] !== PC/EX_expected_prev[8] )
		&& ((PC/EX_expected_prev[8] !== last_PC/EX_exp[8]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[8] = PC/EX_expected_prev[8];
	end
	if (
		( PC/EX_expected_prev[9] !== 1'bx ) && ( PC/EX_prev[9] !== PC/EX_expected_prev[9] )
		&& ((PC/EX_expected_prev[9] !== last_PC/EX_exp[9]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[9] = PC/EX_expected_prev[9];
	end
	if (
		( PC/EX_expected_prev[10] !== 1'bx ) && ( PC/EX_prev[10] !== PC/EX_expected_prev[10] )
		&& ((PC/EX_expected_prev[10] !== last_PC/EX_exp[10]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[10] = PC/EX_expected_prev[10];
	end
	if (
		( PC/EX_expected_prev[11] !== 1'bx ) && ( PC/EX_prev[11] !== PC/EX_expected_prev[11] )
		&& ((PC/EX_expected_prev[11] !== last_PC/EX_exp[11]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[11] = PC/EX_expected_prev[11];
	end
	if (
		( PC/EX_expected_prev[12] !== 1'bx ) && ( PC/EX_prev[12] !== PC/EX_expected_prev[12] )
		&& ((PC/EX_expected_prev[12] !== last_PC/EX_exp[12]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[12] = PC/EX_expected_prev[12];
	end
	if (
		( PC/EX_expected_prev[13] !== 1'bx ) && ( PC/EX_prev[13] !== PC/EX_expected_prev[13] )
		&& ((PC/EX_expected_prev[13] !== last_PC/EX_exp[13]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[13] = PC/EX_expected_prev[13];
	end
	if (
		( PC/EX_expected_prev[14] !== 1'bx ) && ( PC/EX_prev[14] !== PC/EX_expected_prev[14] )
		&& ((PC/EX_expected_prev[14] !== last_PC/EX_exp[14]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[14] = PC/EX_expected_prev[14];
	end
	if (
		( PC/EX_expected_prev[15] !== 1'bx ) && ( PC/EX_prev[15] !== PC/EX_expected_prev[15] )
		&& ((PC/EX_expected_prev[15] !== last_PC/EX_exp[15]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[15] = PC/EX_expected_prev[15];
	end
	if (
		( PC/EX_expected_prev[16] !== 1'bx ) && ( PC/EX_prev[16] !== PC/EX_expected_prev[16] )
		&& ((PC/EX_expected_prev[16] !== last_PC/EX_exp[16]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[16] = PC/EX_expected_prev[16];
	end
	if (
		( PC/EX_expected_prev[17] !== 1'bx ) && ( PC/EX_prev[17] !== PC/EX_expected_prev[17] )
		&& ((PC/EX_expected_prev[17] !== last_PC/EX_exp[17]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[17] = PC/EX_expected_prev[17];
	end
	if (
		( PC/EX_expected_prev[18] !== 1'bx ) && ( PC/EX_prev[18] !== PC/EX_expected_prev[18] )
		&& ((PC/EX_expected_prev[18] !== last_PC/EX_exp[18]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[18] = PC/EX_expected_prev[18];
	end
	if (
		( PC/EX_expected_prev[19] !== 1'bx ) && ( PC/EX_prev[19] !== PC/EX_expected_prev[19] )
		&& ((PC/EX_expected_prev[19] !== last_PC/EX_exp[19]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[19] = PC/EX_expected_prev[19];
	end
	if (
		( PC/EX_expected_prev[20] !== 1'bx ) && ( PC/EX_prev[20] !== PC/EX_expected_prev[20] )
		&& ((PC/EX_expected_prev[20] !== last_PC/EX_exp[20]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[20] = PC/EX_expected_prev[20];
	end
	if (
		( PC/EX_expected_prev[21] !== 1'bx ) && ( PC/EX_prev[21] !== PC/EX_expected_prev[21] )
		&& ((PC/EX_expected_prev[21] !== last_PC/EX_exp[21]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[21] = PC/EX_expected_prev[21];
	end
	if (
		( PC/EX_expected_prev[22] !== 1'bx ) && ( PC/EX_prev[22] !== PC/EX_expected_prev[22] )
		&& ((PC/EX_expected_prev[22] !== last_PC/EX_exp[22]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[22] = PC/EX_expected_prev[22];
	end
	if (
		( PC/EX_expected_prev[23] !== 1'bx ) && ( PC/EX_prev[23] !== PC/EX_expected_prev[23] )
		&& ((PC/EX_expected_prev[23] !== last_PC/EX_exp[23]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[23] = PC/EX_expected_prev[23];
	end
	if (
		( PC/EX_expected_prev[24] !== 1'bx ) && ( PC/EX_prev[24] !== PC/EX_expected_prev[24] )
		&& ((PC/EX_expected_prev[24] !== last_PC/EX_exp[24]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[24] = PC/EX_expected_prev[24];
	end
	if (
		( PC/EX_expected_prev[25] !== 1'bx ) && ( PC/EX_prev[25] !== PC/EX_expected_prev[25] )
		&& ((PC/EX_expected_prev[25] !== last_PC/EX_exp[25]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[25] = PC/EX_expected_prev[25];
	end
	if (
		( PC/EX_expected_prev[26] !== 1'bx ) && ( PC/EX_prev[26] !== PC/EX_expected_prev[26] )
		&& ((PC/EX_expected_prev[26] !== last_PC/EX_exp[26]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[26] = PC/EX_expected_prev[26];
	end
	if (
		( PC/EX_expected_prev[27] !== 1'bx ) && ( PC/EX_prev[27] !== PC/EX_expected_prev[27] )
		&& ((PC/EX_expected_prev[27] !== last_PC/EX_exp[27]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[27] = PC/EX_expected_prev[27];
	end
	if (
		( PC/EX_expected_prev[28] !== 1'bx ) && ( PC/EX_prev[28] !== PC/EX_expected_prev[28] )
		&& ((PC/EX_expected_prev[28] !== last_PC/EX_exp[28]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[28] = PC/EX_expected_prev[28];
	end
	if (
		( PC/EX_expected_prev[29] !== 1'bx ) && ( PC/EX_prev[29] !== PC/EX_expected_prev[29] )
		&& ((PC/EX_expected_prev[29] !== last_PC/EX_exp[29]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[29] = PC/EX_expected_prev[29];
	end
	if (
		( PC/EX_expected_prev[30] !== 1'bx ) && ( PC/EX_prev[30] !== PC/EX_expected_prev[30] )
		&& ((PC/EX_expected_prev[30] !== last_PC/EX_exp[30]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[30] = PC/EX_expected_prev[30];
	end
	if (
		( PC/EX_expected_prev[31] !== 1'bx ) && ( PC/EX_prev[31] !== PC/EX_expected_prev[31] )
		&& ((PC/EX_expected_prev[31] !== last_PC/EX_exp[31]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC/EX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC/EX_expected_prev);
		$display ("     Real value = %b", PC/EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC/EX_exp[31] = PC/EX_expected_prev[31];
	end
	if (
		( regDestino_expected_prev[0] !== 1'bx ) && ( regDestino_prev[0] !== regDestino_expected_prev[0] )
		&& ((regDestino_expected_prev[0] !== last_regDestino_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDestino[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDestino_expected_prev);
		$display ("     Real value = %b", regDestino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_regDestino_exp[0] = regDestino_expected_prev[0];
	end
	if (
		( regDestino_expected_prev[1] !== 1'bx ) && ( regDestino_prev[1] !== regDestino_expected_prev[1] )
		&& ((regDestino_expected_prev[1] !== last_regDestino_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDestino[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDestino_expected_prev);
		$display ("     Real value = %b", regDestino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_regDestino_exp[1] = regDestino_expected_prev[1];
	end
	if (
		( regDestino_expected_prev[2] !== 1'bx ) && ( regDestino_prev[2] !== regDestino_expected_prev[2] )
		&& ((regDestino_expected_prev[2] !== last_regDestino_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDestino[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDestino_expected_prev);
		$display ("     Real value = %b", regDestino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_regDestino_exp[2] = regDestino_expected_prev[2];
	end
	if (
		( regDestino_expected_prev[3] !== 1'bx ) && ( regDestino_prev[3] !== regDestino_expected_prev[3] )
		&& ((regDestino_expected_prev[3] !== last_regDestino_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDestino[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDestino_expected_prev);
		$display ("     Real value = %b", regDestino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_regDestino_exp[3] = regDestino_expected_prev[3];
	end
	if (
		( regDestino_expected_prev[4] !== 1'bx ) && ( regDestino_prev[4] !== regDestino_expected_prev[4] )
		&& ((regDestino_expected_prev[4] !== last_regDestino_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDestino[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDestino_expected_prev);
		$display ("     Real value = %b", regDestino_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_regDestino_exp[4] = regDestino_expected_prev[4];
	end
	if (
		( RegWriteWB_expected_prev !== 1'bx ) && ( RegWriteWB_prev !== RegWriteWB_expected_prev )
		&& ((RegWriteWB_expected_prev !== last_RegWriteWB_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWriteWB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWriteWB_expected_prev);
		$display ("     Real value = %b", RegWriteWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RegWriteWB_exp = RegWriteWB_expected_prev;
	end
	if (
		( saidaMemDados_expected_prev[0] !== 1'bx ) && ( saidaMemDados_prev[0] !== saidaMemDados_expected_prev[0] )
		&& ((saidaMemDados_expected_prev[0] !== last_saidaMemDados_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[0] = saidaMemDados_expected_prev[0];
	end
	if (
		( saidaMemDados_expected_prev[1] !== 1'bx ) && ( saidaMemDados_prev[1] !== saidaMemDados_expected_prev[1] )
		&& ((saidaMemDados_expected_prev[1] !== last_saidaMemDados_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[1] = saidaMemDados_expected_prev[1];
	end
	if (
		( saidaMemDados_expected_prev[2] !== 1'bx ) && ( saidaMemDados_prev[2] !== saidaMemDados_expected_prev[2] )
		&& ((saidaMemDados_expected_prev[2] !== last_saidaMemDados_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[2] = saidaMemDados_expected_prev[2];
	end
	if (
		( saidaMemDados_expected_prev[3] !== 1'bx ) && ( saidaMemDados_prev[3] !== saidaMemDados_expected_prev[3] )
		&& ((saidaMemDados_expected_prev[3] !== last_saidaMemDados_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[3] = saidaMemDados_expected_prev[3];
	end
	if (
		( saidaMemDados_expected_prev[4] !== 1'bx ) && ( saidaMemDados_prev[4] !== saidaMemDados_expected_prev[4] )
		&& ((saidaMemDados_expected_prev[4] !== last_saidaMemDados_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[4] = saidaMemDados_expected_prev[4];
	end
	if (
		( saidaMemDados_expected_prev[5] !== 1'bx ) && ( saidaMemDados_prev[5] !== saidaMemDados_expected_prev[5] )
		&& ((saidaMemDados_expected_prev[5] !== last_saidaMemDados_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[5] = saidaMemDados_expected_prev[5];
	end
	if (
		( saidaMemDados_expected_prev[6] !== 1'bx ) && ( saidaMemDados_prev[6] !== saidaMemDados_expected_prev[6] )
		&& ((saidaMemDados_expected_prev[6] !== last_saidaMemDados_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[6] = saidaMemDados_expected_prev[6];
	end
	if (
		( saidaMemDados_expected_prev[7] !== 1'bx ) && ( saidaMemDados_prev[7] !== saidaMemDados_expected_prev[7] )
		&& ((saidaMemDados_expected_prev[7] !== last_saidaMemDados_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[7] = saidaMemDados_expected_prev[7];
	end
	if (
		( saidaMemDados_expected_prev[8] !== 1'bx ) && ( saidaMemDados_prev[8] !== saidaMemDados_expected_prev[8] )
		&& ((saidaMemDados_expected_prev[8] !== last_saidaMemDados_exp[8]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[8] = saidaMemDados_expected_prev[8];
	end
	if (
		( saidaMemDados_expected_prev[9] !== 1'bx ) && ( saidaMemDados_prev[9] !== saidaMemDados_expected_prev[9] )
		&& ((saidaMemDados_expected_prev[9] !== last_saidaMemDados_exp[9]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[9] = saidaMemDados_expected_prev[9];
	end
	if (
		( saidaMemDados_expected_prev[10] !== 1'bx ) && ( saidaMemDados_prev[10] !== saidaMemDados_expected_prev[10] )
		&& ((saidaMemDados_expected_prev[10] !== last_saidaMemDados_exp[10]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[10] = saidaMemDados_expected_prev[10];
	end
	if (
		( saidaMemDados_expected_prev[11] !== 1'bx ) && ( saidaMemDados_prev[11] !== saidaMemDados_expected_prev[11] )
		&& ((saidaMemDados_expected_prev[11] !== last_saidaMemDados_exp[11]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[11] = saidaMemDados_expected_prev[11];
	end
	if (
		( saidaMemDados_expected_prev[12] !== 1'bx ) && ( saidaMemDados_prev[12] !== saidaMemDados_expected_prev[12] )
		&& ((saidaMemDados_expected_prev[12] !== last_saidaMemDados_exp[12]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[12] = saidaMemDados_expected_prev[12];
	end
	if (
		( saidaMemDados_expected_prev[13] !== 1'bx ) && ( saidaMemDados_prev[13] !== saidaMemDados_expected_prev[13] )
		&& ((saidaMemDados_expected_prev[13] !== last_saidaMemDados_exp[13]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[13] = saidaMemDados_expected_prev[13];
	end
	if (
		( saidaMemDados_expected_prev[14] !== 1'bx ) && ( saidaMemDados_prev[14] !== saidaMemDados_expected_prev[14] )
		&& ((saidaMemDados_expected_prev[14] !== last_saidaMemDados_exp[14]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[14] = saidaMemDados_expected_prev[14];
	end
	if (
		( saidaMemDados_expected_prev[15] !== 1'bx ) && ( saidaMemDados_prev[15] !== saidaMemDados_expected_prev[15] )
		&& ((saidaMemDados_expected_prev[15] !== last_saidaMemDados_exp[15]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[15] = saidaMemDados_expected_prev[15];
	end
	if (
		( saidaMemDados_expected_prev[16] !== 1'bx ) && ( saidaMemDados_prev[16] !== saidaMemDados_expected_prev[16] )
		&& ((saidaMemDados_expected_prev[16] !== last_saidaMemDados_exp[16]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[16] = saidaMemDados_expected_prev[16];
	end
	if (
		( saidaMemDados_expected_prev[17] !== 1'bx ) && ( saidaMemDados_prev[17] !== saidaMemDados_expected_prev[17] )
		&& ((saidaMemDados_expected_prev[17] !== last_saidaMemDados_exp[17]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[17] = saidaMemDados_expected_prev[17];
	end
	if (
		( saidaMemDados_expected_prev[18] !== 1'bx ) && ( saidaMemDados_prev[18] !== saidaMemDados_expected_prev[18] )
		&& ((saidaMemDados_expected_prev[18] !== last_saidaMemDados_exp[18]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[18] = saidaMemDados_expected_prev[18];
	end
	if (
		( saidaMemDados_expected_prev[19] !== 1'bx ) && ( saidaMemDados_prev[19] !== saidaMemDados_expected_prev[19] )
		&& ((saidaMemDados_expected_prev[19] !== last_saidaMemDados_exp[19]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[19] = saidaMemDados_expected_prev[19];
	end
	if (
		( saidaMemDados_expected_prev[20] !== 1'bx ) && ( saidaMemDados_prev[20] !== saidaMemDados_expected_prev[20] )
		&& ((saidaMemDados_expected_prev[20] !== last_saidaMemDados_exp[20]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[20] = saidaMemDados_expected_prev[20];
	end
	if (
		( saidaMemDados_expected_prev[21] !== 1'bx ) && ( saidaMemDados_prev[21] !== saidaMemDados_expected_prev[21] )
		&& ((saidaMemDados_expected_prev[21] !== last_saidaMemDados_exp[21]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[21] = saidaMemDados_expected_prev[21];
	end
	if (
		( saidaMemDados_expected_prev[22] !== 1'bx ) && ( saidaMemDados_prev[22] !== saidaMemDados_expected_prev[22] )
		&& ((saidaMemDados_expected_prev[22] !== last_saidaMemDados_exp[22]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[22] = saidaMemDados_expected_prev[22];
	end
	if (
		( saidaMemDados_expected_prev[23] !== 1'bx ) && ( saidaMemDados_prev[23] !== saidaMemDados_expected_prev[23] )
		&& ((saidaMemDados_expected_prev[23] !== last_saidaMemDados_exp[23]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[23] = saidaMemDados_expected_prev[23];
	end
	if (
		( saidaMemDados_expected_prev[24] !== 1'bx ) && ( saidaMemDados_prev[24] !== saidaMemDados_expected_prev[24] )
		&& ((saidaMemDados_expected_prev[24] !== last_saidaMemDados_exp[24]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[24] = saidaMemDados_expected_prev[24];
	end
	if (
		( saidaMemDados_expected_prev[25] !== 1'bx ) && ( saidaMemDados_prev[25] !== saidaMemDados_expected_prev[25] )
		&& ((saidaMemDados_expected_prev[25] !== last_saidaMemDados_exp[25]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[25] = saidaMemDados_expected_prev[25];
	end
	if (
		( saidaMemDados_expected_prev[26] !== 1'bx ) && ( saidaMemDados_prev[26] !== saidaMemDados_expected_prev[26] )
		&& ((saidaMemDados_expected_prev[26] !== last_saidaMemDados_exp[26]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[26] = saidaMemDados_expected_prev[26];
	end
	if (
		( saidaMemDados_expected_prev[27] !== 1'bx ) && ( saidaMemDados_prev[27] !== saidaMemDados_expected_prev[27] )
		&& ((saidaMemDados_expected_prev[27] !== last_saidaMemDados_exp[27]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[27] = saidaMemDados_expected_prev[27];
	end
	if (
		( saidaMemDados_expected_prev[28] !== 1'bx ) && ( saidaMemDados_prev[28] !== saidaMemDados_expected_prev[28] )
		&& ((saidaMemDados_expected_prev[28] !== last_saidaMemDados_exp[28]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[28] = saidaMemDados_expected_prev[28];
	end
	if (
		( saidaMemDados_expected_prev[29] !== 1'bx ) && ( saidaMemDados_prev[29] !== saidaMemDados_expected_prev[29] )
		&& ((saidaMemDados_expected_prev[29] !== last_saidaMemDados_exp[29]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[29] = saidaMemDados_expected_prev[29];
	end
	if (
		( saidaMemDados_expected_prev[30] !== 1'bx ) && ( saidaMemDados_prev[30] !== saidaMemDados_expected_prev[30] )
		&& ((saidaMemDados_expected_prev[30] !== last_saidaMemDados_exp[30]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[30] = saidaMemDados_expected_prev[30];
	end
	if (
		( saidaMemDados_expected_prev[31] !== 1'bx ) && ( saidaMemDados_prev[31] !== saidaMemDados_expected_prev[31] )
		&& ((saidaMemDados_expected_prev[31] !== last_saidaMemDados_exp[31]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaMemDados[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaMemDados_expected_prev);
		$display ("     Real value = %b", saidaMemDados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saidaMemDados_exp[31] = saidaMemDados_expected_prev[31];
	end
	if (
		( SaidaWB_expected_prev[0] !== 1'bx ) && ( SaidaWB_prev[0] !== SaidaWB_expected_prev[0] )
		&& ((SaidaWB_expected_prev[0] !== last_SaidaWB_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[0] = SaidaWB_expected_prev[0];
	end
	if (
		( SaidaWB_expected_prev[1] !== 1'bx ) && ( SaidaWB_prev[1] !== SaidaWB_expected_prev[1] )
		&& ((SaidaWB_expected_prev[1] !== last_SaidaWB_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[1] = SaidaWB_expected_prev[1];
	end
	if (
		( SaidaWB_expected_prev[2] !== 1'bx ) && ( SaidaWB_prev[2] !== SaidaWB_expected_prev[2] )
		&& ((SaidaWB_expected_prev[2] !== last_SaidaWB_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[2] = SaidaWB_expected_prev[2];
	end
	if (
		( SaidaWB_expected_prev[3] !== 1'bx ) && ( SaidaWB_prev[3] !== SaidaWB_expected_prev[3] )
		&& ((SaidaWB_expected_prev[3] !== last_SaidaWB_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[3] = SaidaWB_expected_prev[3];
	end
	if (
		( SaidaWB_expected_prev[4] !== 1'bx ) && ( SaidaWB_prev[4] !== SaidaWB_expected_prev[4] )
		&& ((SaidaWB_expected_prev[4] !== last_SaidaWB_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[4] = SaidaWB_expected_prev[4];
	end
	if (
		( SaidaWB_expected_prev[5] !== 1'bx ) && ( SaidaWB_prev[5] !== SaidaWB_expected_prev[5] )
		&& ((SaidaWB_expected_prev[5] !== last_SaidaWB_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[5] = SaidaWB_expected_prev[5];
	end
	if (
		( SaidaWB_expected_prev[6] !== 1'bx ) && ( SaidaWB_prev[6] !== SaidaWB_expected_prev[6] )
		&& ((SaidaWB_expected_prev[6] !== last_SaidaWB_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[6] = SaidaWB_expected_prev[6];
	end
	if (
		( SaidaWB_expected_prev[7] !== 1'bx ) && ( SaidaWB_prev[7] !== SaidaWB_expected_prev[7] )
		&& ((SaidaWB_expected_prev[7] !== last_SaidaWB_exp[7]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[7] = SaidaWB_expected_prev[7];
	end
	if (
		( SaidaWB_expected_prev[8] !== 1'bx ) && ( SaidaWB_prev[8] !== SaidaWB_expected_prev[8] )
		&& ((SaidaWB_expected_prev[8] !== last_SaidaWB_exp[8]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[8] = SaidaWB_expected_prev[8];
	end
	if (
		( SaidaWB_expected_prev[9] !== 1'bx ) && ( SaidaWB_prev[9] !== SaidaWB_expected_prev[9] )
		&& ((SaidaWB_expected_prev[9] !== last_SaidaWB_exp[9]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[9] = SaidaWB_expected_prev[9];
	end
	if (
		( SaidaWB_expected_prev[10] !== 1'bx ) && ( SaidaWB_prev[10] !== SaidaWB_expected_prev[10] )
		&& ((SaidaWB_expected_prev[10] !== last_SaidaWB_exp[10]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[10] = SaidaWB_expected_prev[10];
	end
	if (
		( SaidaWB_expected_prev[11] !== 1'bx ) && ( SaidaWB_prev[11] !== SaidaWB_expected_prev[11] )
		&& ((SaidaWB_expected_prev[11] !== last_SaidaWB_exp[11]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[11] = SaidaWB_expected_prev[11];
	end
	if (
		( SaidaWB_expected_prev[12] !== 1'bx ) && ( SaidaWB_prev[12] !== SaidaWB_expected_prev[12] )
		&& ((SaidaWB_expected_prev[12] !== last_SaidaWB_exp[12]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[12] = SaidaWB_expected_prev[12];
	end
	if (
		( SaidaWB_expected_prev[13] !== 1'bx ) && ( SaidaWB_prev[13] !== SaidaWB_expected_prev[13] )
		&& ((SaidaWB_expected_prev[13] !== last_SaidaWB_exp[13]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[13] = SaidaWB_expected_prev[13];
	end
	if (
		( SaidaWB_expected_prev[14] !== 1'bx ) && ( SaidaWB_prev[14] !== SaidaWB_expected_prev[14] )
		&& ((SaidaWB_expected_prev[14] !== last_SaidaWB_exp[14]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[14] = SaidaWB_expected_prev[14];
	end
	if (
		( SaidaWB_expected_prev[15] !== 1'bx ) && ( SaidaWB_prev[15] !== SaidaWB_expected_prev[15] )
		&& ((SaidaWB_expected_prev[15] !== last_SaidaWB_exp[15]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[15] = SaidaWB_expected_prev[15];
	end
	if (
		( SaidaWB_expected_prev[16] !== 1'bx ) && ( SaidaWB_prev[16] !== SaidaWB_expected_prev[16] )
		&& ((SaidaWB_expected_prev[16] !== last_SaidaWB_exp[16]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[16] = SaidaWB_expected_prev[16];
	end
	if (
		( SaidaWB_expected_prev[17] !== 1'bx ) && ( SaidaWB_prev[17] !== SaidaWB_expected_prev[17] )
		&& ((SaidaWB_expected_prev[17] !== last_SaidaWB_exp[17]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[17] = SaidaWB_expected_prev[17];
	end
	if (
		( SaidaWB_expected_prev[18] !== 1'bx ) && ( SaidaWB_prev[18] !== SaidaWB_expected_prev[18] )
		&& ((SaidaWB_expected_prev[18] !== last_SaidaWB_exp[18]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[18] = SaidaWB_expected_prev[18];
	end
	if (
		( SaidaWB_expected_prev[19] !== 1'bx ) && ( SaidaWB_prev[19] !== SaidaWB_expected_prev[19] )
		&& ((SaidaWB_expected_prev[19] !== last_SaidaWB_exp[19]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[19] = SaidaWB_expected_prev[19];
	end
	if (
		( SaidaWB_expected_prev[20] !== 1'bx ) && ( SaidaWB_prev[20] !== SaidaWB_expected_prev[20] )
		&& ((SaidaWB_expected_prev[20] !== last_SaidaWB_exp[20]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[20] = SaidaWB_expected_prev[20];
	end
	if (
		( SaidaWB_expected_prev[21] !== 1'bx ) && ( SaidaWB_prev[21] !== SaidaWB_expected_prev[21] )
		&& ((SaidaWB_expected_prev[21] !== last_SaidaWB_exp[21]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[21] = SaidaWB_expected_prev[21];
	end
	if (
		( SaidaWB_expected_prev[22] !== 1'bx ) && ( SaidaWB_prev[22] !== SaidaWB_expected_prev[22] )
		&& ((SaidaWB_expected_prev[22] !== last_SaidaWB_exp[22]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[22] = SaidaWB_expected_prev[22];
	end
	if (
		( SaidaWB_expected_prev[23] !== 1'bx ) && ( SaidaWB_prev[23] !== SaidaWB_expected_prev[23] )
		&& ((SaidaWB_expected_prev[23] !== last_SaidaWB_exp[23]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[23] = SaidaWB_expected_prev[23];
	end
	if (
		( SaidaWB_expected_prev[24] !== 1'bx ) && ( SaidaWB_prev[24] !== SaidaWB_expected_prev[24] )
		&& ((SaidaWB_expected_prev[24] !== last_SaidaWB_exp[24]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[24] = SaidaWB_expected_prev[24];
	end
	if (
		( SaidaWB_expected_prev[25] !== 1'bx ) && ( SaidaWB_prev[25] !== SaidaWB_expected_prev[25] )
		&& ((SaidaWB_expected_prev[25] !== last_SaidaWB_exp[25]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[25] = SaidaWB_expected_prev[25];
	end
	if (
		( SaidaWB_expected_prev[26] !== 1'bx ) && ( SaidaWB_prev[26] !== SaidaWB_expected_prev[26] )
		&& ((SaidaWB_expected_prev[26] !== last_SaidaWB_exp[26]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[26] = SaidaWB_expected_prev[26];
	end
	if (
		( SaidaWB_expected_prev[27] !== 1'bx ) && ( SaidaWB_prev[27] !== SaidaWB_expected_prev[27] )
		&& ((SaidaWB_expected_prev[27] !== last_SaidaWB_exp[27]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[27] = SaidaWB_expected_prev[27];
	end
	if (
		( SaidaWB_expected_prev[28] !== 1'bx ) && ( SaidaWB_prev[28] !== SaidaWB_expected_prev[28] )
		&& ((SaidaWB_expected_prev[28] !== last_SaidaWB_exp[28]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[28] = SaidaWB_expected_prev[28];
	end
	if (
		( SaidaWB_expected_prev[29] !== 1'bx ) && ( SaidaWB_prev[29] !== SaidaWB_expected_prev[29] )
		&& ((SaidaWB_expected_prev[29] !== last_SaidaWB_exp[29]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[29] = SaidaWB_expected_prev[29];
	end
	if (
		( SaidaWB_expected_prev[30] !== 1'bx ) && ( SaidaWB_prev[30] !== SaidaWB_expected_prev[30] )
		&& ((SaidaWB_expected_prev[30] !== last_SaidaWB_exp[30]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[30] = SaidaWB_expected_prev[30];
	end
	if (
		( SaidaWB_expected_prev[31] !== 1'bx ) && ( SaidaWB_prev[31] !== SaidaWB_expected_prev[31] )
		&& ((SaidaWB_expected_prev[31] !== last_SaidaWB_exp[31]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaWB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaWB_expected_prev);
		$display ("     Real value = %b", SaidaWB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_SaidaWB_exp[31] = SaidaWB_expected_prev[31];
	end
	if (
		( shamt_expected_prev[0] !== 1'bx ) && ( shamt_prev[0] !== shamt_expected_prev[0] )
		&& ((shamt_expected_prev[0] !== last_shamt_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shamt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shamt_expected_prev);
		$display ("     Real value = %b", shamt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_shamt_exp[0] = shamt_expected_prev[0];
	end
	if (
		( shamt_expected_prev[1] !== 1'bx ) && ( shamt_prev[1] !== shamt_expected_prev[1] )
		&& ((shamt_expected_prev[1] !== last_shamt_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shamt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shamt_expected_prev);
		$display ("     Real value = %b", shamt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_shamt_exp[1] = shamt_expected_prev[1];
	end
	if (
		( shamt_expected_prev[2] !== 1'bx ) && ( shamt_prev[2] !== shamt_expected_prev[2] )
		&& ((shamt_expected_prev[2] !== last_shamt_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shamt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shamt_expected_prev);
		$display ("     Real value = %b", shamt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_shamt_exp[2] = shamt_expected_prev[2];
	end
	if (
		( shamt_expected_prev[3] !== 1'bx ) && ( shamt_prev[3] !== shamt_expected_prev[3] )
		&& ((shamt_expected_prev[3] !== last_shamt_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shamt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shamt_expected_prev);
		$display ("     Real value = %b", shamt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_shamt_exp[3] = shamt_expected_prev[3];
	end
	if (
		( shamt_expected_prev[4] !== 1'bx ) && ( shamt_prev[4] !== shamt_expected_prev[4] )
		&& ((shamt_expected_prev[4] !== last_shamt_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shamt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shamt_expected_prev);
		$display ("     Real value = %b", shamt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_shamt_exp[4] = shamt_expected_prev[4];
	end
	if (
		( t0_expected_prev[0] !== 1'bx ) && ( t0_prev[0] !== t0_expected_prev[0] )
		&& ((t0_expected_prev[0] !== last_t0_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[0] = t0_expected_prev[0];
	end
	if (
		( t0_expected_prev[1] !== 1'bx ) && ( t0_prev[1] !== t0_expected_prev[1] )
		&& ((t0_expected_prev[1] !== last_t0_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[1] = t0_expected_prev[1];
	end
	if (
		( t0_expected_prev[2] !== 1'bx ) && ( t0_prev[2] !== t0_expected_prev[2] )
		&& ((t0_expected_prev[2] !== last_t0_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[2] = t0_expected_prev[2];
	end
	if (
		( t0_expected_prev[3] !== 1'bx ) && ( t0_prev[3] !== t0_expected_prev[3] )
		&& ((t0_expected_prev[3] !== last_t0_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[3] = t0_expected_prev[3];
	end
	if (
		( t0_expected_prev[4] !== 1'bx ) && ( t0_prev[4] !== t0_expected_prev[4] )
		&& ((t0_expected_prev[4] !== last_t0_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[4] = t0_expected_prev[4];
	end
	if (
		( t0_expected_prev[5] !== 1'bx ) && ( t0_prev[5] !== t0_expected_prev[5] )
		&& ((t0_expected_prev[5] !== last_t0_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[5] = t0_expected_prev[5];
	end
	if (
		( t0_expected_prev[6] !== 1'bx ) && ( t0_prev[6] !== t0_expected_prev[6] )
		&& ((t0_expected_prev[6] !== last_t0_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[6] = t0_expected_prev[6];
	end
	if (
		( t0_expected_prev[7] !== 1'bx ) && ( t0_prev[7] !== t0_expected_prev[7] )
		&& ((t0_expected_prev[7] !== last_t0_exp[7]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[7] = t0_expected_prev[7];
	end
	if (
		( t0_expected_prev[8] !== 1'bx ) && ( t0_prev[8] !== t0_expected_prev[8] )
		&& ((t0_expected_prev[8] !== last_t0_exp[8]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[8] = t0_expected_prev[8];
	end
	if (
		( t0_expected_prev[9] !== 1'bx ) && ( t0_prev[9] !== t0_expected_prev[9] )
		&& ((t0_expected_prev[9] !== last_t0_exp[9]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[9] = t0_expected_prev[9];
	end
	if (
		( t0_expected_prev[10] !== 1'bx ) && ( t0_prev[10] !== t0_expected_prev[10] )
		&& ((t0_expected_prev[10] !== last_t0_exp[10]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[10] = t0_expected_prev[10];
	end
	if (
		( t0_expected_prev[11] !== 1'bx ) && ( t0_prev[11] !== t0_expected_prev[11] )
		&& ((t0_expected_prev[11] !== last_t0_exp[11]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[11] = t0_expected_prev[11];
	end
	if (
		( t0_expected_prev[12] !== 1'bx ) && ( t0_prev[12] !== t0_expected_prev[12] )
		&& ((t0_expected_prev[12] !== last_t0_exp[12]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[12] = t0_expected_prev[12];
	end
	if (
		( t0_expected_prev[13] !== 1'bx ) && ( t0_prev[13] !== t0_expected_prev[13] )
		&& ((t0_expected_prev[13] !== last_t0_exp[13]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[13] = t0_expected_prev[13];
	end
	if (
		( t0_expected_prev[14] !== 1'bx ) && ( t0_prev[14] !== t0_expected_prev[14] )
		&& ((t0_expected_prev[14] !== last_t0_exp[14]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[14] = t0_expected_prev[14];
	end
	if (
		( t0_expected_prev[15] !== 1'bx ) && ( t0_prev[15] !== t0_expected_prev[15] )
		&& ((t0_expected_prev[15] !== last_t0_exp[15]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[15] = t0_expected_prev[15];
	end
	if (
		( t0_expected_prev[16] !== 1'bx ) && ( t0_prev[16] !== t0_expected_prev[16] )
		&& ((t0_expected_prev[16] !== last_t0_exp[16]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[16] = t0_expected_prev[16];
	end
	if (
		( t0_expected_prev[17] !== 1'bx ) && ( t0_prev[17] !== t0_expected_prev[17] )
		&& ((t0_expected_prev[17] !== last_t0_exp[17]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[17] = t0_expected_prev[17];
	end
	if (
		( t0_expected_prev[18] !== 1'bx ) && ( t0_prev[18] !== t0_expected_prev[18] )
		&& ((t0_expected_prev[18] !== last_t0_exp[18]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[18] = t0_expected_prev[18];
	end
	if (
		( t0_expected_prev[19] !== 1'bx ) && ( t0_prev[19] !== t0_expected_prev[19] )
		&& ((t0_expected_prev[19] !== last_t0_exp[19]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[19] = t0_expected_prev[19];
	end
	if (
		( t0_expected_prev[20] !== 1'bx ) && ( t0_prev[20] !== t0_expected_prev[20] )
		&& ((t0_expected_prev[20] !== last_t0_exp[20]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[20] = t0_expected_prev[20];
	end
	if (
		( t0_expected_prev[21] !== 1'bx ) && ( t0_prev[21] !== t0_expected_prev[21] )
		&& ((t0_expected_prev[21] !== last_t0_exp[21]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[21] = t0_expected_prev[21];
	end
	if (
		( t0_expected_prev[22] !== 1'bx ) && ( t0_prev[22] !== t0_expected_prev[22] )
		&& ((t0_expected_prev[22] !== last_t0_exp[22]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[22] = t0_expected_prev[22];
	end
	if (
		( t0_expected_prev[23] !== 1'bx ) && ( t0_prev[23] !== t0_expected_prev[23] )
		&& ((t0_expected_prev[23] !== last_t0_exp[23]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[23] = t0_expected_prev[23];
	end
	if (
		( t0_expected_prev[24] !== 1'bx ) && ( t0_prev[24] !== t0_expected_prev[24] )
		&& ((t0_expected_prev[24] !== last_t0_exp[24]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[24] = t0_expected_prev[24];
	end
	if (
		( t0_expected_prev[25] !== 1'bx ) && ( t0_prev[25] !== t0_expected_prev[25] )
		&& ((t0_expected_prev[25] !== last_t0_exp[25]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[25] = t0_expected_prev[25];
	end
	if (
		( t0_expected_prev[26] !== 1'bx ) && ( t0_prev[26] !== t0_expected_prev[26] )
		&& ((t0_expected_prev[26] !== last_t0_exp[26]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[26] = t0_expected_prev[26];
	end
	if (
		( t0_expected_prev[27] !== 1'bx ) && ( t0_prev[27] !== t0_expected_prev[27] )
		&& ((t0_expected_prev[27] !== last_t0_exp[27]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[27] = t0_expected_prev[27];
	end
	if (
		( t0_expected_prev[28] !== 1'bx ) && ( t0_prev[28] !== t0_expected_prev[28] )
		&& ((t0_expected_prev[28] !== last_t0_exp[28]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[28] = t0_expected_prev[28];
	end
	if (
		( t0_expected_prev[29] !== 1'bx ) && ( t0_prev[29] !== t0_expected_prev[29] )
		&& ((t0_expected_prev[29] !== last_t0_exp[29]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[29] = t0_expected_prev[29];
	end
	if (
		( t0_expected_prev[30] !== 1'bx ) && ( t0_prev[30] !== t0_expected_prev[30] )
		&& ((t0_expected_prev[30] !== last_t0_exp[30]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[30] = t0_expected_prev[30];
	end
	if (
		( t0_expected_prev[31] !== 1'bx ) && ( t0_prev[31] !== t0_expected_prev[31] )
		&& ((t0_expected_prev[31] !== last_t0_exp[31]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_t0_exp[31] = t0_expected_prev[31];
	end
	if (
		( t1_expected_prev[0] !== 1'bx ) && ( t1_prev[0] !== t1_expected_prev[0] )
		&& ((t1_expected_prev[0] !== last_t1_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[0] = t1_expected_prev[0];
	end
	if (
		( t1_expected_prev[1] !== 1'bx ) && ( t1_prev[1] !== t1_expected_prev[1] )
		&& ((t1_expected_prev[1] !== last_t1_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[1] = t1_expected_prev[1];
	end
	if (
		( t1_expected_prev[2] !== 1'bx ) && ( t1_prev[2] !== t1_expected_prev[2] )
		&& ((t1_expected_prev[2] !== last_t1_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[2] = t1_expected_prev[2];
	end
	if (
		( t1_expected_prev[3] !== 1'bx ) && ( t1_prev[3] !== t1_expected_prev[3] )
		&& ((t1_expected_prev[3] !== last_t1_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[3] = t1_expected_prev[3];
	end
	if (
		( t1_expected_prev[4] !== 1'bx ) && ( t1_prev[4] !== t1_expected_prev[4] )
		&& ((t1_expected_prev[4] !== last_t1_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[4] = t1_expected_prev[4];
	end
	if (
		( t1_expected_prev[5] !== 1'bx ) && ( t1_prev[5] !== t1_expected_prev[5] )
		&& ((t1_expected_prev[5] !== last_t1_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[5] = t1_expected_prev[5];
	end
	if (
		( t1_expected_prev[6] !== 1'bx ) && ( t1_prev[6] !== t1_expected_prev[6] )
		&& ((t1_expected_prev[6] !== last_t1_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[6] = t1_expected_prev[6];
	end
	if (
		( t1_expected_prev[7] !== 1'bx ) && ( t1_prev[7] !== t1_expected_prev[7] )
		&& ((t1_expected_prev[7] !== last_t1_exp[7]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[7] = t1_expected_prev[7];
	end
	if (
		( t1_expected_prev[8] !== 1'bx ) && ( t1_prev[8] !== t1_expected_prev[8] )
		&& ((t1_expected_prev[8] !== last_t1_exp[8]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[8] = t1_expected_prev[8];
	end
	if (
		( t1_expected_prev[9] !== 1'bx ) && ( t1_prev[9] !== t1_expected_prev[9] )
		&& ((t1_expected_prev[9] !== last_t1_exp[9]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[9] = t1_expected_prev[9];
	end
	if (
		( t1_expected_prev[10] !== 1'bx ) && ( t1_prev[10] !== t1_expected_prev[10] )
		&& ((t1_expected_prev[10] !== last_t1_exp[10]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[10] = t1_expected_prev[10];
	end
	if (
		( t1_expected_prev[11] !== 1'bx ) && ( t1_prev[11] !== t1_expected_prev[11] )
		&& ((t1_expected_prev[11] !== last_t1_exp[11]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[11] = t1_expected_prev[11];
	end
	if (
		( t1_expected_prev[12] !== 1'bx ) && ( t1_prev[12] !== t1_expected_prev[12] )
		&& ((t1_expected_prev[12] !== last_t1_exp[12]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[12] = t1_expected_prev[12];
	end
	if (
		( t1_expected_prev[13] !== 1'bx ) && ( t1_prev[13] !== t1_expected_prev[13] )
		&& ((t1_expected_prev[13] !== last_t1_exp[13]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[13] = t1_expected_prev[13];
	end
	if (
		( t1_expected_prev[14] !== 1'bx ) && ( t1_prev[14] !== t1_expected_prev[14] )
		&& ((t1_expected_prev[14] !== last_t1_exp[14]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[14] = t1_expected_prev[14];
	end
	if (
		( t1_expected_prev[15] !== 1'bx ) && ( t1_prev[15] !== t1_expected_prev[15] )
		&& ((t1_expected_prev[15] !== last_t1_exp[15]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[15] = t1_expected_prev[15];
	end
	if (
		( t1_expected_prev[16] !== 1'bx ) && ( t1_prev[16] !== t1_expected_prev[16] )
		&& ((t1_expected_prev[16] !== last_t1_exp[16]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[16] = t1_expected_prev[16];
	end
	if (
		( t1_expected_prev[17] !== 1'bx ) && ( t1_prev[17] !== t1_expected_prev[17] )
		&& ((t1_expected_prev[17] !== last_t1_exp[17]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[17] = t1_expected_prev[17];
	end
	if (
		( t1_expected_prev[18] !== 1'bx ) && ( t1_prev[18] !== t1_expected_prev[18] )
		&& ((t1_expected_prev[18] !== last_t1_exp[18]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[18] = t1_expected_prev[18];
	end
	if (
		( t1_expected_prev[19] !== 1'bx ) && ( t1_prev[19] !== t1_expected_prev[19] )
		&& ((t1_expected_prev[19] !== last_t1_exp[19]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[19] = t1_expected_prev[19];
	end
	if (
		( t1_expected_prev[20] !== 1'bx ) && ( t1_prev[20] !== t1_expected_prev[20] )
		&& ((t1_expected_prev[20] !== last_t1_exp[20]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[20] = t1_expected_prev[20];
	end
	if (
		( t1_expected_prev[21] !== 1'bx ) && ( t1_prev[21] !== t1_expected_prev[21] )
		&& ((t1_expected_prev[21] !== last_t1_exp[21]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[21] = t1_expected_prev[21];
	end
	if (
		( t1_expected_prev[22] !== 1'bx ) && ( t1_prev[22] !== t1_expected_prev[22] )
		&& ((t1_expected_prev[22] !== last_t1_exp[22]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[22] = t1_expected_prev[22];
	end
	if (
		( t1_expected_prev[23] !== 1'bx ) && ( t1_prev[23] !== t1_expected_prev[23] )
		&& ((t1_expected_prev[23] !== last_t1_exp[23]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[23] = t1_expected_prev[23];
	end
	if (
		( t1_expected_prev[24] !== 1'bx ) && ( t1_prev[24] !== t1_expected_prev[24] )
		&& ((t1_expected_prev[24] !== last_t1_exp[24]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[24] = t1_expected_prev[24];
	end
	if (
		( t1_expected_prev[25] !== 1'bx ) && ( t1_prev[25] !== t1_expected_prev[25] )
		&& ((t1_expected_prev[25] !== last_t1_exp[25]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[25] = t1_expected_prev[25];
	end
	if (
		( t1_expected_prev[26] !== 1'bx ) && ( t1_prev[26] !== t1_expected_prev[26] )
		&& ((t1_expected_prev[26] !== last_t1_exp[26]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[26] = t1_expected_prev[26];
	end
	if (
		( t1_expected_prev[27] !== 1'bx ) && ( t1_prev[27] !== t1_expected_prev[27] )
		&& ((t1_expected_prev[27] !== last_t1_exp[27]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[27] = t1_expected_prev[27];
	end
	if (
		( t1_expected_prev[28] !== 1'bx ) && ( t1_prev[28] !== t1_expected_prev[28] )
		&& ((t1_expected_prev[28] !== last_t1_exp[28]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[28] = t1_expected_prev[28];
	end
	if (
		( t1_expected_prev[29] !== 1'bx ) && ( t1_prev[29] !== t1_expected_prev[29] )
		&& ((t1_expected_prev[29] !== last_t1_exp[29]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[29] = t1_expected_prev[29];
	end
	if (
		( t1_expected_prev[30] !== 1'bx ) && ( t1_prev[30] !== t1_expected_prev[30] )
		&& ((t1_expected_prev[30] !== last_t1_exp[30]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[30] = t1_expected_prev[30];
	end
	if (
		( t1_expected_prev[31] !== 1'bx ) && ( t1_prev[31] !== t1_expected_prev[31] )
		&& ((t1_expected_prev[31] !== last_t1_exp[31]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_t1_exp[31] = t1_expected_prev[31];
	end
	if (
		( t2_expected_prev[0] !== 1'bx ) && ( t2_prev[0] !== t2_expected_prev[0] )
		&& ((t2_expected_prev[0] !== last_t2_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[0] = t2_expected_prev[0];
	end
	if (
		( t2_expected_prev[1] !== 1'bx ) && ( t2_prev[1] !== t2_expected_prev[1] )
		&& ((t2_expected_prev[1] !== last_t2_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[1] = t2_expected_prev[1];
	end
	if (
		( t2_expected_prev[2] !== 1'bx ) && ( t2_prev[2] !== t2_expected_prev[2] )
		&& ((t2_expected_prev[2] !== last_t2_exp[2]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[2] = t2_expected_prev[2];
	end
	if (
		( t2_expected_prev[3] !== 1'bx ) && ( t2_prev[3] !== t2_expected_prev[3] )
		&& ((t2_expected_prev[3] !== last_t2_exp[3]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[3] = t2_expected_prev[3];
	end
	if (
		( t2_expected_prev[4] !== 1'bx ) && ( t2_prev[4] !== t2_expected_prev[4] )
		&& ((t2_expected_prev[4] !== last_t2_exp[4]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[4] = t2_expected_prev[4];
	end
	if (
		( t2_expected_prev[5] !== 1'bx ) && ( t2_prev[5] !== t2_expected_prev[5] )
		&& ((t2_expected_prev[5] !== last_t2_exp[5]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[5] = t2_expected_prev[5];
	end
	if (
		( t2_expected_prev[6] !== 1'bx ) && ( t2_prev[6] !== t2_expected_prev[6] )
		&& ((t2_expected_prev[6] !== last_t2_exp[6]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[6] = t2_expected_prev[6];
	end
	if (
		( t2_expected_prev[7] !== 1'bx ) && ( t2_prev[7] !== t2_expected_prev[7] )
		&& ((t2_expected_prev[7] !== last_t2_exp[7]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[7] = t2_expected_prev[7];
	end
	if (
		( t2_expected_prev[8] !== 1'bx ) && ( t2_prev[8] !== t2_expected_prev[8] )
		&& ((t2_expected_prev[8] !== last_t2_exp[8]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[8] = t2_expected_prev[8];
	end
	if (
		( t2_expected_prev[9] !== 1'bx ) && ( t2_prev[9] !== t2_expected_prev[9] )
		&& ((t2_expected_prev[9] !== last_t2_exp[9]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[9] = t2_expected_prev[9];
	end
	if (
		( t2_expected_prev[10] !== 1'bx ) && ( t2_prev[10] !== t2_expected_prev[10] )
		&& ((t2_expected_prev[10] !== last_t2_exp[10]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[10] = t2_expected_prev[10];
	end
	if (
		( t2_expected_prev[11] !== 1'bx ) && ( t2_prev[11] !== t2_expected_prev[11] )
		&& ((t2_expected_prev[11] !== last_t2_exp[11]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[11] = t2_expected_prev[11];
	end
	if (
		( t2_expected_prev[12] !== 1'bx ) && ( t2_prev[12] !== t2_expected_prev[12] )
		&& ((t2_expected_prev[12] !== last_t2_exp[12]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[12] = t2_expected_prev[12];
	end
	if (
		( t2_expected_prev[13] !== 1'bx ) && ( t2_prev[13] !== t2_expected_prev[13] )
		&& ((t2_expected_prev[13] !== last_t2_exp[13]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[13] = t2_expected_prev[13];
	end
	if (
		( t2_expected_prev[14] !== 1'bx ) && ( t2_prev[14] !== t2_expected_prev[14] )
		&& ((t2_expected_prev[14] !== last_t2_exp[14]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[14] = t2_expected_prev[14];
	end
	if (
		( t2_expected_prev[15] !== 1'bx ) && ( t2_prev[15] !== t2_expected_prev[15] )
		&& ((t2_expected_prev[15] !== last_t2_exp[15]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[15] = t2_expected_prev[15];
	end
	if (
		( t2_expected_prev[16] !== 1'bx ) && ( t2_prev[16] !== t2_expected_prev[16] )
		&& ((t2_expected_prev[16] !== last_t2_exp[16]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[16] = t2_expected_prev[16];
	end
	if (
		( t2_expected_prev[17] !== 1'bx ) && ( t2_prev[17] !== t2_expected_prev[17] )
		&& ((t2_expected_prev[17] !== last_t2_exp[17]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[17] = t2_expected_prev[17];
	end
	if (
		( t2_expected_prev[18] !== 1'bx ) && ( t2_prev[18] !== t2_expected_prev[18] )
		&& ((t2_expected_prev[18] !== last_t2_exp[18]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[18] = t2_expected_prev[18];
	end
	if (
		( t2_expected_prev[19] !== 1'bx ) && ( t2_prev[19] !== t2_expected_prev[19] )
		&& ((t2_expected_prev[19] !== last_t2_exp[19]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[19] = t2_expected_prev[19];
	end
	if (
		( t2_expected_prev[20] !== 1'bx ) && ( t2_prev[20] !== t2_expected_prev[20] )
		&& ((t2_expected_prev[20] !== last_t2_exp[20]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[20] = t2_expected_prev[20];
	end
	if (
		( t2_expected_prev[21] !== 1'bx ) && ( t2_prev[21] !== t2_expected_prev[21] )
		&& ((t2_expected_prev[21] !== last_t2_exp[21]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[21] = t2_expected_prev[21];
	end
	if (
		( t2_expected_prev[22] !== 1'bx ) && ( t2_prev[22] !== t2_expected_prev[22] )
		&& ((t2_expected_prev[22] !== last_t2_exp[22]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[22] = t2_expected_prev[22];
	end
	if (
		( t2_expected_prev[23] !== 1'bx ) && ( t2_prev[23] !== t2_expected_prev[23] )
		&& ((t2_expected_prev[23] !== last_t2_exp[23]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[23] = t2_expected_prev[23];
	end
	if (
		( t2_expected_prev[24] !== 1'bx ) && ( t2_prev[24] !== t2_expected_prev[24] )
		&& ((t2_expected_prev[24] !== last_t2_exp[24]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[24] = t2_expected_prev[24];
	end
	if (
		( t2_expected_prev[25] !== 1'bx ) && ( t2_prev[25] !== t2_expected_prev[25] )
		&& ((t2_expected_prev[25] !== last_t2_exp[25]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[25] = t2_expected_prev[25];
	end
	if (
		( t2_expected_prev[26] !== 1'bx ) && ( t2_prev[26] !== t2_expected_prev[26] )
		&& ((t2_expected_prev[26] !== last_t2_exp[26]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[26] = t2_expected_prev[26];
	end
	if (
		( t2_expected_prev[27] !== 1'bx ) && ( t2_prev[27] !== t2_expected_prev[27] )
		&& ((t2_expected_prev[27] !== last_t2_exp[27]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[27] = t2_expected_prev[27];
	end
	if (
		( t2_expected_prev[28] !== 1'bx ) && ( t2_prev[28] !== t2_expected_prev[28] )
		&& ((t2_expected_prev[28] !== last_t2_exp[28]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[28] = t2_expected_prev[28];
	end
	if (
		( t2_expected_prev[29] !== 1'bx ) && ( t2_prev[29] !== t2_expected_prev[29] )
		&& ((t2_expected_prev[29] !== last_t2_exp[29]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[29] = t2_expected_prev[29];
	end
	if (
		( t2_expected_prev[30] !== 1'bx ) && ( t2_prev[30] !== t2_expected_prev[30] )
		&& ((t2_expected_prev[30] !== last_t2_exp[30]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[30] = t2_expected_prev[30];
	end
	if (
		( t2_expected_prev[31] !== 1'bx ) && ( t2_prev[31] !== t2_expected_prev[31] )
		&& ((t2_expected_prev[31] !== last_t2_exp[31]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_t2_exp[31] = t2_expected_prev[31];
	end
	if (
		( t3_expected_prev[0] !== 1'bx ) && ( t3_prev[0] !== t3_expected_prev[0] )
		&& ((t3_expected_prev[0] !== last_t3_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[0] = t3_expected_prev[0];
	end
	if (
		( t3_expected_prev[1] !== 1'bx ) && ( t3_prev[1] !== t3_expected_prev[1] )
		&& ((t3_expected_prev[1] !== last_t3_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[1] = t3_expected_prev[1];
	end
	if (
		( t3_expected_prev[2] !== 1'bx ) && ( t3_prev[2] !== t3_expected_prev[2] )
		&& ((t3_expected_prev[2] !== last_t3_exp[2]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[2] = t3_expected_prev[2];
	end
	if (
		( t3_expected_prev[3] !== 1'bx ) && ( t3_prev[3] !== t3_expected_prev[3] )
		&& ((t3_expected_prev[3] !== last_t3_exp[3]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[3] = t3_expected_prev[3];
	end
	if (
		( t3_expected_prev[4] !== 1'bx ) && ( t3_prev[4] !== t3_expected_prev[4] )
		&& ((t3_expected_prev[4] !== last_t3_exp[4]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[4] = t3_expected_prev[4];
	end
	if (
		( t3_expected_prev[5] !== 1'bx ) && ( t3_prev[5] !== t3_expected_prev[5] )
		&& ((t3_expected_prev[5] !== last_t3_exp[5]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[5] = t3_expected_prev[5];
	end
	if (
		( t3_expected_prev[6] !== 1'bx ) && ( t3_prev[6] !== t3_expected_prev[6] )
		&& ((t3_expected_prev[6] !== last_t3_exp[6]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[6] = t3_expected_prev[6];
	end
	if (
		( t3_expected_prev[7] !== 1'bx ) && ( t3_prev[7] !== t3_expected_prev[7] )
		&& ((t3_expected_prev[7] !== last_t3_exp[7]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[7] = t3_expected_prev[7];
	end
	if (
		( t3_expected_prev[8] !== 1'bx ) && ( t3_prev[8] !== t3_expected_prev[8] )
		&& ((t3_expected_prev[8] !== last_t3_exp[8]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[8] = t3_expected_prev[8];
	end
	if (
		( t3_expected_prev[9] !== 1'bx ) && ( t3_prev[9] !== t3_expected_prev[9] )
		&& ((t3_expected_prev[9] !== last_t3_exp[9]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[9] = t3_expected_prev[9];
	end
	if (
		( t3_expected_prev[10] !== 1'bx ) && ( t3_prev[10] !== t3_expected_prev[10] )
		&& ((t3_expected_prev[10] !== last_t3_exp[10]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[10] = t3_expected_prev[10];
	end
	if (
		( t3_expected_prev[11] !== 1'bx ) && ( t3_prev[11] !== t3_expected_prev[11] )
		&& ((t3_expected_prev[11] !== last_t3_exp[11]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[11] = t3_expected_prev[11];
	end
	if (
		( t3_expected_prev[12] !== 1'bx ) && ( t3_prev[12] !== t3_expected_prev[12] )
		&& ((t3_expected_prev[12] !== last_t3_exp[12]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[12] = t3_expected_prev[12];
	end
	if (
		( t3_expected_prev[13] !== 1'bx ) && ( t3_prev[13] !== t3_expected_prev[13] )
		&& ((t3_expected_prev[13] !== last_t3_exp[13]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[13] = t3_expected_prev[13];
	end
	if (
		( t3_expected_prev[14] !== 1'bx ) && ( t3_prev[14] !== t3_expected_prev[14] )
		&& ((t3_expected_prev[14] !== last_t3_exp[14]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[14] = t3_expected_prev[14];
	end
	if (
		( t3_expected_prev[15] !== 1'bx ) && ( t3_prev[15] !== t3_expected_prev[15] )
		&& ((t3_expected_prev[15] !== last_t3_exp[15]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[15] = t3_expected_prev[15];
	end
	if (
		( t3_expected_prev[16] !== 1'bx ) && ( t3_prev[16] !== t3_expected_prev[16] )
		&& ((t3_expected_prev[16] !== last_t3_exp[16]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[16] = t3_expected_prev[16];
	end
	if (
		( t3_expected_prev[17] !== 1'bx ) && ( t3_prev[17] !== t3_expected_prev[17] )
		&& ((t3_expected_prev[17] !== last_t3_exp[17]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[17] = t3_expected_prev[17];
	end
	if (
		( t3_expected_prev[18] !== 1'bx ) && ( t3_prev[18] !== t3_expected_prev[18] )
		&& ((t3_expected_prev[18] !== last_t3_exp[18]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[18] = t3_expected_prev[18];
	end
	if (
		( t3_expected_prev[19] !== 1'bx ) && ( t3_prev[19] !== t3_expected_prev[19] )
		&& ((t3_expected_prev[19] !== last_t3_exp[19]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[19] = t3_expected_prev[19];
	end
	if (
		( t3_expected_prev[20] !== 1'bx ) && ( t3_prev[20] !== t3_expected_prev[20] )
		&& ((t3_expected_prev[20] !== last_t3_exp[20]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[20] = t3_expected_prev[20];
	end
	if (
		( t3_expected_prev[21] !== 1'bx ) && ( t3_prev[21] !== t3_expected_prev[21] )
		&& ((t3_expected_prev[21] !== last_t3_exp[21]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[21] = t3_expected_prev[21];
	end
	if (
		( t3_expected_prev[22] !== 1'bx ) && ( t3_prev[22] !== t3_expected_prev[22] )
		&& ((t3_expected_prev[22] !== last_t3_exp[22]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[22] = t3_expected_prev[22];
	end
	if (
		( t3_expected_prev[23] !== 1'bx ) && ( t3_prev[23] !== t3_expected_prev[23] )
		&& ((t3_expected_prev[23] !== last_t3_exp[23]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[23] = t3_expected_prev[23];
	end
	if (
		( t3_expected_prev[24] !== 1'bx ) && ( t3_prev[24] !== t3_expected_prev[24] )
		&& ((t3_expected_prev[24] !== last_t3_exp[24]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[24] = t3_expected_prev[24];
	end
	if (
		( t3_expected_prev[25] !== 1'bx ) && ( t3_prev[25] !== t3_expected_prev[25] )
		&& ((t3_expected_prev[25] !== last_t3_exp[25]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[25] = t3_expected_prev[25];
	end
	if (
		( t3_expected_prev[26] !== 1'bx ) && ( t3_prev[26] !== t3_expected_prev[26] )
		&& ((t3_expected_prev[26] !== last_t3_exp[26]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[26] = t3_expected_prev[26];
	end
	if (
		( t3_expected_prev[27] !== 1'bx ) && ( t3_prev[27] !== t3_expected_prev[27] )
		&& ((t3_expected_prev[27] !== last_t3_exp[27]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[27] = t3_expected_prev[27];
	end
	if (
		( t3_expected_prev[28] !== 1'bx ) && ( t3_prev[28] !== t3_expected_prev[28] )
		&& ((t3_expected_prev[28] !== last_t3_exp[28]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[28] = t3_expected_prev[28];
	end
	if (
		( t3_expected_prev[29] !== 1'bx ) && ( t3_prev[29] !== t3_expected_prev[29] )
		&& ((t3_expected_prev[29] !== last_t3_exp[29]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[29] = t3_expected_prev[29];
	end
	if (
		( t3_expected_prev[30] !== 1'bx ) && ( t3_prev[30] !== t3_expected_prev[30] )
		&& ((t3_expected_prev[30] !== last_t3_exp[30]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[30] = t3_expected_prev[30];
	end
	if (
		( t3_expected_prev[31] !== 1'bx ) && ( t3_prev[31] !== t3_expected_prev[31] )
		&& ((t3_expected_prev[31] !== last_t3_exp[31]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_t3_exp[31] = t3_expected_prev[31];
	end
	if (
		( t4_expected_prev[0] !== 1'bx ) && ( t4_prev[0] !== t4_expected_prev[0] )
		&& ((t4_expected_prev[0] !== last_t4_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[0] = t4_expected_prev[0];
	end
	if (
		( t4_expected_prev[1] !== 1'bx ) && ( t4_prev[1] !== t4_expected_prev[1] )
		&& ((t4_expected_prev[1] !== last_t4_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[1] = t4_expected_prev[1];
	end
	if (
		( t4_expected_prev[2] !== 1'bx ) && ( t4_prev[2] !== t4_expected_prev[2] )
		&& ((t4_expected_prev[2] !== last_t4_exp[2]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[2] = t4_expected_prev[2];
	end
	if (
		( t4_expected_prev[3] !== 1'bx ) && ( t4_prev[3] !== t4_expected_prev[3] )
		&& ((t4_expected_prev[3] !== last_t4_exp[3]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[3] = t4_expected_prev[3];
	end
	if (
		( t4_expected_prev[4] !== 1'bx ) && ( t4_prev[4] !== t4_expected_prev[4] )
		&& ((t4_expected_prev[4] !== last_t4_exp[4]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[4] = t4_expected_prev[4];
	end
	if (
		( t4_expected_prev[5] !== 1'bx ) && ( t4_prev[5] !== t4_expected_prev[5] )
		&& ((t4_expected_prev[5] !== last_t4_exp[5]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[5] = t4_expected_prev[5];
	end
	if (
		( t4_expected_prev[6] !== 1'bx ) && ( t4_prev[6] !== t4_expected_prev[6] )
		&& ((t4_expected_prev[6] !== last_t4_exp[6]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[6] = t4_expected_prev[6];
	end
	if (
		( t4_expected_prev[7] !== 1'bx ) && ( t4_prev[7] !== t4_expected_prev[7] )
		&& ((t4_expected_prev[7] !== last_t4_exp[7]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[7] = t4_expected_prev[7];
	end
	if (
		( t4_expected_prev[8] !== 1'bx ) && ( t4_prev[8] !== t4_expected_prev[8] )
		&& ((t4_expected_prev[8] !== last_t4_exp[8]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[8] = t4_expected_prev[8];
	end
	if (
		( t4_expected_prev[9] !== 1'bx ) && ( t4_prev[9] !== t4_expected_prev[9] )
		&& ((t4_expected_prev[9] !== last_t4_exp[9]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[9] = t4_expected_prev[9];
	end
	if (
		( t4_expected_prev[10] !== 1'bx ) && ( t4_prev[10] !== t4_expected_prev[10] )
		&& ((t4_expected_prev[10] !== last_t4_exp[10]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[10] = t4_expected_prev[10];
	end
	if (
		( t4_expected_prev[11] !== 1'bx ) && ( t4_prev[11] !== t4_expected_prev[11] )
		&& ((t4_expected_prev[11] !== last_t4_exp[11]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[11] = t4_expected_prev[11];
	end
	if (
		( t4_expected_prev[12] !== 1'bx ) && ( t4_prev[12] !== t4_expected_prev[12] )
		&& ((t4_expected_prev[12] !== last_t4_exp[12]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[12] = t4_expected_prev[12];
	end
	if (
		( t4_expected_prev[13] !== 1'bx ) && ( t4_prev[13] !== t4_expected_prev[13] )
		&& ((t4_expected_prev[13] !== last_t4_exp[13]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[13] = t4_expected_prev[13];
	end
	if (
		( t4_expected_prev[14] !== 1'bx ) && ( t4_prev[14] !== t4_expected_prev[14] )
		&& ((t4_expected_prev[14] !== last_t4_exp[14]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[14] = t4_expected_prev[14];
	end
	if (
		( t4_expected_prev[15] !== 1'bx ) && ( t4_prev[15] !== t4_expected_prev[15] )
		&& ((t4_expected_prev[15] !== last_t4_exp[15]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[15] = t4_expected_prev[15];
	end
	if (
		( t4_expected_prev[16] !== 1'bx ) && ( t4_prev[16] !== t4_expected_prev[16] )
		&& ((t4_expected_prev[16] !== last_t4_exp[16]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[16] = t4_expected_prev[16];
	end
	if (
		( t4_expected_prev[17] !== 1'bx ) && ( t4_prev[17] !== t4_expected_prev[17] )
		&& ((t4_expected_prev[17] !== last_t4_exp[17]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[17] = t4_expected_prev[17];
	end
	if (
		( t4_expected_prev[18] !== 1'bx ) && ( t4_prev[18] !== t4_expected_prev[18] )
		&& ((t4_expected_prev[18] !== last_t4_exp[18]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[18] = t4_expected_prev[18];
	end
	if (
		( t4_expected_prev[19] !== 1'bx ) && ( t4_prev[19] !== t4_expected_prev[19] )
		&& ((t4_expected_prev[19] !== last_t4_exp[19]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[19] = t4_expected_prev[19];
	end
	if (
		( t4_expected_prev[20] !== 1'bx ) && ( t4_prev[20] !== t4_expected_prev[20] )
		&& ((t4_expected_prev[20] !== last_t4_exp[20]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[20] = t4_expected_prev[20];
	end
	if (
		( t4_expected_prev[21] !== 1'bx ) && ( t4_prev[21] !== t4_expected_prev[21] )
		&& ((t4_expected_prev[21] !== last_t4_exp[21]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[21] = t4_expected_prev[21];
	end
	if (
		( t4_expected_prev[22] !== 1'bx ) && ( t4_prev[22] !== t4_expected_prev[22] )
		&& ((t4_expected_prev[22] !== last_t4_exp[22]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[22] = t4_expected_prev[22];
	end
	if (
		( t4_expected_prev[23] !== 1'bx ) && ( t4_prev[23] !== t4_expected_prev[23] )
		&& ((t4_expected_prev[23] !== last_t4_exp[23]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[23] = t4_expected_prev[23];
	end
	if (
		( t4_expected_prev[24] !== 1'bx ) && ( t4_prev[24] !== t4_expected_prev[24] )
		&& ((t4_expected_prev[24] !== last_t4_exp[24]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[24] = t4_expected_prev[24];
	end
	if (
		( t4_expected_prev[25] !== 1'bx ) && ( t4_prev[25] !== t4_expected_prev[25] )
		&& ((t4_expected_prev[25] !== last_t4_exp[25]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[25] = t4_expected_prev[25];
	end
	if (
		( t4_expected_prev[26] !== 1'bx ) && ( t4_prev[26] !== t4_expected_prev[26] )
		&& ((t4_expected_prev[26] !== last_t4_exp[26]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[26] = t4_expected_prev[26];
	end
	if (
		( t4_expected_prev[27] !== 1'bx ) && ( t4_prev[27] !== t4_expected_prev[27] )
		&& ((t4_expected_prev[27] !== last_t4_exp[27]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[27] = t4_expected_prev[27];
	end
	if (
		( t4_expected_prev[28] !== 1'bx ) && ( t4_prev[28] !== t4_expected_prev[28] )
		&& ((t4_expected_prev[28] !== last_t4_exp[28]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[28] = t4_expected_prev[28];
	end
	if (
		( t4_expected_prev[29] !== 1'bx ) && ( t4_prev[29] !== t4_expected_prev[29] )
		&& ((t4_expected_prev[29] !== last_t4_exp[29]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[29] = t4_expected_prev[29];
	end
	if (
		( t4_expected_prev[30] !== 1'bx ) && ( t4_prev[30] !== t4_expected_prev[30] )
		&& ((t4_expected_prev[30] !== last_t4_exp[30]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[30] = t4_expected_prev[30];
	end
	if (
		( t4_expected_prev[31] !== 1'bx ) && ( t4_prev[31] !== t4_expected_prev[31] )
		&& ((t4_expected_prev[31] !== last_t4_exp[31]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_t4_exp[31] = t4_expected_prev[31];
	end
	if (
		( t5_expected_prev[0] !== 1'bx ) && ( t5_prev[0] !== t5_expected_prev[0] )
		&& ((t5_expected_prev[0] !== last_t5_exp[0]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[0] = t5_expected_prev[0];
	end
	if (
		( t5_expected_prev[1] !== 1'bx ) && ( t5_prev[1] !== t5_expected_prev[1] )
		&& ((t5_expected_prev[1] !== last_t5_exp[1]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[1] = t5_expected_prev[1];
	end
	if (
		( t5_expected_prev[2] !== 1'bx ) && ( t5_prev[2] !== t5_expected_prev[2] )
		&& ((t5_expected_prev[2] !== last_t5_exp[2]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[2] = t5_expected_prev[2];
	end
	if (
		( t5_expected_prev[3] !== 1'bx ) && ( t5_prev[3] !== t5_expected_prev[3] )
		&& ((t5_expected_prev[3] !== last_t5_exp[3]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[3] = t5_expected_prev[3];
	end
	if (
		( t5_expected_prev[4] !== 1'bx ) && ( t5_prev[4] !== t5_expected_prev[4] )
		&& ((t5_expected_prev[4] !== last_t5_exp[4]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[4] = t5_expected_prev[4];
	end
	if (
		( t5_expected_prev[5] !== 1'bx ) && ( t5_prev[5] !== t5_expected_prev[5] )
		&& ((t5_expected_prev[5] !== last_t5_exp[5]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[5] = t5_expected_prev[5];
	end
	if (
		( t5_expected_prev[6] !== 1'bx ) && ( t5_prev[6] !== t5_expected_prev[6] )
		&& ((t5_expected_prev[6] !== last_t5_exp[6]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[6] = t5_expected_prev[6];
	end
	if (
		( t5_expected_prev[7] !== 1'bx ) && ( t5_prev[7] !== t5_expected_prev[7] )
		&& ((t5_expected_prev[7] !== last_t5_exp[7]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[7] = t5_expected_prev[7];
	end
	if (
		( t5_expected_prev[8] !== 1'bx ) && ( t5_prev[8] !== t5_expected_prev[8] )
		&& ((t5_expected_prev[8] !== last_t5_exp[8]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[8] = t5_expected_prev[8];
	end
	if (
		( t5_expected_prev[9] !== 1'bx ) && ( t5_prev[9] !== t5_expected_prev[9] )
		&& ((t5_expected_prev[9] !== last_t5_exp[9]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[9] = t5_expected_prev[9];
	end
	if (
		( t5_expected_prev[10] !== 1'bx ) && ( t5_prev[10] !== t5_expected_prev[10] )
		&& ((t5_expected_prev[10] !== last_t5_exp[10]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[10] = t5_expected_prev[10];
	end
	if (
		( t5_expected_prev[11] !== 1'bx ) && ( t5_prev[11] !== t5_expected_prev[11] )
		&& ((t5_expected_prev[11] !== last_t5_exp[11]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[11] = t5_expected_prev[11];
	end
	if (
		( t5_expected_prev[12] !== 1'bx ) && ( t5_prev[12] !== t5_expected_prev[12] )
		&& ((t5_expected_prev[12] !== last_t5_exp[12]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[12] = t5_expected_prev[12];
	end
	if (
		( t5_expected_prev[13] !== 1'bx ) && ( t5_prev[13] !== t5_expected_prev[13] )
		&& ((t5_expected_prev[13] !== last_t5_exp[13]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[13] = t5_expected_prev[13];
	end
	if (
		( t5_expected_prev[14] !== 1'bx ) && ( t5_prev[14] !== t5_expected_prev[14] )
		&& ((t5_expected_prev[14] !== last_t5_exp[14]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[14] = t5_expected_prev[14];
	end
	if (
		( t5_expected_prev[15] !== 1'bx ) && ( t5_prev[15] !== t5_expected_prev[15] )
		&& ((t5_expected_prev[15] !== last_t5_exp[15]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[15] = t5_expected_prev[15];
	end
	if (
		( t5_expected_prev[16] !== 1'bx ) && ( t5_prev[16] !== t5_expected_prev[16] )
		&& ((t5_expected_prev[16] !== last_t5_exp[16]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[16] = t5_expected_prev[16];
	end
	if (
		( t5_expected_prev[17] !== 1'bx ) && ( t5_prev[17] !== t5_expected_prev[17] )
		&& ((t5_expected_prev[17] !== last_t5_exp[17]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[17] = t5_expected_prev[17];
	end
	if (
		( t5_expected_prev[18] !== 1'bx ) && ( t5_prev[18] !== t5_expected_prev[18] )
		&& ((t5_expected_prev[18] !== last_t5_exp[18]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[18] = t5_expected_prev[18];
	end
	if (
		( t5_expected_prev[19] !== 1'bx ) && ( t5_prev[19] !== t5_expected_prev[19] )
		&& ((t5_expected_prev[19] !== last_t5_exp[19]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[19] = t5_expected_prev[19];
	end
	if (
		( t5_expected_prev[20] !== 1'bx ) && ( t5_prev[20] !== t5_expected_prev[20] )
		&& ((t5_expected_prev[20] !== last_t5_exp[20]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[20] = t5_expected_prev[20];
	end
	if (
		( t5_expected_prev[21] !== 1'bx ) && ( t5_prev[21] !== t5_expected_prev[21] )
		&& ((t5_expected_prev[21] !== last_t5_exp[21]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[21] = t5_expected_prev[21];
	end
	if (
		( t5_expected_prev[22] !== 1'bx ) && ( t5_prev[22] !== t5_expected_prev[22] )
		&& ((t5_expected_prev[22] !== last_t5_exp[22]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[22] = t5_expected_prev[22];
	end
	if (
		( t5_expected_prev[23] !== 1'bx ) && ( t5_prev[23] !== t5_expected_prev[23] )
		&& ((t5_expected_prev[23] !== last_t5_exp[23]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[23] = t5_expected_prev[23];
	end
	if (
		( t5_expected_prev[24] !== 1'bx ) && ( t5_prev[24] !== t5_expected_prev[24] )
		&& ((t5_expected_prev[24] !== last_t5_exp[24]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[24] = t5_expected_prev[24];
	end
	if (
		( t5_expected_prev[25] !== 1'bx ) && ( t5_prev[25] !== t5_expected_prev[25] )
		&& ((t5_expected_prev[25] !== last_t5_exp[25]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[25] = t5_expected_prev[25];
	end
	if (
		( t5_expected_prev[26] !== 1'bx ) && ( t5_prev[26] !== t5_expected_prev[26] )
		&& ((t5_expected_prev[26] !== last_t5_exp[26]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[26] = t5_expected_prev[26];
	end
	if (
		( t5_expected_prev[27] !== 1'bx ) && ( t5_prev[27] !== t5_expected_prev[27] )
		&& ((t5_expected_prev[27] !== last_t5_exp[27]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[27] = t5_expected_prev[27];
	end
	if (
		( t5_expected_prev[28] !== 1'bx ) && ( t5_prev[28] !== t5_expected_prev[28] )
		&& ((t5_expected_prev[28] !== last_t5_exp[28]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[28] = t5_expected_prev[28];
	end
	if (
		( t5_expected_prev[29] !== 1'bx ) && ( t5_prev[29] !== t5_expected_prev[29] )
		&& ((t5_expected_prev[29] !== last_t5_exp[29]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[29] = t5_expected_prev[29];
	end
	if (
		( t5_expected_prev[30] !== 1'bx ) && ( t5_prev[30] !== t5_expected_prev[30] )
		&& ((t5_expected_prev[30] !== last_t5_exp[30]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[30] = t5_expected_prev[30];
	end
	if (
		( t5_expected_prev[31] !== 1'bx ) && ( t5_prev[31] !== t5_expected_prev[31] )
		&& ((t5_expected_prev[31] !== last_t5_exp[31]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t5[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t5_expected_prev);
		$display ("     Real value = %b", t5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_t5_exp[31] = t5_expected_prev[31];
	end
	if (
		( t6_expected_prev[0] !== 1'bx ) && ( t6_prev[0] !== t6_expected_prev[0] )
		&& ((t6_expected_prev[0] !== last_t6_exp[0]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[0] = t6_expected_prev[0];
	end
	if (
		( t6_expected_prev[1] !== 1'bx ) && ( t6_prev[1] !== t6_expected_prev[1] )
		&& ((t6_expected_prev[1] !== last_t6_exp[1]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[1] = t6_expected_prev[1];
	end
	if (
		( t6_expected_prev[2] !== 1'bx ) && ( t6_prev[2] !== t6_expected_prev[2] )
		&& ((t6_expected_prev[2] !== last_t6_exp[2]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[2] = t6_expected_prev[2];
	end
	if (
		( t6_expected_prev[3] !== 1'bx ) && ( t6_prev[3] !== t6_expected_prev[3] )
		&& ((t6_expected_prev[3] !== last_t6_exp[3]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[3] = t6_expected_prev[3];
	end
	if (
		( t6_expected_prev[4] !== 1'bx ) && ( t6_prev[4] !== t6_expected_prev[4] )
		&& ((t6_expected_prev[4] !== last_t6_exp[4]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[4] = t6_expected_prev[4];
	end
	if (
		( t6_expected_prev[5] !== 1'bx ) && ( t6_prev[5] !== t6_expected_prev[5] )
		&& ((t6_expected_prev[5] !== last_t6_exp[5]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[5] = t6_expected_prev[5];
	end
	if (
		( t6_expected_prev[6] !== 1'bx ) && ( t6_prev[6] !== t6_expected_prev[6] )
		&& ((t6_expected_prev[6] !== last_t6_exp[6]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[6] = t6_expected_prev[6];
	end
	if (
		( t6_expected_prev[7] !== 1'bx ) && ( t6_prev[7] !== t6_expected_prev[7] )
		&& ((t6_expected_prev[7] !== last_t6_exp[7]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[7] = t6_expected_prev[7];
	end
	if (
		( t6_expected_prev[8] !== 1'bx ) && ( t6_prev[8] !== t6_expected_prev[8] )
		&& ((t6_expected_prev[8] !== last_t6_exp[8]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[8] = t6_expected_prev[8];
	end
	if (
		( t6_expected_prev[9] !== 1'bx ) && ( t6_prev[9] !== t6_expected_prev[9] )
		&& ((t6_expected_prev[9] !== last_t6_exp[9]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[9] = t6_expected_prev[9];
	end
	if (
		( t6_expected_prev[10] !== 1'bx ) && ( t6_prev[10] !== t6_expected_prev[10] )
		&& ((t6_expected_prev[10] !== last_t6_exp[10]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[10] = t6_expected_prev[10];
	end
	if (
		( t6_expected_prev[11] !== 1'bx ) && ( t6_prev[11] !== t6_expected_prev[11] )
		&& ((t6_expected_prev[11] !== last_t6_exp[11]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[11] = t6_expected_prev[11];
	end
	if (
		( t6_expected_prev[12] !== 1'bx ) && ( t6_prev[12] !== t6_expected_prev[12] )
		&& ((t6_expected_prev[12] !== last_t6_exp[12]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[12] = t6_expected_prev[12];
	end
	if (
		( t6_expected_prev[13] !== 1'bx ) && ( t6_prev[13] !== t6_expected_prev[13] )
		&& ((t6_expected_prev[13] !== last_t6_exp[13]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[13] = t6_expected_prev[13];
	end
	if (
		( t6_expected_prev[14] !== 1'bx ) && ( t6_prev[14] !== t6_expected_prev[14] )
		&& ((t6_expected_prev[14] !== last_t6_exp[14]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[14] = t6_expected_prev[14];
	end
	if (
		( t6_expected_prev[15] !== 1'bx ) && ( t6_prev[15] !== t6_expected_prev[15] )
		&& ((t6_expected_prev[15] !== last_t6_exp[15]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[15] = t6_expected_prev[15];
	end
	if (
		( t6_expected_prev[16] !== 1'bx ) && ( t6_prev[16] !== t6_expected_prev[16] )
		&& ((t6_expected_prev[16] !== last_t6_exp[16]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[16] = t6_expected_prev[16];
	end
	if (
		( t6_expected_prev[17] !== 1'bx ) && ( t6_prev[17] !== t6_expected_prev[17] )
		&& ((t6_expected_prev[17] !== last_t6_exp[17]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[17] = t6_expected_prev[17];
	end
	if (
		( t6_expected_prev[18] !== 1'bx ) && ( t6_prev[18] !== t6_expected_prev[18] )
		&& ((t6_expected_prev[18] !== last_t6_exp[18]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[18] = t6_expected_prev[18];
	end
	if (
		( t6_expected_prev[19] !== 1'bx ) && ( t6_prev[19] !== t6_expected_prev[19] )
		&& ((t6_expected_prev[19] !== last_t6_exp[19]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[19] = t6_expected_prev[19];
	end
	if (
		( t6_expected_prev[20] !== 1'bx ) && ( t6_prev[20] !== t6_expected_prev[20] )
		&& ((t6_expected_prev[20] !== last_t6_exp[20]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[20] = t6_expected_prev[20];
	end
	if (
		( t6_expected_prev[21] !== 1'bx ) && ( t6_prev[21] !== t6_expected_prev[21] )
		&& ((t6_expected_prev[21] !== last_t6_exp[21]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[21] = t6_expected_prev[21];
	end
	if (
		( t6_expected_prev[22] !== 1'bx ) && ( t6_prev[22] !== t6_expected_prev[22] )
		&& ((t6_expected_prev[22] !== last_t6_exp[22]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[22] = t6_expected_prev[22];
	end
	if (
		( t6_expected_prev[23] !== 1'bx ) && ( t6_prev[23] !== t6_expected_prev[23] )
		&& ((t6_expected_prev[23] !== last_t6_exp[23]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[23] = t6_expected_prev[23];
	end
	if (
		( t6_expected_prev[24] !== 1'bx ) && ( t6_prev[24] !== t6_expected_prev[24] )
		&& ((t6_expected_prev[24] !== last_t6_exp[24]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[24] = t6_expected_prev[24];
	end
	if (
		( t6_expected_prev[25] !== 1'bx ) && ( t6_prev[25] !== t6_expected_prev[25] )
		&& ((t6_expected_prev[25] !== last_t6_exp[25]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[25] = t6_expected_prev[25];
	end
	if (
		( t6_expected_prev[26] !== 1'bx ) && ( t6_prev[26] !== t6_expected_prev[26] )
		&& ((t6_expected_prev[26] !== last_t6_exp[26]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[26] = t6_expected_prev[26];
	end
	if (
		( t6_expected_prev[27] !== 1'bx ) && ( t6_prev[27] !== t6_expected_prev[27] )
		&& ((t6_expected_prev[27] !== last_t6_exp[27]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[27] = t6_expected_prev[27];
	end
	if (
		( t6_expected_prev[28] !== 1'bx ) && ( t6_prev[28] !== t6_expected_prev[28] )
		&& ((t6_expected_prev[28] !== last_t6_exp[28]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[28] = t6_expected_prev[28];
	end
	if (
		( t6_expected_prev[29] !== 1'bx ) && ( t6_prev[29] !== t6_expected_prev[29] )
		&& ((t6_expected_prev[29] !== last_t6_exp[29]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[29] = t6_expected_prev[29];
	end
	if (
		( t6_expected_prev[30] !== 1'bx ) && ( t6_prev[30] !== t6_expected_prev[30] )
		&& ((t6_expected_prev[30] !== last_t6_exp[30]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[30] = t6_expected_prev[30];
	end
	if (
		( t6_expected_prev[31] !== 1'bx ) && ( t6_prev[31] !== t6_expected_prev[31] )
		&& ((t6_expected_prev[31] !== last_t6_exp[31]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t6[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t6_expected_prev);
		$display ("     Real value = %b", t6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_t6_exp[31] = t6_expected_prev[31];
	end
	if (
		( ULA_main_expected_prev[0] !== 1'bx ) && ( ULA_main_prev[0] !== ULA_main_expected_prev[0] )
		&& ((ULA_main_expected_prev[0] !== last_ULA_main_exp[0]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[0] = ULA_main_expected_prev[0];
	end
	if (
		( ULA_main_expected_prev[1] !== 1'bx ) && ( ULA_main_prev[1] !== ULA_main_expected_prev[1] )
		&& ((ULA_main_expected_prev[1] !== last_ULA_main_exp[1]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[1] = ULA_main_expected_prev[1];
	end
	if (
		( ULA_main_expected_prev[2] !== 1'bx ) && ( ULA_main_prev[2] !== ULA_main_expected_prev[2] )
		&& ((ULA_main_expected_prev[2] !== last_ULA_main_exp[2]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[2] = ULA_main_expected_prev[2];
	end
	if (
		( ULA_main_expected_prev[3] !== 1'bx ) && ( ULA_main_prev[3] !== ULA_main_expected_prev[3] )
		&& ((ULA_main_expected_prev[3] !== last_ULA_main_exp[3]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[3] = ULA_main_expected_prev[3];
	end
	if (
		( ULA_main_expected_prev[4] !== 1'bx ) && ( ULA_main_prev[4] !== ULA_main_expected_prev[4] )
		&& ((ULA_main_expected_prev[4] !== last_ULA_main_exp[4]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[4] = ULA_main_expected_prev[4];
	end
	if (
		( ULA_main_expected_prev[5] !== 1'bx ) && ( ULA_main_prev[5] !== ULA_main_expected_prev[5] )
		&& ((ULA_main_expected_prev[5] !== last_ULA_main_exp[5]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[5] = ULA_main_expected_prev[5];
	end
	if (
		( ULA_main_expected_prev[6] !== 1'bx ) && ( ULA_main_prev[6] !== ULA_main_expected_prev[6] )
		&& ((ULA_main_expected_prev[6] !== last_ULA_main_exp[6]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[6] = ULA_main_expected_prev[6];
	end
	if (
		( ULA_main_expected_prev[7] !== 1'bx ) && ( ULA_main_prev[7] !== ULA_main_expected_prev[7] )
		&& ((ULA_main_expected_prev[7] !== last_ULA_main_exp[7]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[7] = ULA_main_expected_prev[7];
	end
	if (
		( ULA_main_expected_prev[8] !== 1'bx ) && ( ULA_main_prev[8] !== ULA_main_expected_prev[8] )
		&& ((ULA_main_expected_prev[8] !== last_ULA_main_exp[8]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[8] = ULA_main_expected_prev[8];
	end
	if (
		( ULA_main_expected_prev[9] !== 1'bx ) && ( ULA_main_prev[9] !== ULA_main_expected_prev[9] )
		&& ((ULA_main_expected_prev[9] !== last_ULA_main_exp[9]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[9] = ULA_main_expected_prev[9];
	end
	if (
		( ULA_main_expected_prev[10] !== 1'bx ) && ( ULA_main_prev[10] !== ULA_main_expected_prev[10] )
		&& ((ULA_main_expected_prev[10] !== last_ULA_main_exp[10]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[10] = ULA_main_expected_prev[10];
	end
	if (
		( ULA_main_expected_prev[11] !== 1'bx ) && ( ULA_main_prev[11] !== ULA_main_expected_prev[11] )
		&& ((ULA_main_expected_prev[11] !== last_ULA_main_exp[11]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[11] = ULA_main_expected_prev[11];
	end
	if (
		( ULA_main_expected_prev[12] !== 1'bx ) && ( ULA_main_prev[12] !== ULA_main_expected_prev[12] )
		&& ((ULA_main_expected_prev[12] !== last_ULA_main_exp[12]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[12] = ULA_main_expected_prev[12];
	end
	if (
		( ULA_main_expected_prev[13] !== 1'bx ) && ( ULA_main_prev[13] !== ULA_main_expected_prev[13] )
		&& ((ULA_main_expected_prev[13] !== last_ULA_main_exp[13]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[13] = ULA_main_expected_prev[13];
	end
	if (
		( ULA_main_expected_prev[14] !== 1'bx ) && ( ULA_main_prev[14] !== ULA_main_expected_prev[14] )
		&& ((ULA_main_expected_prev[14] !== last_ULA_main_exp[14]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[14] = ULA_main_expected_prev[14];
	end
	if (
		( ULA_main_expected_prev[15] !== 1'bx ) && ( ULA_main_prev[15] !== ULA_main_expected_prev[15] )
		&& ((ULA_main_expected_prev[15] !== last_ULA_main_exp[15]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[15] = ULA_main_expected_prev[15];
	end
	if (
		( ULA_main_expected_prev[16] !== 1'bx ) && ( ULA_main_prev[16] !== ULA_main_expected_prev[16] )
		&& ((ULA_main_expected_prev[16] !== last_ULA_main_exp[16]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[16] = ULA_main_expected_prev[16];
	end
	if (
		( ULA_main_expected_prev[17] !== 1'bx ) && ( ULA_main_prev[17] !== ULA_main_expected_prev[17] )
		&& ((ULA_main_expected_prev[17] !== last_ULA_main_exp[17]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[17] = ULA_main_expected_prev[17];
	end
	if (
		( ULA_main_expected_prev[18] !== 1'bx ) && ( ULA_main_prev[18] !== ULA_main_expected_prev[18] )
		&& ((ULA_main_expected_prev[18] !== last_ULA_main_exp[18]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[18] = ULA_main_expected_prev[18];
	end
	if (
		( ULA_main_expected_prev[19] !== 1'bx ) && ( ULA_main_prev[19] !== ULA_main_expected_prev[19] )
		&& ((ULA_main_expected_prev[19] !== last_ULA_main_exp[19]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[19] = ULA_main_expected_prev[19];
	end
	if (
		( ULA_main_expected_prev[20] !== 1'bx ) && ( ULA_main_prev[20] !== ULA_main_expected_prev[20] )
		&& ((ULA_main_expected_prev[20] !== last_ULA_main_exp[20]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[20] = ULA_main_expected_prev[20];
	end
	if (
		( ULA_main_expected_prev[21] !== 1'bx ) && ( ULA_main_prev[21] !== ULA_main_expected_prev[21] )
		&& ((ULA_main_expected_prev[21] !== last_ULA_main_exp[21]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[21] = ULA_main_expected_prev[21];
	end
	if (
		( ULA_main_expected_prev[22] !== 1'bx ) && ( ULA_main_prev[22] !== ULA_main_expected_prev[22] )
		&& ((ULA_main_expected_prev[22] !== last_ULA_main_exp[22]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[22] = ULA_main_expected_prev[22];
	end
	if (
		( ULA_main_expected_prev[23] !== 1'bx ) && ( ULA_main_prev[23] !== ULA_main_expected_prev[23] )
		&& ((ULA_main_expected_prev[23] !== last_ULA_main_exp[23]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[23] = ULA_main_expected_prev[23];
	end
	if (
		( ULA_main_expected_prev[24] !== 1'bx ) && ( ULA_main_prev[24] !== ULA_main_expected_prev[24] )
		&& ((ULA_main_expected_prev[24] !== last_ULA_main_exp[24]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[24] = ULA_main_expected_prev[24];
	end
	if (
		( ULA_main_expected_prev[25] !== 1'bx ) && ( ULA_main_prev[25] !== ULA_main_expected_prev[25] )
		&& ((ULA_main_expected_prev[25] !== last_ULA_main_exp[25]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[25] = ULA_main_expected_prev[25];
	end
	if (
		( ULA_main_expected_prev[26] !== 1'bx ) && ( ULA_main_prev[26] !== ULA_main_expected_prev[26] )
		&& ((ULA_main_expected_prev[26] !== last_ULA_main_exp[26]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[26] = ULA_main_expected_prev[26];
	end
	if (
		( ULA_main_expected_prev[27] !== 1'bx ) && ( ULA_main_prev[27] !== ULA_main_expected_prev[27] )
		&& ((ULA_main_expected_prev[27] !== last_ULA_main_exp[27]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[27] = ULA_main_expected_prev[27];
	end
	if (
		( ULA_main_expected_prev[28] !== 1'bx ) && ( ULA_main_prev[28] !== ULA_main_expected_prev[28] )
		&& ((ULA_main_expected_prev[28] !== last_ULA_main_exp[28]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[28] = ULA_main_expected_prev[28];
	end
	if (
		( ULA_main_expected_prev[29] !== 1'bx ) && ( ULA_main_prev[29] !== ULA_main_expected_prev[29] )
		&& ((ULA_main_expected_prev[29] !== last_ULA_main_exp[29]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[29] = ULA_main_expected_prev[29];
	end
	if (
		( ULA_main_expected_prev[30] !== 1'bx ) && ( ULA_main_prev[30] !== ULA_main_expected_prev[30] )
		&& ((ULA_main_expected_prev[30] !== last_ULA_main_exp[30]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[30] = ULA_main_expected_prev[30];
	end
	if (
		( ULA_main_expected_prev[31] !== 1'bx ) && ( ULA_main_prev[31] !== ULA_main_expected_prev[31] )
		&& ((ULA_main_expected_prev[31] !== last_ULA_main_exp[31]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_main[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_main_expected_prev);
		$display ("     Real value = %b", ULA_main_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_ULA_main_exp[31] = ULA_main_expected_prev[31];
	end
	if (
		( ValorA_expected_prev[0] !== 1'bx ) && ( ValorA_prev[0] !== ValorA_expected_prev[0] )
		&& ((ValorA_expected_prev[0] !== last_ValorA_exp[0]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[0] = ValorA_expected_prev[0];
	end
	if (
		( ValorA_expected_prev[1] !== 1'bx ) && ( ValorA_prev[1] !== ValorA_expected_prev[1] )
		&& ((ValorA_expected_prev[1] !== last_ValorA_exp[1]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[1] = ValorA_expected_prev[1];
	end
	if (
		( ValorA_expected_prev[2] !== 1'bx ) && ( ValorA_prev[2] !== ValorA_expected_prev[2] )
		&& ((ValorA_expected_prev[2] !== last_ValorA_exp[2]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[2] = ValorA_expected_prev[2];
	end
	if (
		( ValorA_expected_prev[3] !== 1'bx ) && ( ValorA_prev[3] !== ValorA_expected_prev[3] )
		&& ((ValorA_expected_prev[3] !== last_ValorA_exp[3]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[3] = ValorA_expected_prev[3];
	end
	if (
		( ValorA_expected_prev[4] !== 1'bx ) && ( ValorA_prev[4] !== ValorA_expected_prev[4] )
		&& ((ValorA_expected_prev[4] !== last_ValorA_exp[4]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[4] = ValorA_expected_prev[4];
	end
	if (
		( ValorA_expected_prev[5] !== 1'bx ) && ( ValorA_prev[5] !== ValorA_expected_prev[5] )
		&& ((ValorA_expected_prev[5] !== last_ValorA_exp[5]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[5] = ValorA_expected_prev[5];
	end
	if (
		( ValorA_expected_prev[6] !== 1'bx ) && ( ValorA_prev[6] !== ValorA_expected_prev[6] )
		&& ((ValorA_expected_prev[6] !== last_ValorA_exp[6]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[6] = ValorA_expected_prev[6];
	end
	if (
		( ValorA_expected_prev[7] !== 1'bx ) && ( ValorA_prev[7] !== ValorA_expected_prev[7] )
		&& ((ValorA_expected_prev[7] !== last_ValorA_exp[7]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[7] = ValorA_expected_prev[7];
	end
	if (
		( ValorA_expected_prev[8] !== 1'bx ) && ( ValorA_prev[8] !== ValorA_expected_prev[8] )
		&& ((ValorA_expected_prev[8] !== last_ValorA_exp[8]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[8] = ValorA_expected_prev[8];
	end
	if (
		( ValorA_expected_prev[9] !== 1'bx ) && ( ValorA_prev[9] !== ValorA_expected_prev[9] )
		&& ((ValorA_expected_prev[9] !== last_ValorA_exp[9]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[9] = ValorA_expected_prev[9];
	end
	if (
		( ValorA_expected_prev[10] !== 1'bx ) && ( ValorA_prev[10] !== ValorA_expected_prev[10] )
		&& ((ValorA_expected_prev[10] !== last_ValorA_exp[10]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[10] = ValorA_expected_prev[10];
	end
	if (
		( ValorA_expected_prev[11] !== 1'bx ) && ( ValorA_prev[11] !== ValorA_expected_prev[11] )
		&& ((ValorA_expected_prev[11] !== last_ValorA_exp[11]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[11] = ValorA_expected_prev[11];
	end
	if (
		( ValorA_expected_prev[12] !== 1'bx ) && ( ValorA_prev[12] !== ValorA_expected_prev[12] )
		&& ((ValorA_expected_prev[12] !== last_ValorA_exp[12]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[12] = ValorA_expected_prev[12];
	end
	if (
		( ValorA_expected_prev[13] !== 1'bx ) && ( ValorA_prev[13] !== ValorA_expected_prev[13] )
		&& ((ValorA_expected_prev[13] !== last_ValorA_exp[13]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[13] = ValorA_expected_prev[13];
	end
	if (
		( ValorA_expected_prev[14] !== 1'bx ) && ( ValorA_prev[14] !== ValorA_expected_prev[14] )
		&& ((ValorA_expected_prev[14] !== last_ValorA_exp[14]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[14] = ValorA_expected_prev[14];
	end
	if (
		( ValorA_expected_prev[15] !== 1'bx ) && ( ValorA_prev[15] !== ValorA_expected_prev[15] )
		&& ((ValorA_expected_prev[15] !== last_ValorA_exp[15]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[15] = ValorA_expected_prev[15];
	end
	if (
		( ValorA_expected_prev[16] !== 1'bx ) && ( ValorA_prev[16] !== ValorA_expected_prev[16] )
		&& ((ValorA_expected_prev[16] !== last_ValorA_exp[16]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[16] = ValorA_expected_prev[16];
	end
	if (
		( ValorA_expected_prev[17] !== 1'bx ) && ( ValorA_prev[17] !== ValorA_expected_prev[17] )
		&& ((ValorA_expected_prev[17] !== last_ValorA_exp[17]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[17] = ValorA_expected_prev[17];
	end
	if (
		( ValorA_expected_prev[18] !== 1'bx ) && ( ValorA_prev[18] !== ValorA_expected_prev[18] )
		&& ((ValorA_expected_prev[18] !== last_ValorA_exp[18]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[18] = ValorA_expected_prev[18];
	end
	if (
		( ValorA_expected_prev[19] !== 1'bx ) && ( ValorA_prev[19] !== ValorA_expected_prev[19] )
		&& ((ValorA_expected_prev[19] !== last_ValorA_exp[19]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[19] = ValorA_expected_prev[19];
	end
	if (
		( ValorA_expected_prev[20] !== 1'bx ) && ( ValorA_prev[20] !== ValorA_expected_prev[20] )
		&& ((ValorA_expected_prev[20] !== last_ValorA_exp[20]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[20] = ValorA_expected_prev[20];
	end
	if (
		( ValorA_expected_prev[21] !== 1'bx ) && ( ValorA_prev[21] !== ValorA_expected_prev[21] )
		&& ((ValorA_expected_prev[21] !== last_ValorA_exp[21]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[21] = ValorA_expected_prev[21];
	end
	if (
		( ValorA_expected_prev[22] !== 1'bx ) && ( ValorA_prev[22] !== ValorA_expected_prev[22] )
		&& ((ValorA_expected_prev[22] !== last_ValorA_exp[22]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[22] = ValorA_expected_prev[22];
	end
	if (
		( ValorA_expected_prev[23] !== 1'bx ) && ( ValorA_prev[23] !== ValorA_expected_prev[23] )
		&& ((ValorA_expected_prev[23] !== last_ValorA_exp[23]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[23] = ValorA_expected_prev[23];
	end
	if (
		( ValorA_expected_prev[24] !== 1'bx ) && ( ValorA_prev[24] !== ValorA_expected_prev[24] )
		&& ((ValorA_expected_prev[24] !== last_ValorA_exp[24]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[24] = ValorA_expected_prev[24];
	end
	if (
		( ValorA_expected_prev[25] !== 1'bx ) && ( ValorA_prev[25] !== ValorA_expected_prev[25] )
		&& ((ValorA_expected_prev[25] !== last_ValorA_exp[25]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[25] = ValorA_expected_prev[25];
	end
	if (
		( ValorA_expected_prev[26] !== 1'bx ) && ( ValorA_prev[26] !== ValorA_expected_prev[26] )
		&& ((ValorA_expected_prev[26] !== last_ValorA_exp[26]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[26] = ValorA_expected_prev[26];
	end
	if (
		( ValorA_expected_prev[27] !== 1'bx ) && ( ValorA_prev[27] !== ValorA_expected_prev[27] )
		&& ((ValorA_expected_prev[27] !== last_ValorA_exp[27]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[27] = ValorA_expected_prev[27];
	end
	if (
		( ValorA_expected_prev[28] !== 1'bx ) && ( ValorA_prev[28] !== ValorA_expected_prev[28] )
		&& ((ValorA_expected_prev[28] !== last_ValorA_exp[28]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[28] = ValorA_expected_prev[28];
	end
	if (
		( ValorA_expected_prev[29] !== 1'bx ) && ( ValorA_prev[29] !== ValorA_expected_prev[29] )
		&& ((ValorA_expected_prev[29] !== last_ValorA_exp[29]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[29] = ValorA_expected_prev[29];
	end
	if (
		( ValorA_expected_prev[30] !== 1'bx ) && ( ValorA_prev[30] !== ValorA_expected_prev[30] )
		&& ((ValorA_expected_prev[30] !== last_ValorA_exp[30]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[30] = ValorA_expected_prev[30];
	end
	if (
		( ValorA_expected_prev[31] !== 1'bx ) && ( ValorA_prev[31] !== ValorA_expected_prev[31] )
		&& ((ValorA_expected_prev[31] !== last_ValorA_exp[31]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorA_expected_prev);
		$display ("     Real value = %b", ValorA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_ValorA_exp[31] = ValorA_expected_prev[31];
	end
	if (
		( ValorB_expected_prev[0] !== 1'bx ) && ( ValorB_prev[0] !== ValorB_expected_prev[0] )
		&& ((ValorB_expected_prev[0] !== last_ValorB_exp[0]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[0] = ValorB_expected_prev[0];
	end
	if (
		( ValorB_expected_prev[1] !== 1'bx ) && ( ValorB_prev[1] !== ValorB_expected_prev[1] )
		&& ((ValorB_expected_prev[1] !== last_ValorB_exp[1]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[1] = ValorB_expected_prev[1];
	end
	if (
		( ValorB_expected_prev[2] !== 1'bx ) && ( ValorB_prev[2] !== ValorB_expected_prev[2] )
		&& ((ValorB_expected_prev[2] !== last_ValorB_exp[2]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[2] = ValorB_expected_prev[2];
	end
	if (
		( ValorB_expected_prev[3] !== 1'bx ) && ( ValorB_prev[3] !== ValorB_expected_prev[3] )
		&& ((ValorB_expected_prev[3] !== last_ValorB_exp[3]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[3] = ValorB_expected_prev[3];
	end
	if (
		( ValorB_expected_prev[4] !== 1'bx ) && ( ValorB_prev[4] !== ValorB_expected_prev[4] )
		&& ((ValorB_expected_prev[4] !== last_ValorB_exp[4]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[4] = ValorB_expected_prev[4];
	end
	if (
		( ValorB_expected_prev[5] !== 1'bx ) && ( ValorB_prev[5] !== ValorB_expected_prev[5] )
		&& ((ValorB_expected_prev[5] !== last_ValorB_exp[5]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[5] = ValorB_expected_prev[5];
	end
	if (
		( ValorB_expected_prev[6] !== 1'bx ) && ( ValorB_prev[6] !== ValorB_expected_prev[6] )
		&& ((ValorB_expected_prev[6] !== last_ValorB_exp[6]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[6] = ValorB_expected_prev[6];
	end
	if (
		( ValorB_expected_prev[7] !== 1'bx ) && ( ValorB_prev[7] !== ValorB_expected_prev[7] )
		&& ((ValorB_expected_prev[7] !== last_ValorB_exp[7]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[7] = ValorB_expected_prev[7];
	end
	if (
		( ValorB_expected_prev[8] !== 1'bx ) && ( ValorB_prev[8] !== ValorB_expected_prev[8] )
		&& ((ValorB_expected_prev[8] !== last_ValorB_exp[8]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[8] = ValorB_expected_prev[8];
	end
	if (
		( ValorB_expected_prev[9] !== 1'bx ) && ( ValorB_prev[9] !== ValorB_expected_prev[9] )
		&& ((ValorB_expected_prev[9] !== last_ValorB_exp[9]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[9] = ValorB_expected_prev[9];
	end
	if (
		( ValorB_expected_prev[10] !== 1'bx ) && ( ValorB_prev[10] !== ValorB_expected_prev[10] )
		&& ((ValorB_expected_prev[10] !== last_ValorB_exp[10]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[10] = ValorB_expected_prev[10];
	end
	if (
		( ValorB_expected_prev[11] !== 1'bx ) && ( ValorB_prev[11] !== ValorB_expected_prev[11] )
		&& ((ValorB_expected_prev[11] !== last_ValorB_exp[11]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[11] = ValorB_expected_prev[11];
	end
	if (
		( ValorB_expected_prev[12] !== 1'bx ) && ( ValorB_prev[12] !== ValorB_expected_prev[12] )
		&& ((ValorB_expected_prev[12] !== last_ValorB_exp[12]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[12] = ValorB_expected_prev[12];
	end
	if (
		( ValorB_expected_prev[13] !== 1'bx ) && ( ValorB_prev[13] !== ValorB_expected_prev[13] )
		&& ((ValorB_expected_prev[13] !== last_ValorB_exp[13]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[13] = ValorB_expected_prev[13];
	end
	if (
		( ValorB_expected_prev[14] !== 1'bx ) && ( ValorB_prev[14] !== ValorB_expected_prev[14] )
		&& ((ValorB_expected_prev[14] !== last_ValorB_exp[14]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[14] = ValorB_expected_prev[14];
	end
	if (
		( ValorB_expected_prev[15] !== 1'bx ) && ( ValorB_prev[15] !== ValorB_expected_prev[15] )
		&& ((ValorB_expected_prev[15] !== last_ValorB_exp[15]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[15] = ValorB_expected_prev[15];
	end
	if (
		( ValorB_expected_prev[16] !== 1'bx ) && ( ValorB_prev[16] !== ValorB_expected_prev[16] )
		&& ((ValorB_expected_prev[16] !== last_ValorB_exp[16]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[16] = ValorB_expected_prev[16];
	end
	if (
		( ValorB_expected_prev[17] !== 1'bx ) && ( ValorB_prev[17] !== ValorB_expected_prev[17] )
		&& ((ValorB_expected_prev[17] !== last_ValorB_exp[17]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[17] = ValorB_expected_prev[17];
	end
	if (
		( ValorB_expected_prev[18] !== 1'bx ) && ( ValorB_prev[18] !== ValorB_expected_prev[18] )
		&& ((ValorB_expected_prev[18] !== last_ValorB_exp[18]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[18] = ValorB_expected_prev[18];
	end
	if (
		( ValorB_expected_prev[19] !== 1'bx ) && ( ValorB_prev[19] !== ValorB_expected_prev[19] )
		&& ((ValorB_expected_prev[19] !== last_ValorB_exp[19]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[19] = ValorB_expected_prev[19];
	end
	if (
		( ValorB_expected_prev[20] !== 1'bx ) && ( ValorB_prev[20] !== ValorB_expected_prev[20] )
		&& ((ValorB_expected_prev[20] !== last_ValorB_exp[20]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[20] = ValorB_expected_prev[20];
	end
	if (
		( ValorB_expected_prev[21] !== 1'bx ) && ( ValorB_prev[21] !== ValorB_expected_prev[21] )
		&& ((ValorB_expected_prev[21] !== last_ValorB_exp[21]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[21] = ValorB_expected_prev[21];
	end
	if (
		( ValorB_expected_prev[22] !== 1'bx ) && ( ValorB_prev[22] !== ValorB_expected_prev[22] )
		&& ((ValorB_expected_prev[22] !== last_ValorB_exp[22]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[22] = ValorB_expected_prev[22];
	end
	if (
		( ValorB_expected_prev[23] !== 1'bx ) && ( ValorB_prev[23] !== ValorB_expected_prev[23] )
		&& ((ValorB_expected_prev[23] !== last_ValorB_exp[23]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[23] = ValorB_expected_prev[23];
	end
	if (
		( ValorB_expected_prev[24] !== 1'bx ) && ( ValorB_prev[24] !== ValorB_expected_prev[24] )
		&& ((ValorB_expected_prev[24] !== last_ValorB_exp[24]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[24] = ValorB_expected_prev[24];
	end
	if (
		( ValorB_expected_prev[25] !== 1'bx ) && ( ValorB_prev[25] !== ValorB_expected_prev[25] )
		&& ((ValorB_expected_prev[25] !== last_ValorB_exp[25]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[25] = ValorB_expected_prev[25];
	end
	if (
		( ValorB_expected_prev[26] !== 1'bx ) && ( ValorB_prev[26] !== ValorB_expected_prev[26] )
		&& ((ValorB_expected_prev[26] !== last_ValorB_exp[26]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[26] = ValorB_expected_prev[26];
	end
	if (
		( ValorB_expected_prev[27] !== 1'bx ) && ( ValorB_prev[27] !== ValorB_expected_prev[27] )
		&& ((ValorB_expected_prev[27] !== last_ValorB_exp[27]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[27] = ValorB_expected_prev[27];
	end
	if (
		( ValorB_expected_prev[28] !== 1'bx ) && ( ValorB_prev[28] !== ValorB_expected_prev[28] )
		&& ((ValorB_expected_prev[28] !== last_ValorB_exp[28]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[28] = ValorB_expected_prev[28];
	end
	if (
		( ValorB_expected_prev[29] !== 1'bx ) && ( ValorB_prev[29] !== ValorB_expected_prev[29] )
		&& ((ValorB_expected_prev[29] !== last_ValorB_exp[29]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[29] = ValorB_expected_prev[29];
	end
	if (
		( ValorB_expected_prev[30] !== 1'bx ) && ( ValorB_prev[30] !== ValorB_expected_prev[30] )
		&& ((ValorB_expected_prev[30] !== last_ValorB_exp[30]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[30] = ValorB_expected_prev[30];
	end
	if (
		( ValorB_expected_prev[31] !== 1'bx ) && ( ValorB_prev[31] !== ValorB_expected_prev[31] )
		&& ((ValorB_expected_prev[31] !== last_ValorB_exp[31]) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ValorB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ValorB_expected_prev);
		$display ("     Real value = %b", ValorB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_ValorB_exp[31] = ValorB_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg main_clk;
reg sec_clk;
// wires                                               
wire Branch;
wire [31:0] Cause;
wire [31:0] EPC;
wire [1:0] ForwardA;
wire [1:0] ForwardB;
wire [31:0] HI;
wire [31:0] Instruction;
wire Jump;
wire [31:0] JumpEX;
wire Link;
wire [31:0] LO;
wire MemtoReg;
wire moveHiLo;
wire [3:0] opALU;
wire OrigALU;
wire [31:0] PC;
wire [31:0] PC/EX;
wire ReadMem;
wire [4:0] regDestino;
wire RegDst;
wire RegWriteWB;
wire [31:0] saidaMemDados;
wire [31:0] SaidaWB;
wire [4:0] shamt;
wire [31:0] t0;
wire [31:0] t1;
wire [31:0] t2;
wire [31:0] t3;
wire [31:0] t4;
wire [31:0] t5;
wire [31:0] t6;
wire [31:0] ULA_main;
wire [31:0] ValorA;
wire [31:0] ValorB;
wire WriteMem;
wire WriteReg;

wire sampler;                             

// assign statements (if any)                          
lab2 i1 (
// port map - connection between master ports and signals/registers   
	.Branch(Branch),
	.Cause(Cause),
	.EPC(EPC),
	.ForwardA(ForwardA),
	.ForwardB(ForwardB),
	.HI(HI),
	.Instruction(Instruction),
	.Jump(Jump),
	.JumpEX(JumpEX),
	.Link(Link),
	.LO(LO),
	.main_clk(main_clk),
	.MemtoReg(MemtoReg),
	.moveHiLo(moveHiLo),
	.opALU(opALU),
	.OrigALU(OrigALU),
	.PC(PC),
	.\PC/EX (PC/EX),
	.ReadMem(ReadMem),
	.regDestino(regDestino),
	.RegDst(RegDst),
	.RegWriteWB(RegWriteWB),
	.saidaMemDados(saidaMemDados),
	.SaidaWB(SaidaWB),
	.sec_clk(sec_clk),
	.shamt(shamt),
	.t0(t0),
	.t1(t1),
	.t2(t2),
	.t3(t3),
	.t4(t4),
	.t5(t5),
	.t6(t6),
	.ULA_main(ULA_main),
	.ValorA(ValorA),
	.ValorB(ValorB),
	.WriteMem(WriteMem),
	.WriteReg(WriteReg)
);

// main_clk
always
begin
	main_clk = 1'b0;
	main_clk = #100000 1'b1;
	#100000;
end 

// sec_clk
always
begin
	sec_clk = 1'b0;
	sec_clk = #50000 1'b1;
	#50000;
end 

lab2_vlg_sample_tst tb_sample (
	.main_clk(main_clk),
	.sec_clk(sec_clk),
	.sampler_tx(sampler)
);

lab2_vlg_check_tst tb_out(
	.Branch(Branch),
	.Cause(Cause),
	.EPC(EPC),
	.ForwardA(ForwardA),
	.ForwardB(ForwardB),
	.HI(HI),
	.Instruction(Instruction),
	.Jump(Jump),
	.JumpEX(JumpEX),
	.Link(Link),
	.LO(LO),
	.MemtoReg(MemtoReg),
	.moveHiLo(moveHiLo),
	.opALU(opALU),
	.OrigALU(OrigALU),
	.PC(PC),
	.PC/EX(PC/EX),
	.ReadMem(ReadMem),
	.regDestino(regDestino),
	.RegDst(RegDst),
	.RegWriteWB(RegWriteWB),
	.saidaMemDados(saidaMemDados),
	.SaidaWB(SaidaWB),
	.shamt(shamt),
	.t0(t0),
	.t1(t1),
	.t2(t2),
	.t3(t3),
	.t4(t4),
	.t5(t5),
	.t6(t6),
	.ULA_main(ULA_main),
	.ValorA(ValorA),
	.ValorB(ValorB),
	.WriteMem(WriteMem),
	.WriteReg(WriteReg),
	.sampler_rx(sampler)
);
endmodule

